
RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008154  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  080082e4  080082e4  000182e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008774  08008774  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08008774  08008774  00018774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800877c  0800877c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800877c  0800877c  0001877c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008780  08008780  00018780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08008784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000090  08008810  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08008810  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a27  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000310c  00000000  00000000  00037ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  0003abf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001260  00000000  00000000  0003bfa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029562  00000000  00000000  0003d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d83  00000000  00000000  0006676a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f70fb  00000000  00000000  0007f4ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001765e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fe8  00000000  00000000  00176638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080082cc 	.word	0x080082cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	080082cc 	.word	0x080082cc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <buzzerInit>:
#include "MyMain.h"
#include "Buzzer.h"

void buzzerInit(BUZZER* buzzer, TIM_HandleTypeDef* timer, uint32_t channel)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
	buzzer->timer = timer;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	601a      	str	r2, [r3, #0]
	buzzer->channel = channel;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	605a      	str	r2, [r3, #4]
	buzzer->counter = 0;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
	buzzer->maxCount = 0;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	2200      	movs	r2, #0
 80005c6:	60da      	str	r2, [r3, #12]
	buzzer->isOn = 0;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	2200      	movs	r2, #0
 80005cc:	611a      	str	r2, [r3, #16]
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <buzzerStart>:

void buzzerStart(BUZZER* buzzer, uint32_t maxCount)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b082      	sub	sp, #8
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
 80005e2:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(buzzer->timer, buzzer->channel);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	4619      	mov	r1, r3
 80005ee:	4610      	mov	r0, r2
 80005f0:	f004 f9f6 	bl	80049e0 <HAL_TIM_PWM_Start>
	buzzer->maxCount = maxCount;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	683a      	ldr	r2, [r7, #0]
 80005f8:	60da      	str	r2, [r3, #12]
	buzzer->isOn = 1;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2201      	movs	r2, #1
 80005fe:	611a      	str	r2, [r3, #16]
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <buzzerOnTimerInterrupt>:

void buzzerOnTimerInterrupt(BUZZER* buzzer)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	if (buzzer->isOn)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	691b      	ldr	r3, [r3, #16]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d018      	beq.n	800064a <buzzerOnTimerInterrupt+0x42>
	{
		buzzer->counter++;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	1c5a      	adds	r2, r3, #1
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	609a      	str	r2, [r3, #8]
		if ((buzzer->counter) >= (buzzer->maxCount))
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	689a      	ldr	r2, [r3, #8]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	68db      	ldr	r3, [r3, #12]
 800062a:	429a      	cmp	r2, r3
 800062c:	d30d      	bcc.n	800064a <buzzerOnTimerInterrupt+0x42>
		{
			HAL_TIM_PWM_Stop(buzzer->timer, buzzer->channel);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	4619      	mov	r1, r3
 8000638:	4610      	mov	r0, r2
 800063a:	f004 fad7 	bl	8004bec <HAL_TIM_PWM_Stop>
			buzzer->counter = 0;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
			buzzer->isOn = 0;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
		}
	}
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <dateTimeFromRawData>:
#include "DateTime.h"

const char *days[] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};

void dateTimeFromRawData(const uint8_t *data, DateTime_t *dt)
{
 8000652:	b480      	push	{r7}
 8000654:	b083      	sub	sp, #12
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
 800065a:	6039      	str	r1, [r7, #0]
	dt->second = (data[0] & 0xF) + (data[0] >> 4) * 10;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	f003 030f 	and.w	r3, r3, #15
 8000664:	b2da      	uxtb	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	091b      	lsrs	r3, r3, #4
 800066c:	b2db      	uxtb	r3, r3
 800066e:	4619      	mov	r1, r3
 8000670:	0089      	lsls	r1, r1, #2
 8000672:	440b      	add	r3, r1
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	b2db      	uxtb	r3, r3
 8000678:	4413      	add	r3, r2
 800067a:	b2da      	uxtb	r2, r3
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	701a      	strb	r2, [r3, #0]
	dt->minute = (data[1] & 0xF) + (data[1] >> 4) * 10;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	3301      	adds	r3, #1
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	f003 030f 	and.w	r3, r3, #15
 800068a:	b2da      	uxtb	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	3301      	adds	r3, #1
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	091b      	lsrs	r3, r3, #4
 8000694:	b2db      	uxtb	r3, r3
 8000696:	4619      	mov	r1, r3
 8000698:	0089      	lsls	r1, r1, #2
 800069a:	440b      	add	r3, r1
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	4413      	add	r3, r2
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	705a      	strb	r2, [r3, #1]

	dt->hour   = ((data[2] & 0xF) +
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	3302      	adds	r3, #2
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	f003 030f 	and.w	r3, r3, #15
 80006b2:	b2da      	uxtb	r2, r3
			     ((data[2] & 0x10) >> 4) * 10 +
			     ((data[2] & 0x20) >> 5) * (data[2] & 0x40 ? 12 : 20));
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3302      	adds	r3, #2
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	115b      	asrs	r3, r3, #5
			     ((data[2] & 0x10) >> 4) * 10 +
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	b2db      	uxtb	r3, r3
			     ((data[2] & 0x20) >> 5) * (data[2] & 0x40 ? 12 : 20));
 80006c4:	6879      	ldr	r1, [r7, #4]
 80006c6:	3102      	adds	r1, #2
 80006c8:	7809      	ldrb	r1, [r1, #0]
 80006ca:	f001 0140 	and.w	r1, r1, #64	; 0x40
			     ((data[2] & 0x10) >> 4) * 10 +
 80006ce:	2900      	cmp	r1, #0
 80006d0:	d001      	beq.n	80006d6 <dateTimeFromRawData+0x84>
 80006d2:	210c      	movs	r1, #12
 80006d4:	e000      	b.n	80006d8 <dateTimeFromRawData+0x86>
 80006d6:	2114      	movs	r1, #20
 80006d8:	fb11 f303 	smulbb	r3, r1, r3
 80006dc:	b2d9      	uxtb	r1, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	3302      	adds	r3, #2
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	111b      	asrs	r3, r3, #4
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	4618      	mov	r0, r3
 80006f0:	0080      	lsls	r0, r0, #2
 80006f2:	4403      	add	r3, r0
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	440b      	add	r3, r1
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	4413      	add	r3, r2
 80006fe:	b2da      	uxtb	r2, r3
	dt->hour   = ((data[2] & 0xF) +
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	709a      	strb	r2, [r3, #2]

	dt->day    = (data[3] & 0xF);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	3303      	adds	r3, #3
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	f003 030f 	and.w	r3, r3, #15
 800070e:	b2da      	uxtb	r2, r3
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	70da      	strb	r2, [r3, #3]
	dt->date   = (data[4] & 0xF) + (data[4] >> 4) * 10;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	3304      	adds	r3, #4
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	f003 030f 	and.w	r3, r3, #15
 800071e:	b2da      	uxtb	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3304      	adds	r3, #4
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	091b      	lsrs	r3, r3, #4
 8000728:	b2db      	uxtb	r3, r3
 800072a:	4619      	mov	r1, r3
 800072c:	0089      	lsls	r1, r1, #2
 800072e:	440b      	add	r3, r1
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	b2db      	uxtb	r3, r3
 8000734:	4413      	add	r3, r2
 8000736:	b2da      	uxtb	r2, r3
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	711a      	strb	r2, [r3, #4]
	dt->month  = (data[5] & 0xF) + (data[5] >> 4) * 10;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3305      	adds	r3, #5
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	f003 030f 	and.w	r3, r3, #15
 8000746:	b2da      	uxtb	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3305      	adds	r3, #5
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	091b      	lsrs	r3, r3, #4
 8000750:	b2db      	uxtb	r3, r3
 8000752:	4619      	mov	r1, r3
 8000754:	0089      	lsls	r1, r1, #2
 8000756:	440b      	add	r3, r1
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	b2db      	uxtb	r3, r3
 800075c:	4413      	add	r3, r2
 800075e:	b2da      	uxtb	r2, r3
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	715a      	strb	r2, [r3, #5]
	dt->year   = (data[6] & 0xF) + (data[6] >> 4) * 10;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3306      	adds	r3, #6
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	f003 030f 	and.w	r3, r3, #15
 800076e:	b2da      	uxtb	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3306      	adds	r3, #6
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	091b      	lsrs	r3, r3, #4
 8000778:	b2db      	uxtb	r3, r3
 800077a:	4619      	mov	r1, r3
 800077c:	0089      	lsls	r1, r1, #2
 800077e:	440b      	add	r3, r1
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	b2db      	uxtb	r3, r3
 8000784:	4413      	add	r3, r2
 8000786:	b2da      	uxtb	r2, r3
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	719a      	strb	r2, [r3, #6]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <dateTimeToRawData>:

void dateTimeToRawData(uint8_t *data, const DateTime_t *dt)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
	data[0] = (dt->second % 10) | ((dt->second / 10) << 4);
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	781a      	ldrb	r2, [r3, #0]
 80007a6:	4b58      	ldr	r3, [pc, #352]	; (8000908 <dateTimeToRawData+0x170>)
 80007a8:	fba3 1302 	umull	r1, r3, r3, r2
 80007ac:	08d9      	lsrs	r1, r3, #3
 80007ae:	460b      	mov	r3, r1
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	440b      	add	r3, r1
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	b25a      	sxtb	r2, r3
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4951      	ldr	r1, [pc, #324]	; (8000908 <dateTimeToRawData+0x170>)
 80007c2:	fba1 1303 	umull	r1, r3, r1, r3
 80007c6:	08db      	lsrs	r3, r3, #3
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	011b      	lsls	r3, r3, #4
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	4313      	orrs	r3, r2
 80007d0:	b25b      	sxtb	r3, r3
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	701a      	strb	r2, [r3, #0]
	data[1] = (dt->minute % 10) | ((dt->minute / 10) << 4);
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	785a      	ldrb	r2, [r3, #1]
 80007dc:	4b4a      	ldr	r3, [pc, #296]	; (8000908 <dateTimeToRawData+0x170>)
 80007de:	fba3 1302 	umull	r1, r3, r3, r2
 80007e2:	08d9      	lsrs	r1, r3, #3
 80007e4:	460b      	mov	r3, r1
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	440b      	add	r3, r1
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	b25a      	sxtb	r2, r3
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	785b      	ldrb	r3, [r3, #1]
 80007f6:	4944      	ldr	r1, [pc, #272]	; (8000908 <dateTimeToRawData+0x170>)
 80007f8:	fba1 1303 	umull	r1, r3, r1, r3
 80007fc:	08db      	lsrs	r3, r3, #3
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	011b      	lsls	r3, r3, #4
 8000802:	b25b      	sxtb	r3, r3
 8000804:	4313      	orrs	r3, r2
 8000806:	b25a      	sxtb	r2, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3301      	adds	r3, #1
 800080c:	b2d2      	uxtb	r2, r2
 800080e:	701a      	strb	r2, [r3, #0]
	data[2] = (dt->hour   % 10) | ((dt->hour   / 10) << 4);
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	789a      	ldrb	r2, [r3, #2]
 8000814:	4b3c      	ldr	r3, [pc, #240]	; (8000908 <dateTimeToRawData+0x170>)
 8000816:	fba3 1302 	umull	r1, r3, r3, r2
 800081a:	08d9      	lsrs	r1, r3, #3
 800081c:	460b      	mov	r3, r1
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	440b      	add	r3, r1
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	b2db      	uxtb	r3, r3
 8000828:	b25a      	sxtb	r2, r3
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	789b      	ldrb	r3, [r3, #2]
 800082e:	4936      	ldr	r1, [pc, #216]	; (8000908 <dateTimeToRawData+0x170>)
 8000830:	fba1 1303 	umull	r1, r3, r1, r3
 8000834:	08db      	lsrs	r3, r3, #3
 8000836:	b2db      	uxtb	r3, r3
 8000838:	011b      	lsls	r3, r3, #4
 800083a:	b25b      	sxtb	r3, r3
 800083c:	4313      	orrs	r3, r2
 800083e:	b25a      	sxtb	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3302      	adds	r3, #2
 8000844:	b2d2      	uxtb	r2, r2
 8000846:	701a      	strb	r2, [r3, #0]
	data[3] = (dt->day);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3303      	adds	r3, #3
 800084c:	683a      	ldr	r2, [r7, #0]
 800084e:	78d2      	ldrb	r2, [r2, #3]
 8000850:	701a      	strb	r2, [r3, #0]
	data[4] = (dt->date   % 10) | ((dt->date   / 10) << 4);
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	791a      	ldrb	r2, [r3, #4]
 8000856:	4b2c      	ldr	r3, [pc, #176]	; (8000908 <dateTimeToRawData+0x170>)
 8000858:	fba3 1302 	umull	r1, r3, r3, r2
 800085c:	08d9      	lsrs	r1, r3, #3
 800085e:	460b      	mov	r3, r1
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	440b      	add	r3, r1
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	b2db      	uxtb	r3, r3
 800086a:	b25a      	sxtb	r2, r3
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	791b      	ldrb	r3, [r3, #4]
 8000870:	4925      	ldr	r1, [pc, #148]	; (8000908 <dateTimeToRawData+0x170>)
 8000872:	fba1 1303 	umull	r1, r3, r1, r3
 8000876:	08db      	lsrs	r3, r3, #3
 8000878:	b2db      	uxtb	r3, r3
 800087a:	011b      	lsls	r3, r3, #4
 800087c:	b25b      	sxtb	r3, r3
 800087e:	4313      	orrs	r3, r2
 8000880:	b25a      	sxtb	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	3304      	adds	r3, #4
 8000886:	b2d2      	uxtb	r2, r2
 8000888:	701a      	strb	r2, [r3, #0]
	data[5] = (dt->month  % 10) | ((dt->month  / 10) << 4);
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	795a      	ldrb	r2, [r3, #5]
 800088e:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <dateTimeToRawData+0x170>)
 8000890:	fba3 1302 	umull	r1, r3, r3, r2
 8000894:	08d9      	lsrs	r1, r3, #3
 8000896:	460b      	mov	r3, r1
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	440b      	add	r3, r1
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	1ad3      	subs	r3, r2, r3
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	b25a      	sxtb	r2, r3
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	795b      	ldrb	r3, [r3, #5]
 80008a8:	4917      	ldr	r1, [pc, #92]	; (8000908 <dateTimeToRawData+0x170>)
 80008aa:	fba1 1303 	umull	r1, r3, r1, r3
 80008ae:	08db      	lsrs	r3, r3, #3
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	011b      	lsls	r3, r3, #4
 80008b4:	b25b      	sxtb	r3, r3
 80008b6:	4313      	orrs	r3, r2
 80008b8:	b25a      	sxtb	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	3305      	adds	r3, #5
 80008be:	b2d2      	uxtb	r2, r2
 80008c0:	701a      	strb	r2, [r3, #0]
	data[6] = (dt->year   % 10) | ((dt->year   / 10) << 4);
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	799a      	ldrb	r2, [r3, #6]
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <dateTimeToRawData+0x170>)
 80008c8:	fba3 1302 	umull	r1, r3, r3, r2
 80008cc:	08d9      	lsrs	r1, r3, #3
 80008ce:	460b      	mov	r3, r1
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	440b      	add	r3, r1
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	1ad3      	subs	r3, r2, r3
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	b25a      	sxtb	r2, r3
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	799b      	ldrb	r3, [r3, #6]
 80008e0:	4909      	ldr	r1, [pc, #36]	; (8000908 <dateTimeToRawData+0x170>)
 80008e2:	fba1 1303 	umull	r1, r3, r1, r3
 80008e6:	08db      	lsrs	r3, r3, #3
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	011b      	lsls	r3, r3, #4
 80008ec:	b25b      	sxtb	r3, r3
 80008ee:	4313      	orrs	r3, r2
 80008f0:	b25a      	sxtb	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3306      	adds	r3, #6
 80008f6:	b2d2      	uxtb	r2, r2
 80008f8:	701a      	strb	r2, [r3, #0]
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	cccccccd 	.word	0xcccccccd

0800090c <dateTimeFromString>:

void dateTimeFromString(char *timeString, DateTime_t *dt)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
	char *delim = ":";
 8000916:	4b2e      	ldr	r3, [pc, #184]	; (80009d0 <dateTimeFromString+0xc4>)
 8000918:	60fb      	str	r3, [r7, #12]
	char *token = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]

	token = strtok(timeString, delim);
 800091e:	68f9      	ldr	r1, [r7, #12]
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f005 ffe3 	bl	80068ec <strtok>
 8000926:	60b8      	str	r0, [r7, #8]
	dt->year   = atoi(token);
 8000928:	68b8      	ldr	r0, [r7, #8]
 800092a:	f005 fea8 	bl	800667e <atoi>
 800092e:	4603      	mov	r3, r0
 8000930:	b2da      	uxtb	r2, r3
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	719a      	strb	r2, [r3, #6]
	token = strtok(NULL, delim);
 8000936:	68f9      	ldr	r1, [r7, #12]
 8000938:	2000      	movs	r0, #0
 800093a:	f005 ffd7 	bl	80068ec <strtok>
 800093e:	60b8      	str	r0, [r7, #8]
	dt->month  = atoi(token);
 8000940:	68b8      	ldr	r0, [r7, #8]
 8000942:	f005 fe9c 	bl	800667e <atoi>
 8000946:	4603      	mov	r3, r0
 8000948:	b2da      	uxtb	r2, r3
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	715a      	strb	r2, [r3, #5]
	token = strtok(NULL, delim);
 800094e:	68f9      	ldr	r1, [r7, #12]
 8000950:	2000      	movs	r0, #0
 8000952:	f005 ffcb 	bl	80068ec <strtok>
 8000956:	60b8      	str	r0, [r7, #8]
	dt->date   = atoi(token);
 8000958:	68b8      	ldr	r0, [r7, #8]
 800095a:	f005 fe90 	bl	800667e <atoi>
 800095e:	4603      	mov	r3, r0
 8000960:	b2da      	uxtb	r2, r3
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	711a      	strb	r2, [r3, #4]
	token = strtok(NULL, delim);
 8000966:	68f9      	ldr	r1, [r7, #12]
 8000968:	2000      	movs	r0, #0
 800096a:	f005 ffbf 	bl	80068ec <strtok>
 800096e:	60b8      	str	r0, [r7, #8]
	dt->day    = atoi(token);
 8000970:	68b8      	ldr	r0, [r7, #8]
 8000972:	f005 fe84 	bl	800667e <atoi>
 8000976:	4603      	mov	r3, r0
 8000978:	b2da      	uxtb	r2, r3
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	70da      	strb	r2, [r3, #3]
	token = strtok(NULL, delim);
 800097e:	68f9      	ldr	r1, [r7, #12]
 8000980:	2000      	movs	r0, #0
 8000982:	f005 ffb3 	bl	80068ec <strtok>
 8000986:	60b8      	str	r0, [r7, #8]
	dt->hour   = atoi(token);
 8000988:	68b8      	ldr	r0, [r7, #8]
 800098a:	f005 fe78 	bl	800667e <atoi>
 800098e:	4603      	mov	r3, r0
 8000990:	b2da      	uxtb	r2, r3
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	709a      	strb	r2, [r3, #2]
	token = strtok(NULL, delim);
 8000996:	68f9      	ldr	r1, [r7, #12]
 8000998:	2000      	movs	r0, #0
 800099a:	f005 ffa7 	bl	80068ec <strtok>
 800099e:	60b8      	str	r0, [r7, #8]
	dt->minute = atoi(token);
 80009a0:	68b8      	ldr	r0, [r7, #8]
 80009a2:	f005 fe6c 	bl	800667e <atoi>
 80009a6:	4603      	mov	r3, r0
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	705a      	strb	r2, [r3, #1]
	token = strtok(NULL, delim);
 80009ae:	68f9      	ldr	r1, [r7, #12]
 80009b0:	2000      	movs	r0, #0
 80009b2:	f005 ff9b 	bl	80068ec <strtok>
 80009b6:	60b8      	str	r0, [r7, #8]
	dt->second = atoi(token);
 80009b8:	68b8      	ldr	r0, [r7, #8]
 80009ba:	f005 fe60 	bl	800667e <atoi>
 80009be:	4603      	mov	r3, r0
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	701a      	strb	r2, [r3, #0]
}
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	08008328 	.word	0x08008328

080009d4 <dateTimeToSeconds>:

uint32_t dateTimeToSeconds(const DateTime_t *dt)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	// Improve this calculation

	uint32_t res =
		(dt->second) +
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	4619      	mov	r1, r3
		(dt->minute * 60) +
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	785b      	ldrb	r3, [r3, #1]
 80009e6:	461a      	mov	r2, r3
 80009e8:	4613      	mov	r3, r2
 80009ea:	011b      	lsls	r3, r3, #4
 80009ec:	1a9b      	subs	r3, r3, r2
 80009ee:	009b      	lsls	r3, r3, #2
		(dt->second) +
 80009f0:	18ca      	adds	r2, r1, r3
		(dt->hour * 60 * 60) +
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	789b      	ldrb	r3, [r3, #2]
 80009f6:	4619      	mov	r1, r3
 80009f8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80009fc:	fb01 f303 	mul.w	r3, r1, r3
		(dt->minute * 60) +
 8000a00:	441a      	add	r2, r3
		(dt->date * 60 * 60 * 24) +
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	791b      	ldrb	r3, [r3, #4]
 8000a06:	4619      	mov	r1, r3
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <dateTimeToSeconds+0x68>)
 8000a0a:	fb01 f303 	mul.w	r3, r1, r3
		(dt->hour * 60 * 60) +
 8000a0e:	441a      	add	r2, r3
		(dt->month * 60 * 60 * 24 * 30) +
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	795b      	ldrb	r3, [r3, #5]
 8000a14:	4619      	mov	r1, r3
 8000a16:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <dateTimeToSeconds+0x6c>)
 8000a18:	fb01 f303 	mul.w	r3, r1, r3
		(dt->date * 60 * 60 * 24) +
 8000a1c:	441a      	add	r2, r3
		(dt->year * 60 * 60 * 24 * 30 * 12);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	799b      	ldrb	r3, [r3, #6]
 8000a22:	4619      	mov	r1, r3
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <dateTimeToSeconds+0x70>)
 8000a26:	fb01 f303 	mul.w	r3, r1, r3
		(dt->month * 60 * 60 * 24 * 30) +
 8000a2a:	4413      	add	r3, r2
	uint32_t res =
 8000a2c:	60fb      	str	r3, [r7, #12]

	return res;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	00015180 	.word	0x00015180
 8000a40:	00278d00 	.word	0x00278d00
 8000a44:	01da9c00 	.word	0x01da9c00

08000a48 <dateTimeDiff>:

int dateTimeDiff(DateTime_t *t1, DateTime_t *t2)
{
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
	return (dateTimeToSeconds(t2) - dateTimeToSeconds(t1));
 8000a52:	6838      	ldr	r0, [r7, #0]
 8000a54:	f7ff ffbe 	bl	80009d4 <dateTimeToSeconds>
 8000a58:	4604      	mov	r4, r0
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff ffba 	bl	80009d4 <dateTimeToSeconds>
 8000a60:	4603      	mov	r3, r0
 8000a62:	1ae3      	subs	r3, r4, r3
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd90      	pop	{r4, r7, pc}

08000a6c <dateTimePrint>:

void dateTimePrint(DateTime_t *dt)
{
 8000a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a6e:	b087      	sub	sp, #28
 8000a70:	af04      	add	r7, sp, #16
 8000a72:	6078      	str	r0, [r7, #4]
	printf("%02u/%02u/%02u, %s %02u:%02u:%02u\r\n",
	   dt->year, dt->month, dt->date, days[dt->day - 1],
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	799b      	ldrb	r3, [r3, #6]
	printf("%02u/%02u/%02u, %s %02u:%02u:%02u\r\n",
 8000a78:	461c      	mov	r4, r3
	   dt->year, dt->month, dt->date, days[dt->day - 1],
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	795b      	ldrb	r3, [r3, #5]
	printf("%02u/%02u/%02u, %s %02u:%02u:%02u\r\n",
 8000a7e:	461d      	mov	r5, r3
	   dt->year, dt->month, dt->date, days[dt->day - 1],
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	791b      	ldrb	r3, [r3, #4]
	printf("%02u/%02u/%02u, %s %02u:%02u:%02u\r\n",
 8000a84:	461e      	mov	r6, r3
	   dt->year, dt->month, dt->date, days[dt->day - 1],
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	78db      	ldrb	r3, [r3, #3]
 8000a8a:	3b01      	subs	r3, #1
	printf("%02u/%02u/%02u, %s %02u:%02u:%02u\r\n",
 8000a8c:	4a0c      	ldr	r2, [pc, #48]	; (8000ac0 <dateTimePrint+0x54>)
 8000a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	   dt->hour, dt->minute, dt->second);
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	7892      	ldrb	r2, [r2, #2]
	printf("%02u/%02u/%02u, %s %02u:%02u:%02u\r\n",
 8000a96:	4611      	mov	r1, r2
	   dt->hour, dt->minute, dt->second);
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	7852      	ldrb	r2, [r2, #1]
	printf("%02u/%02u/%02u, %s %02u:%02u:%02u\r\n",
 8000a9c:	4610      	mov	r0, r2
	   dt->hour, dt->minute, dt->second);
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	7812      	ldrb	r2, [r2, #0]
	printf("%02u/%02u/%02u, %s %02u:%02u:%02u\r\n",
 8000aa2:	9203      	str	r2, [sp, #12]
 8000aa4:	9002      	str	r0, [sp, #8]
 8000aa6:	9101      	str	r1, [sp, #4]
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	4633      	mov	r3, r6
 8000aac:	462a      	mov	r2, r5
 8000aae:	4621      	mov	r1, r4
 8000ab0:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <dateTimePrint+0x58>)
 8000ab2:	f005 fe1b 	bl	80066ec <iprintf>
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	0800832c 	.word	0x0800832c

08000ac8 <ledInit>:
#include "Led.h"

#define MAX_BRIGHTNESS 100

void ledInit(LED* led, GPIO_TypeDef* port, uint16_t pin)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	80fb      	strh	r3, [r7, #6]
	led->port = port;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	68ba      	ldr	r2, [r7, #8]
 8000ada:	601a      	str	r2, [r3, #0]
	led->pin = pin;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	88fa      	ldrh	r2, [r7, #6]
 8000ae0:	809a      	strh	r2, [r3, #4]
	ledOff(led);
 8000ae2:	68f8      	ldr	r0, [r7, #12]
 8000ae4:	f000 f81b 	bl	8000b1e <ledOff>
}
 8000ae8:	bf00      	nop
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <ledOn>:

void ledOn(LED* led)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	if (led->state != LED_ON) {
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	799b      	ldrb	r3, [r3, #6]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d00a      	beq.n	8000b16 <ledOn+0x26>
		HAL_GPIO_WritePin(led->port, led->pin, SET);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6818      	ldr	r0, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	889b      	ldrh	r3, [r3, #4]
 8000b08:	2201      	movs	r2, #1
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f001 fcac 	bl	8002468 <HAL_GPIO_WritePin>
		led->state = LED_ON;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2201      	movs	r2, #1
 8000b14:	719a      	strb	r2, [r3, #6]
	}
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <ledOff>:

void ledOff(LED* led)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
	if (led->state != LED_OFF) {
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	799b      	ldrb	r3, [r3, #6]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d00a      	beq.n	8000b44 <ledOff+0x26>
		HAL_GPIO_WritePin(led->port, led->pin, RESET);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6818      	ldr	r0, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	889b      	ldrh	r3, [r3, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f001 fc95 	bl	8002468 <HAL_GPIO_WritePin>
		led->state = LED_OFF;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2200      	movs	r2, #0
 8000b42:	719a      	strb	r2, [r3, #6]
	}
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <mainloop>:
LED L1;
LED L2;
BUZZER buzzer;

void mainloop()
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	// RTC
	rtcInit(&hi2c1, -1);
 8000b50:	f04f 31ff 	mov.w	r1, #4294967295
 8000b54:	4814      	ldr	r0, [pc, #80]	; (8000ba8 <mainloop+0x5c>)
 8000b56:	f000 f8a1 	bl	8000c9c <rtcInit>

	// Security
	securityInit();
 8000b5a:	f000 f961 	bl	8000e20 <securityInit>

	// Leds
	ledInit(&L1, LED_L1_GPIO_Port, LED_L1_Pin);
 8000b5e:	2220      	movs	r2, #32
 8000b60:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000b64:	4811      	ldr	r0, [pc, #68]	; (8000bac <mainloop+0x60>)
 8000b66:	f7ff ffaf 	bl	8000ac8 <ledInit>
	ledInit(&L2, LED_L2_GPIO_Port, LED_L2_Pin);
 8000b6a:	2240      	movs	r2, #64	; 0x40
 8000b6c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000b70:	480f      	ldr	r0, [pc, #60]	; (8000bb0 <mainloop+0x64>)
 8000b72:	f7ff ffa9 	bl	8000ac8 <ledInit>

	// Buzzer
	buzzerInit(&buzzer, &htim3, TIM_CHANNEL_1);
 8000b76:	2200      	movs	r2, #0
 8000b78:	490e      	ldr	r1, [pc, #56]	; (8000bb4 <mainloop+0x68>)
 8000b7a:	480f      	ldr	r0, [pc, #60]	; (8000bb8 <mainloop+0x6c>)
 8000b7c:	f7ff fd12 	bl	80005a4 <buzzerInit>
	HAL_TIM_Base_Start(buzzer.timer);
 8000b80:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <mainloop+0x6c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f003 fdfb 	bl	8004780 <HAL_TIM_Base_Start>

	// 1 MS timer
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b8a:	2036      	movs	r0, #54	; 0x36
 8000b8c:	f001 faa7 	bl	80020de <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim6);
 8000b90:	480a      	ldr	r0, [pc, #40]	; (8000bbc <mainloop+0x70>)
 8000b92:	f003 fe5d 	bl	8004850 <HAL_TIM_Base_Start_IT>

	// 1 Second timer
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b96:	2037      	movs	r0, #55	; 0x37
 8000b98:	f001 faa1 	bl	80020de <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim7);
 8000b9c:	4808      	ldr	r0, [pc, #32]	; (8000bc0 <mainloop+0x74>)
 8000b9e:	f003 fe57 	bl	8004850 <HAL_TIM_Base_Start_IT>

	while(1)
	{
		commTask();
 8000ba2:	f000 fa8b 	bl	80010bc <commTask>
 8000ba6:	e7fc      	b.n	8000ba2 <mainloop+0x56>
 8000ba8:	20000170 	.word	0x20000170
 8000bac:	200000ac 	.word	0x200000ac
 8000bb0:	200000b4 	.word	0x200000b4
 8000bb4:	200001c4 	.word	0x200001c4
 8000bb8:	200000bc 	.word	0x200000bc
 8000bbc:	20000210 	.word	0x20000210
 8000bc0:	2000025c 	.word	0x2000025c

08000bc4 <securityTask>:
	}
}

void securityTask()
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
	static LOCK_STATE lockState = SECURITY_STATE_UNDEFINED;

	securityOnTimerInterrupt();
 8000bca:	f000 fa45 	bl	8001058 <securityOnTimerInterrupt>
	LOCK_STATE newState = securityGetState();
 8000bce:	f000 fa69 	bl	80010a4 <securityGetState>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
	if (lockState != newState)
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <securityTask+0x64>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	79fa      	ldrb	r2, [r7, #7]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d01e      	beq.n	8000c1e <securityTask+0x5a>
	{
		lockState = newState;
 8000be0:	4a11      	ldr	r2, [pc, #68]	; (8000c28 <securityTask+0x64>)
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	7013      	strb	r3, [r2, #0]
		switch (lockState)
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <securityTask+0x64>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d002      	beq.n	8000bf4 <securityTask+0x30>
 8000bee:	2b03      	cmp	r3, #3
 8000bf0:	d007      	beq.n	8000c02 <securityTask+0x3e>
 8000bf2:	e00d      	b.n	8000c10 <securityTask+0x4c>
		{
		case SECURITY_STATE_OPENED:
			ledOff(&L2);
 8000bf4:	480d      	ldr	r0, [pc, #52]	; (8000c2c <securityTask+0x68>)
 8000bf6:	f7ff ff92 	bl	8000b1e <ledOff>
			ledOn(&L1);
 8000bfa:	480d      	ldr	r0, [pc, #52]	; (8000c30 <securityTask+0x6c>)
 8000bfc:	f7ff ff78 	bl	8000af0 <ledOn>
			break;
 8000c00:	e00e      	b.n	8000c20 <securityTask+0x5c>
		case SECURITY_STATE_COOLDOWN:
			ledOff(&L1);
 8000c02:	480b      	ldr	r0, [pc, #44]	; (8000c30 <securityTask+0x6c>)
 8000c04:	f7ff ff8b 	bl	8000b1e <ledOff>
			ledOn(&L2);
 8000c08:	4808      	ldr	r0, [pc, #32]	; (8000c2c <securityTask+0x68>)
 8000c0a:	f7ff ff71 	bl	8000af0 <ledOn>
			break;
 8000c0e:	e007      	b.n	8000c20 <securityTask+0x5c>
		default:
			ledOff(&L1);
 8000c10:	4807      	ldr	r0, [pc, #28]	; (8000c30 <securityTask+0x6c>)
 8000c12:	f7ff ff84 	bl	8000b1e <ledOff>
			ledOff(&L2);
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <securityTask+0x68>)
 8000c18:	f7ff ff81 	bl	8000b1e <ledOff>
			break;
 8000c1c:	e000      	b.n	8000c20 <securityTask+0x5c>
		}
	}
 8000c1e:	bf00      	nop
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200000d0 	.word	0x200000d0
 8000c2c:	200000b4 	.word	0x200000b4
 8000c30:	200000ac 	.word	0x200000ac

08000c34 <_write>:

int _write(int fd, char* ptr, int len) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	f04f 33ff 	mov.w	r3, #4294967295
 8000c48:	68b9      	ldr	r1, [r7, #8]
 8000c4a:	4804      	ldr	r0, [pc, #16]	; (8000c5c <_write+0x28>)
 8000c4c:	f004 ff4a 	bl	8005ae4 <HAL_UART_Transmit>
    return len;
 8000c50:	687b      	ldr	r3, [r7, #4]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200002a8 	.word	0x200002a8

08000c60 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a08      	ldr	r2, [pc, #32]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d103      	bne.n	8000c7a <HAL_TIM_PeriodElapsedCallback+0x1a>
		buzzerOnTimerInterrupt(&buzzer);
 8000c72:	4808      	ldr	r0, [pc, #32]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000c74:	f7ff fcc8 	bl	8000608 <buzzerOnTimerInterrupt>
	}
	else if (htim->Instance == TIM7) {
		securityTask();
	}
}
 8000c78:	e006      	b.n	8000c88 <HAL_TIM_PeriodElapsedCallback+0x28>
	else if (htim->Instance == TIM7) {
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a06      	ldr	r2, [pc, #24]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d101      	bne.n	8000c88 <HAL_TIM_PeriodElapsedCallback+0x28>
		securityTask();
 8000c84:	f7ff ff9e 	bl	8000bc4 <securityTask>
}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40001000 	.word	0x40001000
 8000c94:	200000bc 	.word	0x200000bc
 8000c98:	40001400 	.word	0x40001400

08000c9c <rtcInit>:
#include "RTC.h"

RTC_t rtc;

void rtcInit(I2C_HandleTypeDef *i2c, uint32_t timeout)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
	rtc.i2cHandle = i2c;
 8000ca6:	4a06      	ldr	r2, [pc, #24]	; (8000cc0 <rtcInit+0x24>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6013      	str	r3, [r2, #0]
	rtc.timeout = timeout;
 8000cac:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <rtcInit+0x24>)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	6053      	str	r3, [r2, #4]
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	200000d4 	.word	0x200000d4

08000cc4 <rtcGetTime>:

void rtcGetTime(DateTime_t *dt)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b088      	sub	sp, #32
 8000cc8:	af04      	add	r7, sp, #16
 8000cca:	6078      	str	r0, [r7, #4]
	uint8_t timeRawData[7] = { 0 };
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	460a      	mov	r2, r1
 8000cd8:	801a      	strh	r2, [r3, #0]
 8000cda:	460a      	mov	r2, r1
 8000cdc:	709a      	strb	r2, [r3, #2]
	HAL_I2C_Mem_Read(rtc.i2cHandle, RTC_ADDRESS, RTC_MEM_ADDRESS, 1, timeRawData, sizeof(timeRawData), rtc.timeout);
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <rtcGetTime+0x4c>)
 8000ce0:	6818      	ldr	r0, [r3, #0]
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <rtcGetTime+0x4c>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	9302      	str	r3, [sp, #8]
 8000ce8:	2307      	movs	r3, #7
 8000cea:	9301      	str	r3, [sp, #4]
 8000cec:	f107 0308 	add.w	r3, r7, #8
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	21d0      	movs	r1, #208	; 0xd0
 8000cf8:	f001 fd72 	bl	80027e0 <HAL_I2C_Mem_Read>
	dateTimeFromRawData(timeRawData, dt);
 8000cfc:	f107 0308 	add.w	r3, r7, #8
 8000d00:	6879      	ldr	r1, [r7, #4]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fca5 	bl	8000652 <dateTimeFromRawData>
}
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200000d4 	.word	0x200000d4

08000d14 <rtcSetTimeString>:
	dateTimeToRawData(timeRawData, dt);
	HAL_I2C_Mem_Write(rtc.i2cHandle, RTC_ADDRESS, RTC_MEM_ADDRESS, 1, timeRawData, sizeof(timeRawData), rtc.timeout);
}

void rtcSetTimeString(char *timeString)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	; 0x28
 8000d18:	af04      	add	r7, sp, #16
 8000d1a:	6078      	str	r0, [r7, #4]
	uint8_t timeRawData[7] = { 0 };
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2100      	movs	r1, #0
 8000d26:	460a      	mov	r2, r1
 8000d28:	801a      	strh	r2, [r3, #0]
 8000d2a:	460a      	mov	r2, r1
 8000d2c:	709a      	strb	r2, [r3, #2]
	DateTime_t dt;
	dateTimeFromString(timeString, &dt);
 8000d2e:	f107 0308 	add.w	r3, r7, #8
 8000d32:	4619      	mov	r1, r3
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff fde9 	bl	800090c <dateTimeFromString>
	dateTimeToRawData(timeRawData, &dt);
 8000d3a:	f107 0208 	add.w	r2, r7, #8
 8000d3e:	f107 0310 	add.w	r3, r7, #16
 8000d42:	4611      	mov	r1, r2
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fd27 	bl	8000798 <dateTimeToRawData>
	HAL_I2C_Mem_Write(rtc.i2cHandle, RTC_ADDRESS, RTC_MEM_ADDRESS, 1, timeRawData, sizeof(timeRawData), rtc.timeout);
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <rtcSetTimeString+0x5c>)
 8000d4c:	6818      	ldr	r0, [r3, #0]
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <rtcSetTimeString+0x5c>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	9302      	str	r3, [sp, #8]
 8000d54:	2307      	movs	r3, #7
 8000d56:	9301      	str	r3, [sp, #4]
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	2301      	movs	r3, #1
 8000d60:	2200      	movs	r2, #0
 8000d62:	21d0      	movs	r1, #208	; 0xd0
 8000d64:	f001 fc28 	bl	80025b8 <HAL_I2C_Mem_Write>
}
 8000d68:	bf00      	nop
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	200000d4 	.word	0x200000d4

08000d74 <rtcElapsedTime>:

int rtcElapsedTime(DateTime_t *dt)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	DateTime_t now;
	rtcGetTime(&now);
 8000d7c:	f107 0308 	add.w	r3, r7, #8
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff9f 	bl	8000cc4 <rtcGetTime>
	return dateTimeDiff(dt, &now);
 8000d86:	f107 0308 	add.w	r3, r7, #8
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff fe5b 	bl	8000a48 <dateTimeDiff>
 8000d92:	4603      	mov	r3, r0
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <rtcSavePersistent>:

void rtcSavePersistent(uint8_t* data, uint8_t numBytes, uint8_t address)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af04      	add	r7, sp, #16
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	460b      	mov	r3, r1
 8000da6:	70fb      	strb	r3, [r7, #3]
 8000da8:	4613      	mov	r3, r2
 8000daa:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(rtc.i2cHandle, RTC_ADDRESS, address, 1, data, numBytes, rtc.timeout);
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <rtcSavePersistent+0x3c>)
 8000dae:	6818      	ldr	r0, [r3, #0]
 8000db0:	78bb      	ldrb	r3, [r7, #2]
 8000db2:	b299      	uxth	r1, r3
 8000db4:	78fb      	ldrb	r3, [r7, #3]
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <rtcSavePersistent+0x3c>)
 8000dba:	6852      	ldr	r2, [r2, #4]
 8000dbc:	9202      	str	r2, [sp, #8]
 8000dbe:	9301      	str	r3, [sp, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	460a      	mov	r2, r1
 8000dc8:	21d0      	movs	r1, #208	; 0xd0
 8000dca:	f001 fbf5 	bl	80025b8 <HAL_I2C_Mem_Write>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200000d4 	.word	0x200000d4

08000ddc <rtcLoadPersistent>:

void rtcLoadPersistent(uint8_t* data, uint8_t numBytes, uint8_t address)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af04      	add	r7, sp, #16
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	70fb      	strb	r3, [r7, #3]
 8000de8:	4613      	mov	r3, r2
 8000dea:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Read(rtc.i2cHandle, RTC_ADDRESS, address, 1, data, numBytes, rtc.timeout);
 8000dec:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <rtcLoadPersistent+0x3c>)
 8000dee:	6818      	ldr	r0, [r3, #0]
 8000df0:	78bb      	ldrb	r3, [r7, #2]
 8000df2:	b299      	uxth	r1, r3
 8000df4:	78fb      	ldrb	r3, [r7, #3]
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	4a07      	ldr	r2, [pc, #28]	; (8000e18 <rtcLoadPersistent+0x3c>)
 8000dfa:	6852      	ldr	r2, [r2, #4]
 8000dfc:	9202      	str	r2, [sp, #8]
 8000dfe:	9301      	str	r3, [sp, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2301      	movs	r3, #1
 8000e06:	460a      	mov	r2, r1
 8000e08:	21d0      	movs	r1, #208	; 0xd0
 8000e0a:	f001 fce9 	bl	80027e0 <HAL_I2C_Mem_Read>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200000d4 	.word	0x200000d4
 8000e1c:	00000000 	.word	0x00000000

08000e20 <securityInit>:
} security;

static uint8_t sessionTries = 0;

void securityInit()
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
	rtcLoadPersistent((uint8_t *)&security, sizeof(security), STATUS_ADDRESS);
 8000e26:	2220      	movs	r2, #32
 8000e28:	2120      	movs	r1, #32
 8000e2a:	4825      	ldr	r0, [pc, #148]	; (8000ec0 <securityInit+0xa0>)
 8000e2c:	f7ff ffd6 	bl	8000ddc <rtcLoadPersistent>

	int saveRequired = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	607b      	str	r3, [r7, #4]

	// First use of system - keep unlocked until first set code
	if (security.initVal != INIT_VAL)
 8000e34:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <securityInit+0xa0>)
 8000e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3a:	4922      	ldr	r1, [pc, #136]	; (8000ec4 <securityInit+0xa4>)
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	bf08      	it	eq
 8000e40:	428a      	cmpeq	r2, r1
 8000e42:	d012      	beq.n	8000e6a <securityInit+0x4a>
	{
		memset(&security, 0, sizeof(security));
 8000e44:	2220      	movs	r2, #32
 8000e46:	2100      	movs	r1, #0
 8000e48:	481d      	ldr	r0, [pc, #116]	; (8000ec0 <securityInit+0xa0>)
 8000e4a:	f005 fc47 	bl	80066dc <memset>
		security.initVal = INIT_VAL;
 8000e4e:	491c      	ldr	r1, [pc, #112]	; (8000ec0 <securityInit+0xa0>)
 8000e50:	a319      	add	r3, pc, #100	; (adr r3, 8000eb8 <securityInit+0x98>)
 8000e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e56:	e9c1 2300 	strd	r2, r3, [r1]
		security.state = SECURITY_STATE_OPENED;
 8000e5a:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <securityInit+0xa0>)
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	761a      	strb	r2, [r3, #24]
		security.lockType = SECURITY_LOCK_UNDEFINED;
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <securityInit+0xa0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	75da      	strb	r2, [r3, #23]
		saveRequired = 1;
 8000e66:	2301      	movs	r3, #1
 8000e68:	607b      	str	r3, [r7, #4]
	}

	// Rebooting during soft lock removes CD time
	if (security.state == SECURITY_STATE_COOLDOWN && security.lockType == SECURITY_LOCK_SOFT)
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <securityInit+0xa0>)
 8000e6c:	7e1b      	ldrb	r3, [r3, #24]
 8000e6e:	2b03      	cmp	r3, #3
 8000e70:	d108      	bne.n	8000e84 <securityInit+0x64>
 8000e72:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <securityInit+0xa0>)
 8000e74:	7ddb      	ldrb	r3, [r3, #23]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d104      	bne.n	8000e84 <securityInit+0x64>
	{
		security.state = SECURITY_STATE_LOCKED;
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <securityInit+0xa0>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	761a      	strb	r2, [r3, #24]
		saveRequired = 1;
 8000e80:	2301      	movs	r3, #1
 8000e82:	607b      	str	r3, [r7, #4]
	}

	// Reset login tries if enough time had passed
	if (rtcElapsedTime(&security.lastTryTimestamp) >= HARD_LOCK_TIME)
 8000e84:	4810      	ldr	r0, [pc, #64]	; (8000ec8 <securityInit+0xa8>)
 8000e86:	f7ff ff75 	bl	8000d74 <rtcElapsedTime>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000e90:	db04      	blt.n	8000e9c <securityInit+0x7c>
	{
		security.tries = 0;
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <securityInit+0xa0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	721a      	strb	r2, [r3, #8]
		saveRequired = 1;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	607b      	str	r3, [r7, #4]
	}

	// Saving status to memory if needed
	if (saveRequired)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d004      	beq.n	8000eac <securityInit+0x8c>
	{
		rtcSavePersistent((uint8_t *)&security, sizeof(security), STATUS_ADDRESS);
 8000ea2:	2220      	movs	r2, #32
 8000ea4:	2120      	movs	r1, #32
 8000ea6:	4806      	ldr	r0, [pc, #24]	; (8000ec0 <securityInit+0xa0>)
 8000ea8:	f7ff ff78 	bl	8000d9c <rtcSavePersistent>
	}
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	f3af 8000 	nop.w
 8000eb8:	23456789 	.word	0x23456789
 8000ebc:	00000001 	.word	0x00000001
 8000ec0:	200000e0 	.word	0x200000e0
 8000ec4:	23456789 	.word	0x23456789
 8000ec8:	200000e9 	.word	0x200000e9

08000ecc <securitySetCode>:

int securitySetCode(char *inputCode, size_t length)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
	if (security.state != SECURITY_STATE_OPENED)
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <securitySetCode+0x4c>)
 8000ed8:	7e1b      	ldrb	r3, [r3, #24]
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d001      	beq.n	8000ee2 <securitySetCode+0x16>
	{
		return SECURITY_ERROR_AUTHORIZATION;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	e015      	b.n	8000f0e <securitySetCode+0x42>
	}

	if (length > CODE_MAX_LENGTH)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	2b10      	cmp	r3, #16
 8000ee6:	d901      	bls.n	8000eec <securitySetCode+0x20>
	{
		return SECURITY_ERROR_BAD_FORMAT;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e010      	b.n	8000f0e <securitySetCode+0x42>
	}

	// Save new code
	rtcSavePersistent((uint8_t *)inputCode, length, CODE_ADDRESS);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2210      	movs	r2, #16
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ff51 	bl	8000d9c <rtcSavePersistent>

	// Change saved state to locked - necessary for first use
	LOCK_STATE lockedState = SECURITY_STATE_LOCKED;
 8000efa:	2301      	movs	r3, #1
 8000efc:	73fb      	strb	r3, [r7, #15]
	rtcSavePersistent((uint8_t *)&lockedState, sizeof(lockedState),
 8000efe:	f107 030f 	add.w	r3, r7, #15
 8000f02:	2238      	movs	r2, #56	; 0x38
 8000f04:	2101      	movs	r1, #1
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff ff48 	bl	8000d9c <rtcSavePersistent>
		STATUS_ADDRESS + offsetof(typeof(security), state));

	return SECURITY_ERROR_NONE;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200000e0 	.word	0x200000e0

08000f1c <securityEnterCode>:

int securityEnterCode(char *inputCode, size_t length)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
	if (security.state == SECURITY_STATE_COOLDOWN)
 8000f26:	4b32      	ldr	r3, [pc, #200]	; (8000ff0 <securityEnterCode+0xd4>)
 8000f28:	7e1b      	ldrb	r3, [r3, #24]
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	d101      	bne.n	8000f32 <securityEnterCode+0x16>
	{
		return SECURITY_ERROR_COOLDOWN;
 8000f2e:	2305      	movs	r3, #5
 8000f30:	e059      	b.n	8000fe6 <securityEnterCode+0xca>
	}

	if (security.state == SECURITY_STATE_OPENED)
 8000f32:	4b2f      	ldr	r3, [pc, #188]	; (8000ff0 <securityEnterCode+0xd4>)
 8000f34:	7e1b      	ldrb	r3, [r3, #24]
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d101      	bne.n	8000f3e <securityEnterCode+0x22>
	{
		return SECURITY_ERROR_INVALID_REQUEST;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	e053      	b.n	8000fe6 <securityEnterCode+0xca>
	}

	char realCode[CODE_MAX_LENGTH] = { 0 };
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	f107 030c 	add.w	r3, r7, #12
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
	rtcLoadPersistent((uint8_t *)realCode, CODE_MAX_LENGTH, CODE_ADDRESS);
 8000f4e:	f107 0308 	add.w	r3, r7, #8
 8000f52:	2210      	movs	r2, #16
 8000f54:	2110      	movs	r1, #16
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff ff40 	bl	8000ddc <rtcLoadPersistent>

	if (strcmp(inputCode, realCode))
 8000f5c:	f107 0308 	add.w	r3, r7, #8
 8000f60:	4619      	mov	r1, r3
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff f934 	bl	80001d0 <strcmp>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d02c      	beq.n	8000fc8 <securityEnterCode+0xac>
	{
		rtcGetTime(&security.lastTryTimestamp);
 8000f6e:	4821      	ldr	r0, [pc, #132]	; (8000ff4 <securityEnterCode+0xd8>)
 8000f70:	f7ff fea8 	bl	8000cc4 <rtcGetTime>
		security.tries++;
 8000f74:	4b1e      	ldr	r3, [pc, #120]	; (8000ff0 <securityEnterCode+0xd4>)
 8000f76:	7a1b      	ldrb	r3, [r3, #8]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <securityEnterCode+0xd4>)
 8000f7e:	721a      	strb	r2, [r3, #8]
		sessionTries++;
 8000f80:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <securityEnterCode+0xdc>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	3301      	adds	r3, #1
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <securityEnterCode+0xdc>)
 8000f8a:	701a      	strb	r2, [r3, #0]

		if ((security.tries == HARD_LOCK_MAX_TRIES) || (sessionTries == SOFT_LOCK_MAX_TRIES))
 8000f8c:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <securityEnterCode+0xd4>)
 8000f8e:	7a1b      	ldrb	r3, [r3, #8]
 8000f90:	2b09      	cmp	r3, #9
 8000f92:	d003      	beq.n	8000f9c <securityEnterCode+0x80>
 8000f94:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <securityEnterCode+0xdc>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b03      	cmp	r3, #3
 8000f9a:	d10e      	bne.n	8000fba <securityEnterCode+0x9e>
		{
			rtcGetTime(&security.lockTimestamp);
 8000f9c:	4817      	ldr	r0, [pc, #92]	; (8000ffc <securityEnterCode+0xe0>)
 8000f9e:	f7ff fe91 	bl	8000cc4 <rtcGetTime>
			security.state = SECURITY_STATE_COOLDOWN;
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <securityEnterCode+0xd4>)
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	761a      	strb	r2, [r3, #24]
			security.lockType = ((security.tries == HARD_LOCK_MAX_TRIES) ?
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <securityEnterCode+0xd4>)
 8000faa:	7a1b      	ldrb	r3, [r3, #8]
				SECURITY_LOCK_HARD : SECURITY_LOCK_SOFT);
 8000fac:	2b09      	cmp	r3, #9
 8000fae:	d101      	bne.n	8000fb4 <securityEnterCode+0x98>
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	e000      	b.n	8000fb6 <securityEnterCode+0x9a>
 8000fb4:	2201      	movs	r2, #1
			security.lockType = ((security.tries == HARD_LOCK_MAX_TRIES) ?
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <securityEnterCode+0xd4>)
 8000fb8:	75da      	strb	r2, [r3, #23]
		}

		rtcSavePersistent((uint8_t *)&security, sizeof(security), STATUS_ADDRESS);
 8000fba:	2220      	movs	r2, #32
 8000fbc:	2120      	movs	r1, #32
 8000fbe:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <securityEnterCode+0xd4>)
 8000fc0:	f7ff feec 	bl	8000d9c <rtcSavePersistent>

		return SECURITY_ERROR_WRONG_CODE;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e00e      	b.n	8000fe6 <securityEnterCode+0xca>
	}

	security.tries = 0;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <securityEnterCode+0xd4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	721a      	strb	r2, [r3, #8]
	sessionTries = 0;
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <securityEnterCode+0xdc>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
	rtcSavePersistent((uint8_t *)&security, sizeof(security), STATUS_ADDRESS);
 8000fd4:	2220      	movs	r2, #32
 8000fd6:	2120      	movs	r1, #32
 8000fd8:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <securityEnterCode+0xd4>)
 8000fda:	f7ff fedf 	bl	8000d9c <rtcSavePersistent>
	security.state = SECURITY_STATE_OPENED;
 8000fde:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <securityEnterCode+0xd4>)
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	761a      	strb	r2, [r3, #24]

	return SECURITY_ERROR_NONE;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200000e0 	.word	0x200000e0
 8000ff4:	200000e9 	.word	0x200000e9
 8000ff8:	20000100 	.word	0x20000100
 8000ffc:	200000f0 	.word	0x200000f0

08001000 <securityLockSystem>:

int securityLockSystem()
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	if (security.state == SECURITY_STATE_OPENED)
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <securityLockSystem+0x28>)
 8001006:	7e1b      	ldrb	r3, [r3, #24]
 8001008:	2b02      	cmp	r3, #2
 800100a:	d109      	bne.n	8001020 <securityLockSystem+0x20>
	{
		security.state = SECURITY_STATE_LOCKED;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <securityLockSystem+0x28>)
 800100e:	2201      	movs	r2, #1
 8001010:	761a      	strb	r2, [r3, #24]
		rtcSavePersistent((uint8_t *)&security, sizeof(security), STATUS_ADDRESS);
 8001012:	2220      	movs	r2, #32
 8001014:	2120      	movs	r1, #32
 8001016:	4804      	ldr	r0, [pc, #16]	; (8001028 <securityLockSystem+0x28>)
 8001018:	f7ff fec0 	bl	8000d9c <rtcSavePersistent>
		return SECURITY_ERROR_NONE;
 800101c:	2300      	movs	r3, #0
 800101e:	e000      	b.n	8001022 <securityLockSystem+0x22>
	}

	return SECURITY_ERROR_AUTHORIZATION;
 8001020:	2302      	movs	r3, #2
}
 8001022:	4618      	mov	r0, r3
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200000e0 	.word	0x200000e0

0800102c <securityRemainingLockTime>:

int securityRemainingLockTime()
{
 800102c:	b598      	push	{r3, r4, r7, lr}
 800102e:	af00      	add	r7, sp, #0
	return (security.lockType == SECURITY_LOCK_HARD ? HARD_LOCK_TIME : SOFT_LOCK_TIME) -
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <securityRemainingLockTime+0x24>)
 8001032:	7ddb      	ldrb	r3, [r3, #23]
 8001034:	2b02      	cmp	r3, #2
 8001036:	d102      	bne.n	800103e <securityRemainingLockTime+0x12>
 8001038:	f44f 7496 	mov.w	r4, #300	; 0x12c
 800103c:	e000      	b.n	8001040 <securityRemainingLockTime+0x14>
 800103e:	241e      	movs	r4, #30
			rtcElapsedTime(&security.lockTimestamp);
 8001040:	4804      	ldr	r0, [pc, #16]	; (8001054 <securityRemainingLockTime+0x28>)
 8001042:	f7ff fe97 	bl	8000d74 <rtcElapsedTime>
 8001046:	4603      	mov	r3, r0
	return (security.lockType == SECURITY_LOCK_HARD ? HARD_LOCK_TIME : SOFT_LOCK_TIME) -
 8001048:	1ae3      	subs	r3, r4, r3
}
 800104a:	4618      	mov	r0, r3
 800104c:	bd98      	pop	{r3, r4, r7, pc}
 800104e:	bf00      	nop
 8001050:	200000e0 	.word	0x200000e0
 8001054:	200000f0 	.word	0x200000f0

08001058 <securityOnTimerInterrupt>:

void securityOnTimerInterrupt()
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	if (security.state == SECURITY_STATE_COOLDOWN)
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <securityOnTimerInterrupt+0x44>)
 800105e:	7e1b      	ldrb	r3, [r3, #24]
 8001060:	2b03      	cmp	r3, #3
 8001062:	d119      	bne.n	8001098 <securityOnTimerInterrupt+0x40>
	{
		if(securityRemainingLockTime() <= 0)
 8001064:	f7ff ffe2 	bl	800102c <securityRemainingLockTime>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	dc14      	bgt.n	8001098 <securityOnTimerInterrupt+0x40>
		{
			if (security.lockType == SECURITY_LOCK_HARD)
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <securityOnTimerInterrupt+0x44>)
 8001070:	7ddb      	ldrb	r3, [r3, #23]
 8001072:	2b02      	cmp	r3, #2
 8001074:	d102      	bne.n	800107c <securityOnTimerInterrupt+0x24>
			{
				security.tries = 0;
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <securityOnTimerInterrupt+0x44>)
 8001078:	2200      	movs	r2, #0
 800107a:	721a      	strb	r2, [r3, #8]
			}

			sessionTries = 0;
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <securityOnTimerInterrupt+0x48>)
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]

			security.state = SECURITY_STATE_LOCKED;
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <securityOnTimerInterrupt+0x44>)
 8001084:	2201      	movs	r2, #1
 8001086:	761a      	strb	r2, [r3, #24]
			security.lockType = SECURITY_LOCK_UNDEFINED;
 8001088:	4b04      	ldr	r3, [pc, #16]	; (800109c <securityOnTimerInterrupt+0x44>)
 800108a:	2200      	movs	r2, #0
 800108c:	75da      	strb	r2, [r3, #23]
			rtcSavePersistent((uint8_t *)&security, sizeof(security), STATUS_ADDRESS);
 800108e:	2220      	movs	r2, #32
 8001090:	2120      	movs	r1, #32
 8001092:	4802      	ldr	r0, [pc, #8]	; (800109c <securityOnTimerInterrupt+0x44>)
 8001094:	f7ff fe82 	bl	8000d9c <rtcSavePersistent>
		}
	}
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	200000e0 	.word	0x200000e0
 80010a0:	20000100 	.word	0x20000100

080010a4 <securityGetState>:

LOCK_STATE securityGetState()
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
	return security.state;
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <securityGetState+0x14>)
 80010aa:	7e1b      	ldrb	r3, [r3, #24]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	200000e0 	.word	0x200000e0

080010bc <commTask>:
static int cmdprint = 0;

static void handleCommand();

void commTask()
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 80010c2:	1db9      	adds	r1, r7, #6
 80010c4:	230a      	movs	r3, #10
 80010c6:	2201      	movs	r2, #1
 80010c8:	483f      	ldr	r0, [pc, #252]	; (80011c8 <commTask+0x10c>)
 80010ca:	f004 fd9f 	bl	8005c0c <HAL_UART_Receive>
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]

	if (Status != HAL_OK)
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d01f      	beq.n	8001118 <commTask+0x5c>
	{
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 80010d8:	4b3b      	ldr	r3, [pc, #236]	; (80011c8 <commTask+0x10c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	f003 0308 	and.w	r3, r3, #8
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d011      	beq.n	800110a <commTask+0x4e>
		{
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 80010e6:	4b38      	ldr	r3, [pc, #224]	; (80011c8 <commTask+0x10c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2208      	movs	r2, #8
 80010ec:	621a      	str	r2, [r3, #32]
		}

		while (cmdprint < cmdcount)
 80010ee:	e00c      	b.n	800110a <commTask+0x4e>
		{
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, HAL_MAX_DELAY);
 80010f0:	4b36      	ldr	r3, [pc, #216]	; (80011cc <commTask+0x110>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	1c5a      	adds	r2, r3, #1
 80010f6:	4935      	ldr	r1, [pc, #212]	; (80011cc <commTask+0x110>)
 80010f8:	600a      	str	r2, [r1, #0]
 80010fa:	4a35      	ldr	r2, [pc, #212]	; (80011d0 <commTask+0x114>)
 80010fc:	1899      	adds	r1, r3, r2
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001102:	2201      	movs	r2, #1
 8001104:	4830      	ldr	r0, [pc, #192]	; (80011c8 <commTask+0x10c>)
 8001106:	f004 fced 	bl	8005ae4 <HAL_UART_Transmit>
		while (cmdprint < cmdcount)
 800110a:	4b30      	ldr	r3, [pc, #192]	; (80011cc <commTask+0x110>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b31      	ldr	r3, [pc, #196]	; (80011d4 <commTask+0x118>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	429a      	cmp	r2, r3
 8001114:	dbec      	blt.n	80010f0 <commTask+0x34>
		}

		return;
 8001116:	e054      	b.n	80011c2 <commTask+0x106>
	}

	if (ch == '\b')
 8001118:	79bb      	ldrb	r3, [r7, #6]
 800111a:	2b08      	cmp	r3, #8
 800111c:	d111      	bne.n	8001142 <commTask+0x86>
	{
		cmdcount--;
 800111e:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <commTask+0x118>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	3b01      	subs	r3, #1
 8001124:	4a2b      	ldr	r2, [pc, #172]	; (80011d4 <commTask+0x118>)
 8001126:	6013      	str	r3, [r2, #0]
		cmdprint--;
 8001128:	4b28      	ldr	r3, [pc, #160]	; (80011cc <commTask+0x110>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	3b01      	subs	r3, #1
 800112e:	4a27      	ldr	r2, [pc, #156]	; (80011cc <commTask+0x110>)
 8001130:	6013      	str	r3, [r2, #0]

		HAL_UART_Transmit(&huart2, (uint8_t*)"\b \b", 3, HAL_MAX_DELAY);
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	2203      	movs	r2, #3
 8001138:	4927      	ldr	r1, [pc, #156]	; (80011d8 <commTask+0x11c>)
 800113a:	4823      	ldr	r0, [pc, #140]	; (80011c8 <commTask+0x10c>)
 800113c:	f004 fcd2 	bl	8005ae4 <HAL_UART_Transmit>

		return;
 8001140:	e03f      	b.n	80011c2 <commTask+0x106>
	}

	if (ch != '\r' && ch != '\n')
 8001142:	79bb      	ldrb	r3, [r7, #6]
 8001144:	2b0d      	cmp	r3, #13
 8001146:	d022      	beq.n	800118e <commTask+0xd2>
 8001148:	79bb      	ldrb	r3, [r7, #6]
 800114a:	2b0a      	cmp	r3, #10
 800114c:	d01f      	beq.n	800118e <commTask+0xd2>
	{
		if (cmdcount >= MAX_BUFFER_LENGTH)
 800114e:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <commTask+0x118>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b63      	cmp	r3, #99	; 0x63
 8001154:	dd05      	ble.n	8001162 <commTask+0xa6>
		{
			cmdcount = 0;
 8001156:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <commTask+0x118>)
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <commTask+0x110>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 8001162:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <commTask+0x118>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	1c5a      	adds	r2, r3, #1
 8001168:	491a      	ldr	r1, [pc, #104]	; (80011d4 <commTask+0x118>)
 800116a:	600a      	str	r2, [r1, #0]
 800116c:	79b9      	ldrb	r1, [r7, #6]
 800116e:	4a18      	ldr	r2, [pc, #96]	; (80011d0 <commTask+0x114>)
 8001170:	54d1      	strb	r1, [r2, r3]

		return;
 8001172:	e026      	b.n	80011c2 <commTask+0x106>
	}

	while (cmdprint < cmdcount)
	{
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8001174:	4b15      	ldr	r3, [pc, #84]	; (80011cc <commTask+0x110>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	1c5a      	adds	r2, r3, #1
 800117a:	4914      	ldr	r1, [pc, #80]	; (80011cc <commTask+0x110>)
 800117c:	600a      	str	r2, [r1, #0]
 800117e:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <commTask+0x114>)
 8001180:	1899      	adds	r1, r3, r2
 8001182:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001186:	2201      	movs	r2, #1
 8001188:	480f      	ldr	r0, [pc, #60]	; (80011c8 <commTask+0x10c>)
 800118a:	f004 fcab 	bl	8005ae4 <HAL_UART_Transmit>
	while (cmdprint < cmdcount)
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <commTask+0x110>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <commTask+0x118>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	429a      	cmp	r2, r3
 8001198:	dbec      	blt.n	8001174 <commTask+0xb8>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 800119a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800119e:	2202      	movs	r2, #2
 80011a0:	490e      	ldr	r1, [pc, #56]	; (80011dc <commTask+0x120>)
 80011a2:	4809      	ldr	r0, [pc, #36]	; (80011c8 <commTask+0x10c>)
 80011a4:	f004 fc9e 	bl	8005ae4 <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <commTask+0x118>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <commTask+0x114>)
 80011ae:	2100      	movs	r1, #0
 80011b0:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <commTask+0x118>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <commTask+0x110>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]

	handleCommand();
 80011be:	f000 f80f 	bl	80011e0 <handleCommand>
}
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200002a8 	.word	0x200002a8
 80011cc:	2000016c 	.word	0x2000016c
 80011d0:	20000104 	.word	0x20000104
 80011d4:	20000168 	.word	0x20000168
 80011d8:	08008350 	.word	0x08008350
 80011dc:	08008354 	.word	0x08008354

080011e0 <handleCommand>:

static void handleCommand()
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b098      	sub	sp, #96	; 0x60
 80011e4:	af00      	add	r7, sp, #0
	char cmd[20]   = { 0 };
 80011e6:	2300      	movs	r3, #0
 80011e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
	char param[50] = { 0 };
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	222e      	movs	r2, #46	; 0x2e
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f005 fa69 	bl	80066dc <memset>

	int numParams = sscanf((const char*)cmdbuffer, "%s %s", cmd, param);
 800120a:	f107 0308 	add.w	r3, r7, #8
 800120e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001212:	498f      	ldr	r1, [pc, #572]	; (8001450 <handleCommand+0x270>)
 8001214:	488f      	ldr	r0, [pc, #572]	; (8001454 <handleCommand+0x274>)
 8001216:	f005 faf7 	bl	8006808 <siscanf>
 800121a:	65f8      	str	r0, [r7, #92]	; 0x5c

	if (numParams == 0)
 800121c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800121e:	2b00      	cmp	r3, #0
 8001220:	f000 8112 	beq.w	8001448 <handleCommand+0x268>
	{
	  return;
	}

	if ((strcmp(cmd, "gettime") == 0) && (numParams == 1))
 8001224:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001228:	498b      	ldr	r1, [pc, #556]	; (8001458 <handleCommand+0x278>)
 800122a:	4618      	mov	r0, r3
 800122c:	f7fe ffd0 	bl	80001d0 <strcmp>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10b      	bne.n	800124e <handleCommand+0x6e>
 8001236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001238:	2b01      	cmp	r3, #1
 800123a:	d108      	bne.n	800124e <handleCommand+0x6e>
	{
		DateTime_t dt;
		rtcGetTime(&dt);
 800123c:	463b      	mov	r3, r7
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fd40 	bl	8000cc4 <rtcGetTime>
		dateTimePrint(&dt);
 8001244:	463b      	mov	r3, r7
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fc10 	bl	8000a6c <dateTimePrint>
	{
 800124c:	e0fd      	b.n	800144a <handleCommand+0x26a>
	}
	else if ((strcmp(cmd, "settime") == 0) && (numParams == 2))
 800124e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001252:	4982      	ldr	r1, [pc, #520]	; (800145c <handleCommand+0x27c>)
 8001254:	4618      	mov	r0, r3
 8001256:	f7fe ffbb 	bl	80001d0 <strcmp>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d108      	bne.n	8001272 <handleCommand+0x92>
 8001260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001262:	2b02      	cmp	r3, #2
 8001264:	d105      	bne.n	8001272 <handleCommand+0x92>
	{
		rtcSetTimeString(param);
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fd52 	bl	8000d14 <rtcSetTimeString>
 8001270:	e0eb      	b.n	800144a <handleCommand+0x26a>
	}
	else if ((strcmp(cmd, "ledon") == 0) && (numParams == 2))
 8001272:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001276:	497a      	ldr	r1, [pc, #488]	; (8001460 <handleCommand+0x280>)
 8001278:	4618      	mov	r0, r3
 800127a:	f7fe ffa9 	bl	80001d0 <strcmp>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d11c      	bne.n	80012be <handleCommand+0xde>
 8001284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001286:	2b02      	cmp	r3, #2
 8001288:	d119      	bne.n	80012be <handleCommand+0xde>
	{
		if (strcmp(param, "L1") == 0)
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	4975      	ldr	r1, [pc, #468]	; (8001464 <handleCommand+0x284>)
 8001290:	4618      	mov	r0, r3
 8001292:	f7fe ff9d 	bl	80001d0 <strcmp>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d102      	bne.n	80012a2 <handleCommand+0xc2>
		{
			ledOn(&L1);
 800129c:	4872      	ldr	r0, [pc, #456]	; (8001468 <handleCommand+0x288>)
 800129e:	f7ff fc27 	bl	8000af0 <ledOn>
		}
		if (strcmp(param, "L2") == 0)
 80012a2:	f107 0308 	add.w	r3, r7, #8
 80012a6:	4971      	ldr	r1, [pc, #452]	; (800146c <handleCommand+0x28c>)
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7fe ff91 	bl	80001d0 <strcmp>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f040 80ca 	bne.w	800144a <handleCommand+0x26a>
		{
			ledOn(&L2);
 80012b6:	486e      	ldr	r0, [pc, #440]	; (8001470 <handleCommand+0x290>)
 80012b8:	f7ff fc1a 	bl	8000af0 <ledOn>
		if (strcmp(param, "L2") == 0)
 80012bc:	e0c5      	b.n	800144a <handleCommand+0x26a>
		}
	}
	else if ((strcmp(cmd, "ledoff") == 0) && (numParams == 2))
 80012be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012c2:	496c      	ldr	r1, [pc, #432]	; (8001474 <handleCommand+0x294>)
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7fe ff83 	bl	80001d0 <strcmp>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d11c      	bne.n	800130a <handleCommand+0x12a>
 80012d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d119      	bne.n	800130a <handleCommand+0x12a>
	{
		if (strcmp(param, "L1") == 0)
 80012d6:	f107 0308 	add.w	r3, r7, #8
 80012da:	4962      	ldr	r1, [pc, #392]	; (8001464 <handleCommand+0x284>)
 80012dc:	4618      	mov	r0, r3
 80012de:	f7fe ff77 	bl	80001d0 <strcmp>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d102      	bne.n	80012ee <handleCommand+0x10e>
		{
			ledOff(&L1);
 80012e8:	485f      	ldr	r0, [pc, #380]	; (8001468 <handleCommand+0x288>)
 80012ea:	f7ff fc18 	bl	8000b1e <ledOff>
		}
		if (strcmp(param, "L2") == 0)
 80012ee:	f107 0308 	add.w	r3, r7, #8
 80012f2:	495e      	ldr	r1, [pc, #376]	; (800146c <handleCommand+0x28c>)
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7fe ff6b 	bl	80001d0 <strcmp>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f040 80a4 	bne.w	800144a <handleCommand+0x26a>
		{
			ledOff(&L2);
 8001302:	485b      	ldr	r0, [pc, #364]	; (8001470 <handleCommand+0x290>)
 8001304:	f7ff fc0b 	bl	8000b1e <ledOff>
		if (strcmp(param, "L2") == 0)
 8001308:	e09f      	b.n	800144a <handleCommand+0x26a>
		}
	}
	else if ((strcmp(cmd, "setcode") == 0) && (numParams == 2))
 800130a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800130e:	495a      	ldr	r1, [pc, #360]	; (8001478 <handleCommand+0x298>)
 8001310:	4618      	mov	r0, r3
 8001312:	f7fe ff5d 	bl	80001d0 <strcmp>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d12b      	bne.n	8001374 <handleCommand+0x194>
 800131c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800131e:	2b02      	cmp	r3, #2
 8001320:	d128      	bne.n	8001374 <handleCommand+0x194>
	{
		int res = securitySetCode(param, strlen(param) + 1);
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	4618      	mov	r0, r3
 8001328:	f7fe ff5c 	bl	80001e4 <strlen>
 800132c:	4603      	mov	r3, r0
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	4611      	mov	r1, r2
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fdc8 	bl	8000ecc <securitySetCode>
 800133c:	65b8      	str	r0, [r7, #88]	; 0x58

		switch (res)
 800133e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001340:	2b02      	cmp	r3, #2
 8001342:	d011      	beq.n	8001368 <handleCommand+0x188>
 8001344:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001346:	2b02      	cmp	r3, #2
 8001348:	dc12      	bgt.n	8001370 <handleCommand+0x190>
 800134a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <handleCommand+0x178>
 8001350:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001352:	2b01      	cmp	r3, #1
 8001354:	d004      	beq.n	8001360 <handleCommand+0x180>
			break;
		case SECURITY_ERROR_AUTHORIZATION:
			printf("No authorization for operation\r\n");
			break;
		default:
			break;
 8001356:	e00b      	b.n	8001370 <handleCommand+0x190>
			printf("New code successfully set\r\n");
 8001358:	4848      	ldr	r0, [pc, #288]	; (800147c <handleCommand+0x29c>)
 800135a:	f005 fa4d 	bl	80067f8 <puts>
			break;
 800135e:	e008      	b.n	8001372 <handleCommand+0x192>
			printf("Illegal code\r\n");
 8001360:	4847      	ldr	r0, [pc, #284]	; (8001480 <handleCommand+0x2a0>)
 8001362:	f005 fa49 	bl	80067f8 <puts>
			break;
 8001366:	e004      	b.n	8001372 <handleCommand+0x192>
			printf("No authorization for operation\r\n");
 8001368:	4846      	ldr	r0, [pc, #280]	; (8001484 <handleCommand+0x2a4>)
 800136a:	f005 fa45 	bl	80067f8 <puts>
			break;
 800136e:	e000      	b.n	8001372 <handleCommand+0x192>
			break;
 8001370:	bf00      	nop
	{
 8001372:	e06a      	b.n	800144a <handleCommand+0x26a>
		}
	}
	else if ((strcmp(cmd, "entercode") == 0) && (numParams == 2))
 8001374:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001378:	4943      	ldr	r1, [pc, #268]	; (8001488 <handleCommand+0x2a8>)
 800137a:	4618      	mov	r0, r3
 800137c:	f7fe ff28 	bl	80001d0 <strcmp>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d13d      	bne.n	8001402 <handleCommand+0x222>
 8001386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001388:	2b02      	cmp	r3, #2
 800138a:	d13a      	bne.n	8001402 <handleCommand+0x222>
	{
		int res = securityEnterCode(param, strlen(param) + 1);
 800138c:	f107 0308 	add.w	r3, r7, #8
 8001390:	4618      	mov	r0, r3
 8001392:	f7fe ff27 	bl	80001e4 <strlen>
 8001396:	4603      	mov	r3, r0
 8001398:	1c5a      	adds	r2, r3, #1
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	4611      	mov	r1, r2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fdbb 	bl	8000f1c <securityEnterCode>
 80013a6:	6578      	str	r0, [r7, #84]	; 0x54

		switch (res)
 80013a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013aa:	2b05      	cmp	r3, #5
 80013ac:	d827      	bhi.n	80013fe <handleCommand+0x21e>
 80013ae:	a201      	add	r2, pc, #4	; (adr r2, 80013b4 <handleCommand+0x1d4>)
 80013b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b4:	080013cd 	.word	0x080013cd
 80013b8:	080013ff 	.word	0x080013ff
 80013bc:	080013ff 	.word	0x080013ff
 80013c0:	080013dd 	.word	0x080013dd
 80013c4:	080013d5 	.word	0x080013d5
 80013c8:	080013ef 	.word	0x080013ef
		{
		case SECURITY_ERROR_NONE:
			printf("System was successfully unlocked!\r\n");
 80013cc:	482f      	ldr	r0, [pc, #188]	; (800148c <handleCommand+0x2ac>)
 80013ce:	f005 fa13 	bl	80067f8 <puts>
			break;
 80013d2:	e015      	b.n	8001400 <handleCommand+0x220>
		case SECURITY_ERROR_INVALID_REQUEST:
			printf("Invalid operation - system is already unlocked\r\n");
 80013d4:	482e      	ldr	r0, [pc, #184]	; (8001490 <handleCommand+0x2b0>)
 80013d6:	f005 fa0f 	bl	80067f8 <puts>
			break;
 80013da:	e011      	b.n	8001400 <handleCommand+0x220>
		case SECURITY_ERROR_WRONG_CODE:
			buzzerStart(&buzzer, 700);
 80013dc:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80013e0:	482c      	ldr	r0, [pc, #176]	; (8001494 <handleCommand+0x2b4>)
 80013e2:	f7ff f8fa 	bl	80005da <buzzerStart>
			printf("Wrong code\r\n");
 80013e6:	482c      	ldr	r0, [pc, #176]	; (8001498 <handleCommand+0x2b8>)
 80013e8:	f005 fa06 	bl	80067f8 <puts>
			break;
 80013ec:	e008      	b.n	8001400 <handleCommand+0x220>
		case SECURITY_ERROR_COOLDOWN:
			printf("Please wait %d seconds before attempting to unlock again\r\n", securityRemainingLockTime());
 80013ee:	f7ff fe1d 	bl	800102c <securityRemainingLockTime>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4619      	mov	r1, r3
 80013f6:	4829      	ldr	r0, [pc, #164]	; (800149c <handleCommand+0x2bc>)
 80013f8:	f005 f978 	bl	80066ec <iprintf>
			break;
 80013fc:	e000      	b.n	8001400 <handleCommand+0x220>
		default:
			break;
 80013fe:	bf00      	nop
	{
 8001400:	e023      	b.n	800144a <handleCommand+0x26a>
		}
	}
	else if ((strcmp(cmd, "systemlock") == 0) && (numParams == 1))
 8001402:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001406:	4926      	ldr	r1, [pc, #152]	; (80014a0 <handleCommand+0x2c0>)
 8001408:	4618      	mov	r0, r3
 800140a:	f7fe fee1 	bl	80001d0 <strcmp>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d115      	bne.n	8001440 <handleCommand+0x260>
 8001414:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001416:	2b01      	cmp	r3, #1
 8001418:	d112      	bne.n	8001440 <handleCommand+0x260>
	{
		int res = securityLockSystem();
 800141a:	f7ff fdf1 	bl	8001000 <securityLockSystem>
 800141e:	6538      	str	r0, [r7, #80]	; 0x50

		switch (res)
 8001420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <handleCommand+0x24e>
 8001426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001428:	2b02      	cmp	r3, #2
 800142a:	d004      	beq.n	8001436 <handleCommand+0x256>
		case SECURITY_ERROR_AUTHORIZATION:
			printf("No authorization for operation\r\n");
			break;

		default:
			break;
 800142c:	e007      	b.n	800143e <handleCommand+0x25e>
			printf("System is locked\r\n");
 800142e:	481d      	ldr	r0, [pc, #116]	; (80014a4 <handleCommand+0x2c4>)
 8001430:	f005 f9e2 	bl	80067f8 <puts>
			break;
 8001434:	e003      	b.n	800143e <handleCommand+0x25e>
			printf("No authorization for operation\r\n");
 8001436:	4813      	ldr	r0, [pc, #76]	; (8001484 <handleCommand+0x2a4>)
 8001438:	f005 f9de 	bl	80067f8 <puts>
			break;
 800143c:	bf00      	nop
	{
 800143e:	e004      	b.n	800144a <handleCommand+0x26a>
		}
	}
	else
	{
	  printf("Invalid command\r\n");
 8001440:	4819      	ldr	r0, [pc, #100]	; (80014a8 <handleCommand+0x2c8>)
 8001442:	f005 f9d9 	bl	80067f8 <puts>
 8001446:	e000      	b.n	800144a <handleCommand+0x26a>
	  return;
 8001448:	bf00      	nop
	}
}
 800144a:	3760      	adds	r7, #96	; 0x60
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	08008358 	.word	0x08008358
 8001454:	20000104 	.word	0x20000104
 8001458:	08008360 	.word	0x08008360
 800145c:	08008368 	.word	0x08008368
 8001460:	08008370 	.word	0x08008370
 8001464:	08008378 	.word	0x08008378
 8001468:	200000ac 	.word	0x200000ac
 800146c:	0800837c 	.word	0x0800837c
 8001470:	200000b4 	.word	0x200000b4
 8001474:	08008380 	.word	0x08008380
 8001478:	08008388 	.word	0x08008388
 800147c:	08008390 	.word	0x08008390
 8001480:	080083ac 	.word	0x080083ac
 8001484:	080083bc 	.word	0x080083bc
 8001488:	080083dc 	.word	0x080083dc
 800148c:	080083e8 	.word	0x080083e8
 8001490:	0800840c 	.word	0x0800840c
 8001494:	200000bc 	.word	0x200000bc
 8001498:	0800843c 	.word	0x0800843c
 800149c:	08008448 	.word	0x08008448
 80014a0:	08008484 	.word	0x08008484
 80014a4:	08008490 	.word	0x08008490
 80014a8:	080084a4 	.word	0x080084a4

080014ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b0:	f000 fca2 	bl	8001df8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b4:	f000 f80f 	bl	80014d6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b8:	f000 f996 	bl	80017e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014bc:	f000 f964 	bl	8001788 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80014c0:	f000 f85a 	bl	8001578 <MX_I2C1_Init>
  MX_TIM3_Init();
 80014c4:	f000 f898 	bl	80015f8 <MX_TIM3_Init>
  MX_TIM6_Init();
 80014c8:	f000 f8f0 	bl	80016ac <MX_TIM6_Init>
  MX_TIM7_Init();
 80014cc:	f000 f924 	bl	8001718 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  mainloop();
 80014d0:	f7ff fb3c 	bl	8000b4c <mainloop>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <main+0x28>

080014d6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b096      	sub	sp, #88	; 0x58
 80014da:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	2244      	movs	r2, #68	; 0x44
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f005 f8f9 	bl	80066dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ea:	463b      	mov	r3, r7
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014fc:	f001 fdd6 	bl	80030ac <HAL_PWREx_ControlVoltageScaling>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001506:	f000 f9d5 	bl	80018b4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800150a:	2302      	movs	r3, #2
 800150c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800150e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001512:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001514:	2310      	movs	r3, #16
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001518:	2302      	movs	r3, #2
 800151a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800151c:	2302      	movs	r3, #2
 800151e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001520:	2301      	movs	r3, #1
 8001522:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001524:	230a      	movs	r3, #10
 8001526:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001528:	2307      	movs	r3, #7
 800152a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800152c:	2302      	movs	r3, #2
 800152e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001530:	2302      	movs	r3, #2
 8001532:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4618      	mov	r0, r3
 800153a:	f001 fe0d 	bl	8003158 <HAL_RCC_OscConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001544:	f000 f9b6 	bl	80018b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001548:	230f      	movs	r3, #15
 800154a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800154c:	2303      	movs	r3, #3
 800154e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001558:	2300      	movs	r3, #0
 800155a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800155c:	463b      	mov	r3, r7
 800155e:	2104      	movs	r1, #4
 8001560:	4618      	mov	r0, r3
 8001562:	f002 f9d5 	bl	8003910 <HAL_RCC_ClockConfig>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800156c:	f000 f9a2 	bl	80018b4 <Error_Handler>
  }
}
 8001570:	bf00      	nop
 8001572:	3758      	adds	r7, #88	; 0x58
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800157c:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <MX_I2C1_Init+0x74>)
 800157e:	4a1c      	ldr	r2, [pc, #112]	; (80015f0 <MX_I2C1_Init+0x78>)
 8001580:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <MX_I2C1_Init+0x74>)
 8001584:	4a1b      	ldr	r2, [pc, #108]	; (80015f4 <MX_I2C1_Init+0x7c>)
 8001586:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001588:	4b18      	ldr	r3, [pc, #96]	; (80015ec <MX_I2C1_Init+0x74>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800158e:	4b17      	ldr	r3, [pc, #92]	; (80015ec <MX_I2C1_Init+0x74>)
 8001590:	2201      	movs	r2, #1
 8001592:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001594:	4b15      	ldr	r3, [pc, #84]	; (80015ec <MX_I2C1_Init+0x74>)
 8001596:	2200      	movs	r2, #0
 8001598:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800159a:	4b14      	ldr	r3, [pc, #80]	; (80015ec <MX_I2C1_Init+0x74>)
 800159c:	2200      	movs	r2, #0
 800159e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <MX_I2C1_Init+0x74>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <MX_I2C1_Init+0x74>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <MX_I2C1_Init+0x74>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015b2:	480e      	ldr	r0, [pc, #56]	; (80015ec <MX_I2C1_Init+0x74>)
 80015b4:	f000 ff70 	bl	8002498 <HAL_I2C_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015be:	f000 f979 	bl	80018b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015c2:	2100      	movs	r1, #0
 80015c4:	4809      	ldr	r0, [pc, #36]	; (80015ec <MX_I2C1_Init+0x74>)
 80015c6:	f001 fccb 	bl	8002f60 <HAL_I2CEx_ConfigAnalogFilter>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015d0:	f000 f970 	bl	80018b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015d4:	2100      	movs	r1, #0
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <MX_I2C1_Init+0x74>)
 80015d8:	f001 fd0d 	bl	8002ff6 <HAL_I2CEx_ConfigDigitalFilter>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015e2:	f000 f967 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000170 	.word	0x20000170
 80015f0:	40005400 	.word	0x40005400
 80015f4:	10909cec 	.word	0x10909cec

080015f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fe:	f107 031c 	add.w	r3, r7, #28
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800160a:	463b      	mov	r3, r7
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
 8001618:	615a      	str	r2, [r3, #20]
 800161a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800161c:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <MX_TIM3_Init+0xac>)
 800161e:	4a22      	ldr	r2, [pc, #136]	; (80016a8 <MX_TIM3_Init+0xb0>)
 8001620:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 8001622:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <MX_TIM3_Init+0xac>)
 8001624:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001628:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162a:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <MX_TIM3_Init+0xac>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001630:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <MX_TIM3_Init+0xac>)
 8001632:	2264      	movs	r2, #100	; 0x64
 8001634:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001636:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <MX_TIM3_Init+0xac>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163c:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <MX_TIM3_Init+0xac>)
 800163e:	2200      	movs	r2, #0
 8001640:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001642:	4818      	ldr	r0, [pc, #96]	; (80016a4 <MX_TIM3_Init+0xac>)
 8001644:	f003 f974 	bl	8004930 <HAL_TIM_PWM_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800164e:	f000 f931 	bl	80018b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001656:	2300      	movs	r3, #0
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	4619      	mov	r1, r3
 8001660:	4810      	ldr	r0, [pc, #64]	; (80016a4 <MX_TIM3_Init+0xac>)
 8001662:	f004 f94b 	bl	80058fc <HAL_TIMEx_MasterConfigSynchronization>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800166c:	f000 f922 	bl	80018b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001670:	2360      	movs	r3, #96	; 0x60
 8001672:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8001674:	2332      	movs	r3, #50	; 0x32
 8001676:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001678:	2300      	movs	r3, #0
 800167a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001680:	463b      	mov	r3, r7
 8001682:	2200      	movs	r2, #0
 8001684:	4619      	mov	r1, r3
 8001686:	4807      	ldr	r0, [pc, #28]	; (80016a4 <MX_TIM3_Init+0xac>)
 8001688:	f003 fc66 	bl	8004f58 <HAL_TIM_PWM_ConfigChannel>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001692:	f000 f90f 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001696:	4803      	ldr	r0, [pc, #12]	; (80016a4 <MX_TIM3_Init+0xac>)
 8001698:	f000 f9f6 	bl	8001a88 <HAL_TIM_MspPostInit>

}
 800169c:	bf00      	nop
 800169e:	3728      	adds	r7, #40	; 0x28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	200001c4 	.word	0x200001c4
 80016a8:	40000400 	.word	0x40000400

080016ac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <MX_TIM6_Init+0x64>)
 80016be:	4a15      	ldr	r2, [pc, #84]	; (8001714 <MX_TIM6_Init+0x68>)
 80016c0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 80016c2:	4b13      	ldr	r3, [pc, #76]	; (8001710 <MX_TIM6_Init+0x64>)
 80016c4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80016c8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_TIM6_Init+0x64>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <MX_TIM6_Init+0x64>)
 80016d2:	2209      	movs	r2, #9
 80016d4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_TIM6_Init+0x64>)
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80016dc:	480c      	ldr	r0, [pc, #48]	; (8001710 <MX_TIM6_Init+0x64>)
 80016de:	f002 fff7 	bl	80046d0 <HAL_TIM_Base_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80016e8:	f000 f8e4 	bl	80018b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ec:	2300      	movs	r3, #0
 80016ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	4619      	mov	r1, r3
 80016f8:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_TIM6_Init+0x64>)
 80016fa:	f004 f8ff 	bl	80058fc <HAL_TIMEx_MasterConfigSynchronization>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001704:	f000 f8d6 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001708:	bf00      	nop
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000210 	.word	0x20000210
 8001714:	40001000 	.word	0x40001000

08001718 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001728:	4b15      	ldr	r3, [pc, #84]	; (8001780 <MX_TIM7_Init+0x68>)
 800172a:	4a16      	ldr	r2, [pc, #88]	; (8001784 <MX_TIM7_Init+0x6c>)
 800172c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 800172e:	4b14      	ldr	r3, [pc, #80]	; (8001780 <MX_TIM7_Init+0x68>)
 8001730:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001734:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <MX_TIM7_Init+0x68>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800173c:	4b10      	ldr	r3, [pc, #64]	; (8001780 <MX_TIM7_Init+0x68>)
 800173e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001742:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001744:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <MX_TIM7_Init+0x68>)
 8001746:	2200      	movs	r2, #0
 8001748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800174a:	480d      	ldr	r0, [pc, #52]	; (8001780 <MX_TIM7_Init+0x68>)
 800174c:	f002 ffc0 	bl	80046d0 <HAL_TIM_Base_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001756:	f000 f8ad 	bl	80018b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	4619      	mov	r1, r3
 8001766:	4806      	ldr	r0, [pc, #24]	; (8001780 <MX_TIM7_Init+0x68>)
 8001768:	f004 f8c8 	bl	80058fc <HAL_TIMEx_MasterConfigSynchronization>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001772:	f000 f89f 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	2000025c 	.word	0x2000025c
 8001784:	40001400 	.word	0x40001400

08001788 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800178c:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <MX_USART2_UART_Init+0x58>)
 800178e:	4a15      	ldr	r2, [pc, #84]	; (80017e4 <MX_USART2_UART_Init+0x5c>)
 8001790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001792:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <MX_USART2_UART_Init+0x58>)
 8001794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <MX_USART2_UART_Init+0x58>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017a0:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <MX_USART2_UART_Init+0x58>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <MX_USART2_UART_Init+0x58>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <MX_USART2_UART_Init+0x58>)
 80017ae:	220c      	movs	r2, #12
 80017b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <MX_USART2_UART_Init+0x58>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <MX_USART2_UART_Init+0x58>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <MX_USART2_UART_Init+0x58>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <MX_USART2_UART_Init+0x58>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <MX_USART2_UART_Init+0x58>)
 80017cc:	f004 f93c 	bl	8005a48 <HAL_UART_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017d6:	f000 f86d 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200002a8 	.word	0x200002a8
 80017e4:	40004400 	.word	0x40004400

080017e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fe:	4b2b      	ldr	r3, [pc, #172]	; (80018ac <MX_GPIO_Init+0xc4>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	4a2a      	ldr	r2, [pc, #168]	; (80018ac <MX_GPIO_Init+0xc4>)
 8001804:	f043 0304 	orr.w	r3, r3, #4
 8001808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180a:	4b28      	ldr	r3, [pc, #160]	; (80018ac <MX_GPIO_Init+0xc4>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001816:	4b25      	ldr	r3, [pc, #148]	; (80018ac <MX_GPIO_Init+0xc4>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181a:	4a24      	ldr	r2, [pc, #144]	; (80018ac <MX_GPIO_Init+0xc4>)
 800181c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001822:	4b22      	ldr	r3, [pc, #136]	; (80018ac <MX_GPIO_Init+0xc4>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182e:	4b1f      	ldr	r3, [pc, #124]	; (80018ac <MX_GPIO_Init+0xc4>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001832:	4a1e      	ldr	r2, [pc, #120]	; (80018ac <MX_GPIO_Init+0xc4>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800183a:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <MX_GPIO_Init+0xc4>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001846:	4b19      	ldr	r3, [pc, #100]	; (80018ac <MX_GPIO_Init+0xc4>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	4a18      	ldr	r2, [pc, #96]	; (80018ac <MX_GPIO_Init+0xc4>)
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001852:	4b16      	ldr	r3, [pc, #88]	; (80018ac <MX_GPIO_Init+0xc4>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_L1_Pin|LED_L2_Pin, GPIO_PIN_RESET);
 800185e:	2200      	movs	r2, #0
 8001860:	2160      	movs	r1, #96	; 0x60
 8001862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001866:	f000 fdff 	bl	8002468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800186a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800186e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001870:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	4619      	mov	r1, r3
 8001880:	480b      	ldr	r0, [pc, #44]	; (80018b0 <MX_GPIO_Init+0xc8>)
 8001882:	f000 fc47 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_L1_Pin LED_L2_Pin */
  GPIO_InitStruct.Pin = LED_L1_Pin|LED_L2_Pin;
 8001886:	2360      	movs	r3, #96	; 0x60
 8001888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188a:	2301      	movs	r3, #1
 800188c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001892:	2300      	movs	r3, #0
 8001894:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a0:	f000 fc38 	bl	8002114 <HAL_GPIO_Init>

}
 80018a4:	bf00      	nop
 80018a6:	3728      	adds	r7, #40	; 0x28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40021000 	.word	0x40021000
 80018b0:	48000800 	.word	0x48000800

080018b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018b8:	b672      	cpsid	i
}
 80018ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018bc:	e7fe      	b.n	80018bc <Error_Handler+0x8>
	...

080018c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <HAL_MspInit+0x44>)
 80018c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ca:	4a0e      	ldr	r2, [pc, #56]	; (8001904 <HAL_MspInit+0x44>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6613      	str	r3, [r2, #96]	; 0x60
 80018d2:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <HAL_MspInit+0x44>)
 80018d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <HAL_MspInit+0x44>)
 80018e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e2:	4a08      	ldr	r2, [pc, #32]	; (8001904 <HAL_MspInit+0x44>)
 80018e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e8:	6593      	str	r3, [r2, #88]	; 0x58
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_MspInit+0x44>)
 80018ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40021000 	.word	0x40021000

08001908 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b0ac      	sub	sp, #176	; 0xb0
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	2288      	movs	r2, #136	; 0x88
 8001926:	2100      	movs	r1, #0
 8001928:	4618      	mov	r0, r3
 800192a:	f004 fed7 	bl	80066dc <memset>
  if(hi2c->Instance==I2C1)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a21      	ldr	r2, [pc, #132]	; (80019b8 <HAL_I2C_MspInit+0xb0>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d13b      	bne.n	80019b0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001938:	2340      	movs	r3, #64	; 0x40
 800193a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800193c:	2300      	movs	r3, #0
 800193e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	4618      	mov	r0, r3
 8001946:	f002 fa07 	bl	8003d58 <HAL_RCCEx_PeriphCLKConfig>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001950:	f7ff ffb0 	bl	80018b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <HAL_I2C_MspInit+0xb4>)
 8001956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001958:	4a18      	ldr	r2, [pc, #96]	; (80019bc <HAL_I2C_MspInit+0xb4>)
 800195a:	f043 0302 	orr.w	r3, r3, #2
 800195e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001960:	4b16      	ldr	r3, [pc, #88]	; (80019bc <HAL_I2C_MspInit+0xb4>)
 8001962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800196c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001970:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001974:	2312      	movs	r3, #18
 8001976:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001980:	2303      	movs	r3, #3
 8001982:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001986:	2304      	movs	r3, #4
 8001988:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001990:	4619      	mov	r1, r3
 8001992:	480b      	ldr	r0, [pc, #44]	; (80019c0 <HAL_I2C_MspInit+0xb8>)
 8001994:	f000 fbbe 	bl	8002114 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001998:	4b08      	ldr	r3, [pc, #32]	; (80019bc <HAL_I2C_MspInit+0xb4>)
 800199a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199c:	4a07      	ldr	r2, [pc, #28]	; (80019bc <HAL_I2C_MspInit+0xb4>)
 800199e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019a2:	6593      	str	r3, [r2, #88]	; 0x58
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_I2C_MspInit+0xb4>)
 80019a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019b0:	bf00      	nop
 80019b2:	37b0      	adds	r7, #176	; 0xb0
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40005400 	.word	0x40005400
 80019bc:	40021000 	.word	0x40021000
 80019c0:	48000400 	.word	0x48000400

080019c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <HAL_TIM_PWM_MspInit+0x38>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d10b      	bne.n	80019ee <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019d6:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <HAL_TIM_PWM_MspInit+0x3c>)
 80019d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019da:	4a09      	ldr	r2, [pc, #36]	; (8001a00 <HAL_TIM_PWM_MspInit+0x3c>)
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	6593      	str	r3, [r2, #88]	; 0x58
 80019e2:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <HAL_TIM_PWM_MspInit+0x3c>)
 80019e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019ee:	bf00      	nop
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40000400 	.word	0x40000400
 8001a00:	40021000 	.word	0x40021000

08001a04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a1a      	ldr	r2, [pc, #104]	; (8001a7c <HAL_TIM_Base_MspInit+0x78>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d114      	bne.n	8001a40 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a16:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <HAL_TIM_Base_MspInit+0x7c>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1a:	4a19      	ldr	r2, [pc, #100]	; (8001a80 <HAL_TIM_Base_MspInit+0x7c>)
 8001a1c:	f043 0310 	orr.w	r3, r3, #16
 8001a20:	6593      	str	r3, [r2, #88]	; 0x58
 8001a22:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <HAL_TIM_Base_MspInit+0x7c>)
 8001a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a26:	f003 0310 	and.w	r3, r3, #16
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2100      	movs	r1, #0
 8001a32:	2036      	movs	r0, #54	; 0x36
 8001a34:	f000 fb37 	bl	80020a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a38:	2036      	movs	r0, #54	; 0x36
 8001a3a:	f000 fb50 	bl	80020de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001a3e:	e018      	b.n	8001a72 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0f      	ldr	r2, [pc, #60]	; (8001a84 <HAL_TIM_Base_MspInit+0x80>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d113      	bne.n	8001a72 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <HAL_TIM_Base_MspInit+0x7c>)
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4e:	4a0c      	ldr	r2, [pc, #48]	; (8001a80 <HAL_TIM_Base_MspInit+0x7c>)
 8001a50:	f043 0320 	orr.w	r3, r3, #32
 8001a54:	6593      	str	r3, [r2, #88]	; 0x58
 8001a56:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <HAL_TIM_Base_MspInit+0x7c>)
 8001a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5a:	f003 0320 	and.w	r3, r3, #32
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2100      	movs	r1, #0
 8001a66:	2037      	movs	r0, #55	; 0x37
 8001a68:	f000 fb1d 	bl	80020a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001a6c:	2037      	movs	r0, #55	; 0x37
 8001a6e:	f000 fb36 	bl	80020de <HAL_NVIC_EnableIRQ>
}
 8001a72:	bf00      	nop
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40001000 	.word	0x40001000
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40001400 	.word	0x40001400

08001a88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 030c 	add.w	r3, r7, #12
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a11      	ldr	r2, [pc, #68]	; (8001aec <HAL_TIM_MspPostInit+0x64>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d11b      	bne.n	8001ae2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_TIM_MspPostInit+0x68>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	4a10      	ldr	r2, [pc, #64]	; (8001af0 <HAL_TIM_MspPostInit+0x68>)
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <HAL_TIM_MspPostInit+0x68>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = HW_BUZZER_Pin;
 8001ac2:	2310      	movs	r3, #16
 8001ac4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HW_BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001ad6:	f107 030c 	add.w	r3, r7, #12
 8001ada:	4619      	mov	r1, r3
 8001adc:	4805      	ldr	r0, [pc, #20]	; (8001af4 <HAL_TIM_MspPostInit+0x6c>)
 8001ade:	f000 fb19 	bl	8002114 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ae2:	bf00      	nop
 8001ae4:	3720      	adds	r7, #32
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40000400 	.word	0x40000400
 8001af0:	40021000 	.word	0x40021000
 8001af4:	48000400 	.word	0x48000400

08001af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b0ac      	sub	sp, #176	; 0xb0
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	2288      	movs	r2, #136	; 0x88
 8001b16:	2100      	movs	r1, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f004 fddf 	bl	80066dc <memset>
  if(huart->Instance==USART2)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a21      	ldr	r2, [pc, #132]	; (8001ba8 <HAL_UART_MspInit+0xb0>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d13b      	bne.n	8001ba0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	4618      	mov	r0, r3
 8001b36:	f002 f90f 	bl	8003d58 <HAL_RCCEx_PeriphCLKConfig>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b40:	f7ff feb8 	bl	80018b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b44:	4b19      	ldr	r3, [pc, #100]	; (8001bac <HAL_UART_MspInit+0xb4>)
 8001b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b48:	4a18      	ldr	r2, [pc, #96]	; (8001bac <HAL_UART_MspInit+0xb4>)
 8001b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b50:	4b16      	ldr	r3, [pc, #88]	; (8001bac <HAL_UART_MspInit+0xb4>)
 8001b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5c:	4b13      	ldr	r3, [pc, #76]	; (8001bac <HAL_UART_MspInit+0xb4>)
 8001b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b60:	4a12      	ldr	r2, [pc, #72]	; (8001bac <HAL_UART_MspInit+0xb4>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b68:	4b10      	ldr	r3, [pc, #64]	; (8001bac <HAL_UART_MspInit+0xb4>)
 8001b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b74:	230c      	movs	r3, #12
 8001b76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b86:	2303      	movs	r3, #3
 8001b88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b8c:	2307      	movs	r3, #7
 8001b8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b96:	4619      	mov	r1, r3
 8001b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b9c:	f000 faba 	bl	8002114 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ba0:	bf00      	nop
 8001ba2:	37b0      	adds	r7, #176	; 0xb0
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40004400 	.word	0x40004400
 8001bac:	40021000 	.word	0x40021000

08001bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <NMI_Handler+0x4>

08001bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bba:	e7fe      	b.n	8001bba <HardFault_Handler+0x4>

08001bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <MemManage_Handler+0x4>

08001bc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc6:	e7fe      	b.n	8001bc6 <BusFault_Handler+0x4>

08001bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <UsageFault_Handler+0x4>

08001bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bfc:	f000 f958 	bl	8001eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <TIM6_DAC_IRQHandler+0x10>)
 8001c0a:	f003 f885 	bl	8004d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000210 	.word	0x20000210

08001c18 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <TIM7_IRQHandler+0x10>)
 8001c1e:	f003 f87b 	bl	8004d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	2000025c 	.word	0x2000025c

08001c2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
	return 1;
 8001c30:	2301      	movs	r3, #1
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <_kill>:

int _kill(int pid, int sig)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c46:	f004 fd1f 	bl	8006688 <__errno>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2216      	movs	r2, #22
 8001c4e:	601a      	str	r2, [r3, #0]
	return -1;
 8001c50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <_exit>:

void _exit (int status)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ffe7 	bl	8001c3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c6e:	e7fe      	b.n	8001c6e <_exit+0x12>

08001c70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	e00a      	b.n	8001c98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c82:	f3af 8000 	nop.w
 8001c86:	4601      	mov	r1, r0
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	1c5a      	adds	r2, r3, #1
 8001c8c:	60ba      	str	r2, [r7, #8]
 8001c8e:	b2ca      	uxtb	r2, r1
 8001c90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	3301      	adds	r3, #1
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	dbf0      	blt.n	8001c82 <_read+0x12>
	}

return len;
 8001ca0:	687b      	ldr	r3, [r7, #4]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <_close>:
	}
	return len;
}

int _close(int file)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
	return -1;
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cd2:	605a      	str	r2, [r3, #4]
	return 0;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <_isatty>:

int _isatty(int file)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
	return 1;
 8001cea:	2301      	movs	r3, #1
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
	return 0;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d1c:	4a14      	ldr	r2, [pc, #80]	; (8001d70 <_sbrk+0x5c>)
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <_sbrk+0x60>)
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d28:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <_sbrk+0x64>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d102      	bne.n	8001d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <_sbrk+0x64>)
 8001d32:	4a12      	ldr	r2, [pc, #72]	; (8001d7c <_sbrk+0x68>)
 8001d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <_sbrk+0x64>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d207      	bcs.n	8001d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d44:	f004 fca0 	bl	8006688 <__errno>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d52:	e009      	b.n	8001d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d54:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <_sbrk+0x64>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d5a:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <_sbrk+0x64>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	4a05      	ldr	r2, [pc, #20]	; (8001d78 <_sbrk+0x64>)
 8001d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d66:	68fb      	ldr	r3, [r7, #12]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20018000 	.word	0x20018000
 8001d74:	00000400 	.word	0x00000400
 8001d78:	2000032c 	.word	0x2000032c
 8001d7c:	20000348 	.word	0x20000348

08001d80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <SystemInit+0x20>)
 8001d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d8a:	4a05      	ldr	r2, [pc, #20]	; (8001da0 <SystemInit+0x20>)
 8001d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001da4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ddc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001da8:	f7ff ffea 	bl	8001d80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dac:	480c      	ldr	r0, [pc, #48]	; (8001de0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dae:	490d      	ldr	r1, [pc, #52]	; (8001de4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001db0:	4a0d      	ldr	r2, [pc, #52]	; (8001de8 <LoopForever+0xe>)
  movs r3, #0
 8001db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db4:	e002      	b.n	8001dbc <LoopCopyDataInit>

08001db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dba:	3304      	adds	r3, #4

08001dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc0:	d3f9      	bcc.n	8001db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dc4:	4c0a      	ldr	r4, [pc, #40]	; (8001df0 <LoopForever+0x16>)
  movs r3, #0
 8001dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc8:	e001      	b.n	8001dce <LoopFillZerobss>

08001dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dcc:	3204      	adds	r2, #4

08001dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd0:	d3fb      	bcc.n	8001dca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dd2:	f004 fc5f 	bl	8006694 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dd6:	f7ff fb69 	bl	80014ac <main>

08001dda <LoopForever>:

LoopForever:
    b LoopForever
 8001dda:	e7fe      	b.n	8001dda <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ddc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001de8:	08008784 	.word	0x08008784
  ldr r2, =_sbss
 8001dec:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001df0:	20000344 	.word	0x20000344

08001df4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001df4:	e7fe      	b.n	8001df4 <ADC1_2_IRQHandler>
	...

08001df8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e02:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <HAL_Init+0x3c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a0b      	ldr	r2, [pc, #44]	; (8001e34 <HAL_Init+0x3c>)
 8001e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e0c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e0e:	2003      	movs	r0, #3
 8001e10:	f000 f93e 	bl	8002090 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e14:	2000      	movs	r0, #0
 8001e16:	f000 f80f 	bl	8001e38 <HAL_InitTick>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d002      	beq.n	8001e26 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	71fb      	strb	r3, [r7, #7]
 8001e24:	e001      	b.n	8001e2a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e26:	f7ff fd4b 	bl	80018c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40022000 	.word	0x40022000

08001e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e44:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <HAL_InitTick+0x6c>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d023      	beq.n	8001e94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e4c:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <HAL_InitTick+0x70>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <HAL_InitTick+0x6c>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f949 	bl	80020fa <HAL_SYSTICK_Config>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10f      	bne.n	8001e8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b0f      	cmp	r3, #15
 8001e72:	d809      	bhi.n	8001e88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e74:	2200      	movs	r2, #0
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7c:	f000 f913 	bl	80020a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e80:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <HAL_InitTick+0x74>)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	e007      	b.n	8001e98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	73fb      	strb	r3, [r7, #15]
 8001e8c:	e004      	b.n	8001e98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	73fb      	strb	r3, [r7, #15]
 8001e92:	e001      	b.n	8001e98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000024 	.word	0x20000024
 8001ea8:	2000001c 	.word	0x2000001c
 8001eac:	20000020 	.word	0x20000020

08001eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_IncTick+0x20>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_IncTick+0x24>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <HAL_IncTick+0x24>)
 8001ec2:	6013      	str	r3, [r2, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000024 	.word	0x20000024
 8001ed4:	20000330 	.word	0x20000330

08001ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return uwTick;
 8001edc:	4b03      	ldr	r3, [pc, #12]	; (8001eec <HAL_GetTick+0x14>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20000330 	.word	0x20000330

08001ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f00:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <__NVIC_SetPriorityGrouping+0x44>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f22:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <__NVIC_SetPriorityGrouping+0x44>)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	60d3      	str	r3, [r2, #12]
}
 8001f28:	bf00      	nop
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f3c:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <__NVIC_GetPriorityGrouping+0x18>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	0a1b      	lsrs	r3, r3, #8
 8001f42:	f003 0307 	and.w	r3, r3, #7
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	db0b      	blt.n	8001f7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	f003 021f 	and.w	r2, r3, #31
 8001f6c:	4907      	ldr	r1, [pc, #28]	; (8001f8c <__NVIC_EnableIRQ+0x38>)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	095b      	lsrs	r3, r3, #5
 8001f74:	2001      	movs	r0, #1
 8001f76:	fa00 f202 	lsl.w	r2, r0, r2
 8001f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000e100 	.word	0xe000e100

08001f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	6039      	str	r1, [r7, #0]
 8001f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	db0a      	blt.n	8001fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	490c      	ldr	r1, [pc, #48]	; (8001fdc <__NVIC_SetPriority+0x4c>)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	0112      	lsls	r2, r2, #4
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb8:	e00a      	b.n	8001fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	4908      	ldr	r1, [pc, #32]	; (8001fe0 <__NVIC_SetPriority+0x50>)
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	3b04      	subs	r3, #4
 8001fc8:	0112      	lsls	r2, r2, #4
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	440b      	add	r3, r1
 8001fce:	761a      	strb	r2, [r3, #24]
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000e100 	.word	0xe000e100
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b089      	sub	sp, #36	; 0x24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f1c3 0307 	rsb	r3, r3, #7
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	bf28      	it	cs
 8002002:	2304      	movcs	r3, #4
 8002004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3304      	adds	r3, #4
 800200a:	2b06      	cmp	r3, #6
 800200c:	d902      	bls.n	8002014 <NVIC_EncodePriority+0x30>
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3b03      	subs	r3, #3
 8002012:	e000      	b.n	8002016 <NVIC_EncodePriority+0x32>
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002018:	f04f 32ff 	mov.w	r2, #4294967295
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43da      	mvns	r2, r3
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	401a      	ands	r2, r3
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800202c:	f04f 31ff 	mov.w	r1, #4294967295
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	fa01 f303 	lsl.w	r3, r1, r3
 8002036:	43d9      	mvns	r1, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800203c:	4313      	orrs	r3, r2
         );
}
 800203e:	4618      	mov	r0, r3
 8002040:	3724      	adds	r7, #36	; 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3b01      	subs	r3, #1
 8002058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800205c:	d301      	bcc.n	8002062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800205e:	2301      	movs	r3, #1
 8002060:	e00f      	b.n	8002082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002062:	4a0a      	ldr	r2, [pc, #40]	; (800208c <SysTick_Config+0x40>)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3b01      	subs	r3, #1
 8002068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800206a:	210f      	movs	r1, #15
 800206c:	f04f 30ff 	mov.w	r0, #4294967295
 8002070:	f7ff ff8e 	bl	8001f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <SysTick_Config+0x40>)
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800207a:	4b04      	ldr	r3, [pc, #16]	; (800208c <SysTick_Config+0x40>)
 800207c:	2207      	movs	r2, #7
 800207e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	e000e010 	.word	0xe000e010

08002090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff ff29 	bl	8001ef0 <__NVIC_SetPriorityGrouping>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b086      	sub	sp, #24
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	4603      	mov	r3, r0
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
 80020b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020b8:	f7ff ff3e 	bl	8001f38 <__NVIC_GetPriorityGrouping>
 80020bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	6978      	ldr	r0, [r7, #20]
 80020c4:	f7ff ff8e 	bl	8001fe4 <NVIC_EncodePriority>
 80020c8:	4602      	mov	r2, r0
 80020ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ff5d 	bl	8001f90 <__NVIC_SetPriority>
}
 80020d6:	bf00      	nop
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	4603      	mov	r3, r0
 80020e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff31 	bl	8001f54 <__NVIC_EnableIRQ>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff ffa2 	bl	800204c <SysTick_Config>
 8002108:	4603      	mov	r3, r0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002114:	b480      	push	{r7}
 8002116:	b087      	sub	sp, #28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002122:	e17f      	b.n	8002424 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	2101      	movs	r1, #1
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	fa01 f303 	lsl.w	r3, r1, r3
 8002130:	4013      	ands	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 8171 	beq.w	800241e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	2b01      	cmp	r3, #1
 8002146:	d005      	beq.n	8002154 <HAL_GPIO_Init+0x40>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d130      	bne.n	80021b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	2203      	movs	r2, #3
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4013      	ands	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	4313      	orrs	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800218a:	2201      	movs	r2, #1
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4013      	ands	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	091b      	lsrs	r3, r3, #4
 80021a0:	f003 0201 	and.w	r2, r3, #1
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d118      	bne.n	80021f4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80021c8:	2201      	movs	r2, #1
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4013      	ands	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	08db      	lsrs	r3, r3, #3
 80021de:	f003 0201 	and.w	r2, r3, #1
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d017      	beq.n	8002230 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	2203      	movs	r2, #3
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4013      	ands	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d123      	bne.n	8002284 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	08da      	lsrs	r2, r3, #3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3208      	adds	r2, #8
 8002244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002248:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	220f      	movs	r2, #15
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4013      	ands	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	08da      	lsrs	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3208      	adds	r2, #8
 800227e:	6939      	ldr	r1, [r7, #16]
 8002280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	2203      	movs	r2, #3
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4013      	ands	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0203 	and.w	r2, r3, #3
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 80ac 	beq.w	800241e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c6:	4b5f      	ldr	r3, [pc, #380]	; (8002444 <HAL_GPIO_Init+0x330>)
 80022c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ca:	4a5e      	ldr	r2, [pc, #376]	; (8002444 <HAL_GPIO_Init+0x330>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6613      	str	r3, [r2, #96]	; 0x60
 80022d2:	4b5c      	ldr	r3, [pc, #368]	; (8002444 <HAL_GPIO_Init+0x330>)
 80022d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022de:	4a5a      	ldr	r2, [pc, #360]	; (8002448 <HAL_GPIO_Init+0x334>)
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	089b      	lsrs	r3, r3, #2
 80022e4:	3302      	adds	r3, #2
 80022e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	220f      	movs	r2, #15
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4013      	ands	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002308:	d025      	beq.n	8002356 <HAL_GPIO_Init+0x242>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4f      	ldr	r2, [pc, #316]	; (800244c <HAL_GPIO_Init+0x338>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d01f      	beq.n	8002352 <HAL_GPIO_Init+0x23e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a4e      	ldr	r2, [pc, #312]	; (8002450 <HAL_GPIO_Init+0x33c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d019      	beq.n	800234e <HAL_GPIO_Init+0x23a>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a4d      	ldr	r2, [pc, #308]	; (8002454 <HAL_GPIO_Init+0x340>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d013      	beq.n	800234a <HAL_GPIO_Init+0x236>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a4c      	ldr	r2, [pc, #304]	; (8002458 <HAL_GPIO_Init+0x344>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00d      	beq.n	8002346 <HAL_GPIO_Init+0x232>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a4b      	ldr	r2, [pc, #300]	; (800245c <HAL_GPIO_Init+0x348>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d007      	beq.n	8002342 <HAL_GPIO_Init+0x22e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a4a      	ldr	r2, [pc, #296]	; (8002460 <HAL_GPIO_Init+0x34c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d101      	bne.n	800233e <HAL_GPIO_Init+0x22a>
 800233a:	2306      	movs	r3, #6
 800233c:	e00c      	b.n	8002358 <HAL_GPIO_Init+0x244>
 800233e:	2307      	movs	r3, #7
 8002340:	e00a      	b.n	8002358 <HAL_GPIO_Init+0x244>
 8002342:	2305      	movs	r3, #5
 8002344:	e008      	b.n	8002358 <HAL_GPIO_Init+0x244>
 8002346:	2304      	movs	r3, #4
 8002348:	e006      	b.n	8002358 <HAL_GPIO_Init+0x244>
 800234a:	2303      	movs	r3, #3
 800234c:	e004      	b.n	8002358 <HAL_GPIO_Init+0x244>
 800234e:	2302      	movs	r3, #2
 8002350:	e002      	b.n	8002358 <HAL_GPIO_Init+0x244>
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <HAL_GPIO_Init+0x244>
 8002356:	2300      	movs	r3, #0
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	f002 0203 	and.w	r2, r2, #3
 800235e:	0092      	lsls	r2, r2, #2
 8002360:	4093      	lsls	r3, r2
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002368:	4937      	ldr	r1, [pc, #220]	; (8002448 <HAL_GPIO_Init+0x334>)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	089b      	lsrs	r3, r3, #2
 800236e:	3302      	adds	r3, #2
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002376:	4b3b      	ldr	r3, [pc, #236]	; (8002464 <HAL_GPIO_Init+0x350>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	43db      	mvns	r3, r3
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4013      	ands	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4313      	orrs	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800239a:	4a32      	ldr	r2, [pc, #200]	; (8002464 <HAL_GPIO_Init+0x350>)
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023a0:	4b30      	ldr	r3, [pc, #192]	; (8002464 <HAL_GPIO_Init+0x350>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	43db      	mvns	r3, r3
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4013      	ands	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023c4:	4a27      	ldr	r2, [pc, #156]	; (8002464 <HAL_GPIO_Init+0x350>)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023ca:	4b26      	ldr	r3, [pc, #152]	; (8002464 <HAL_GPIO_Init+0x350>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	43db      	mvns	r3, r3
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4013      	ands	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023ee:	4a1d      	ldr	r2, [pc, #116]	; (8002464 <HAL_GPIO_Init+0x350>)
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80023f4:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <HAL_GPIO_Init+0x350>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	43db      	mvns	r3, r3
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4013      	ands	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4313      	orrs	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002418:	4a12      	ldr	r2, [pc, #72]	; (8002464 <HAL_GPIO_Init+0x350>)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	3301      	adds	r3, #1
 8002422:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	fa22 f303 	lsr.w	r3, r2, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	f47f ae78 	bne.w	8002124 <HAL_GPIO_Init+0x10>
  }
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	371c      	adds	r7, #28
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000
 8002448:	40010000 	.word	0x40010000
 800244c:	48000400 	.word	0x48000400
 8002450:	48000800 	.word	0x48000800
 8002454:	48000c00 	.word	0x48000c00
 8002458:	48001000 	.word	0x48001000
 800245c:	48001400 	.word	0x48001400
 8002460:	48001800 	.word	0x48001800
 8002464:	40010400 	.word	0x40010400

08002468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	807b      	strh	r3, [r7, #2]
 8002474:	4613      	mov	r3, r2
 8002476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002478:	787b      	ldrb	r3, [r7, #1]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800247e:	887a      	ldrh	r2, [r7, #2]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002484:	e002      	b.n	800248c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002486:	887a      	ldrh	r2, [r7, #2]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e081      	b.n	80025ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d106      	bne.n	80024c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff fa22 	bl	8001908 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2224      	movs	r2, #36	; 0x24
 80024c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0201 	bic.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d107      	bne.n	8002512 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	e006      	b.n	8002520 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800251e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d104      	bne.n	8002532 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002530:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002544:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002554:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69d9      	ldr	r1, [r3, #28]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1a      	ldr	r2, [r3, #32]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0201 	orr.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2220      	movs	r2, #32
 800259a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af02      	add	r7, sp, #8
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	4608      	mov	r0, r1
 80025c2:	4611      	mov	r1, r2
 80025c4:	461a      	mov	r2, r3
 80025c6:	4603      	mov	r3, r0
 80025c8:	817b      	strh	r3, [r7, #10]
 80025ca:	460b      	mov	r3, r1
 80025cc:	813b      	strh	r3, [r7, #8]
 80025ce:	4613      	mov	r3, r2
 80025d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b20      	cmp	r3, #32
 80025dc:	f040 80f9 	bne.w	80027d2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d002      	beq.n	80025ec <HAL_I2C_Mem_Write+0x34>
 80025e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d105      	bne.n	80025f8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0ed      	b.n	80027d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <HAL_I2C_Mem_Write+0x4e>
 8002602:	2302      	movs	r3, #2
 8002604:	e0e6      	b.n	80027d4 <HAL_I2C_Mem_Write+0x21c>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800260e:	f7ff fc63 	bl	8001ed8 <HAL_GetTick>
 8002612:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	2319      	movs	r3, #25
 800261a:	2201      	movs	r2, #1
 800261c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 fac3 	bl	8002bac <I2C_WaitOnFlagUntilTimeout>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0d1      	b.n	80027d4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2221      	movs	r2, #33	; 0x21
 8002634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2240      	movs	r2, #64	; 0x40
 800263c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6a3a      	ldr	r2, [r7, #32]
 800264a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002650:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002658:	88f8      	ldrh	r0, [r7, #6]
 800265a:	893a      	ldrh	r2, [r7, #8]
 800265c:	8979      	ldrh	r1, [r7, #10]
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	9301      	str	r3, [sp, #4]
 8002662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	4603      	mov	r3, r0
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 f9d3 	bl	8002a14 <I2C_RequestMemoryWrite>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e0a9      	b.n	80027d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002684:	b29b      	uxth	r3, r3
 8002686:	2bff      	cmp	r3, #255	; 0xff
 8002688:	d90e      	bls.n	80026a8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	22ff      	movs	r2, #255	; 0xff
 800268e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002694:	b2da      	uxtb	r2, r3
 8002696:	8979      	ldrh	r1, [r7, #10]
 8002698:	2300      	movs	r3, #0
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 fc2b 	bl	8002efc <I2C_TransferConfig>
 80026a6:	e00f      	b.n	80026c8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	8979      	ldrh	r1, [r7, #10]
 80026ba:	2300      	movs	r3, #0
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 fc1a 	bl	8002efc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 faad 	bl	8002c2c <I2C_WaitOnTXISFlagUntilTimeout>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e07b      	b.n	80027d4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	781a      	ldrb	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	3b01      	subs	r3, #1
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002704:	3b01      	subs	r3, #1
 8002706:	b29a      	uxth	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002710:	b29b      	uxth	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d034      	beq.n	8002780 <HAL_I2C_Mem_Write+0x1c8>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271a:	2b00      	cmp	r3, #0
 800271c:	d130      	bne.n	8002780 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002724:	2200      	movs	r2, #0
 8002726:	2180      	movs	r1, #128	; 0x80
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 fa3f 	bl	8002bac <I2C_WaitOnFlagUntilTimeout>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e04d      	b.n	80027d4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	2bff      	cmp	r3, #255	; 0xff
 8002740:	d90e      	bls.n	8002760 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	22ff      	movs	r2, #255	; 0xff
 8002746:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274c:	b2da      	uxtb	r2, r3
 800274e:	8979      	ldrh	r1, [r7, #10]
 8002750:	2300      	movs	r3, #0
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 fbcf 	bl	8002efc <I2C_TransferConfig>
 800275e:	e00f      	b.n	8002780 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002764:	b29a      	uxth	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276e:	b2da      	uxtb	r2, r3
 8002770:	8979      	ldrh	r1, [r7, #10]
 8002772:	2300      	movs	r3, #0
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 fbbe 	bl	8002efc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002784:	b29b      	uxth	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d19e      	bne.n	80026c8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 fa8c 	bl	8002cac <I2C_WaitOnSTOPFlagUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e01a      	b.n	80027d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2220      	movs	r2, #32
 80027a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6859      	ldr	r1, [r3, #4]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <HAL_I2C_Mem_Write+0x224>)
 80027b2:	400b      	ands	r3, r1
 80027b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2220      	movs	r2, #32
 80027ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	e000      	b.n	80027d4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80027d2:	2302      	movs	r3, #2
  }
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	fe00e800 	.word	0xfe00e800

080027e0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af02      	add	r7, sp, #8
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	4608      	mov	r0, r1
 80027ea:	4611      	mov	r1, r2
 80027ec:	461a      	mov	r2, r3
 80027ee:	4603      	mov	r3, r0
 80027f0:	817b      	strh	r3, [r7, #10]
 80027f2:	460b      	mov	r3, r1
 80027f4:	813b      	strh	r3, [r7, #8]
 80027f6:	4613      	mov	r3, r2
 80027f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b20      	cmp	r3, #32
 8002804:	f040 80fd 	bne.w	8002a02 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d002      	beq.n	8002814 <HAL_I2C_Mem_Read+0x34>
 800280e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002810:	2b00      	cmp	r3, #0
 8002812:	d105      	bne.n	8002820 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800281a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0f1      	b.n	8002a04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002826:	2b01      	cmp	r3, #1
 8002828:	d101      	bne.n	800282e <HAL_I2C_Mem_Read+0x4e>
 800282a:	2302      	movs	r3, #2
 800282c:	e0ea      	b.n	8002a04 <HAL_I2C_Mem_Read+0x224>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002836:	f7ff fb4f 	bl	8001ed8 <HAL_GetTick>
 800283a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	2319      	movs	r3, #25
 8002842:	2201      	movs	r2, #1
 8002844:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 f9af 	bl	8002bac <I2C_WaitOnFlagUntilTimeout>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0d5      	b.n	8002a04 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2222      	movs	r2, #34	; 0x22
 800285c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2240      	movs	r2, #64	; 0x40
 8002864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a3a      	ldr	r2, [r7, #32]
 8002872:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002878:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002880:	88f8      	ldrh	r0, [r7, #6]
 8002882:	893a      	ldrh	r2, [r7, #8]
 8002884:	8979      	ldrh	r1, [r7, #10]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	9301      	str	r3, [sp, #4]
 800288a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	4603      	mov	r3, r0
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 f913 	bl	8002abc <I2C_RequestMemoryRead>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0ad      	b.n	8002a04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2bff      	cmp	r3, #255	; 0xff
 80028b0:	d90e      	bls.n	80028d0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	22ff      	movs	r2, #255	; 0xff
 80028b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	8979      	ldrh	r1, [r7, #10]
 80028c0:	4b52      	ldr	r3, [pc, #328]	; (8002a0c <HAL_I2C_Mem_Read+0x22c>)
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 fb17 	bl	8002efc <I2C_TransferConfig>
 80028ce:	e00f      	b.n	80028f0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	8979      	ldrh	r1, [r7, #10]
 80028e2:	4b4a      	ldr	r3, [pc, #296]	; (8002a0c <HAL_I2C_Mem_Read+0x22c>)
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 fb06 	bl	8002efc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f6:	2200      	movs	r2, #0
 80028f8:	2104      	movs	r1, #4
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 f956 	bl	8002bac <I2C_WaitOnFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e07c      	b.n	8002a04 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002932:	b29b      	uxth	r3, r3
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002940:	b29b      	uxth	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d034      	beq.n	80029b0 <HAL_I2C_Mem_Read+0x1d0>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294a:	2b00      	cmp	r3, #0
 800294c:	d130      	bne.n	80029b0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002954:	2200      	movs	r2, #0
 8002956:	2180      	movs	r1, #128	; 0x80
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 f927 	bl	8002bac <I2C_WaitOnFlagUntilTimeout>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e04d      	b.n	8002a04 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296c:	b29b      	uxth	r3, r3
 800296e:	2bff      	cmp	r3, #255	; 0xff
 8002970:	d90e      	bls.n	8002990 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	22ff      	movs	r2, #255	; 0xff
 8002976:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297c:	b2da      	uxtb	r2, r3
 800297e:	8979      	ldrh	r1, [r7, #10]
 8002980:	2300      	movs	r3, #0
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 fab7 	bl	8002efc <I2C_TransferConfig>
 800298e:	e00f      	b.n	80029b0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002994:	b29a      	uxth	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	8979      	ldrh	r1, [r7, #10]
 80029a2:	2300      	movs	r3, #0
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 faa6 	bl	8002efc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d19a      	bne.n	80028f0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 f974 	bl	8002cac <I2C_WaitOnSTOPFlagUntilTimeout>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e01a      	b.n	8002a04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2220      	movs	r2, #32
 80029d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6859      	ldr	r1, [r3, #4]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_I2C_Mem_Read+0x230>)
 80029e2:	400b      	ands	r3, r1
 80029e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2220      	movs	r2, #32
 80029ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	e000      	b.n	8002a04 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002a02:	2302      	movs	r3, #2
  }
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	80002400 	.word	0x80002400
 8002a10:	fe00e800 	.word	0xfe00e800

08002a14 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af02      	add	r7, sp, #8
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	4608      	mov	r0, r1
 8002a1e:	4611      	mov	r1, r2
 8002a20:	461a      	mov	r2, r3
 8002a22:	4603      	mov	r3, r0
 8002a24:	817b      	strh	r3, [r7, #10]
 8002a26:	460b      	mov	r3, r1
 8002a28:	813b      	strh	r3, [r7, #8]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a2e:	88fb      	ldrh	r3, [r7, #6]
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	8979      	ldrh	r1, [r7, #10]
 8002a34:	4b20      	ldr	r3, [pc, #128]	; (8002ab8 <I2C_RequestMemoryWrite+0xa4>)
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 fa5d 	bl	8002efc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a42:	69fa      	ldr	r2, [r7, #28]
 8002a44:	69b9      	ldr	r1, [r7, #24]
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f8f0 	bl	8002c2c <I2C_WaitOnTXISFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e02c      	b.n	8002ab0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d105      	bne.n	8002a68 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a5c:	893b      	ldrh	r3, [r7, #8]
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	629a      	str	r2, [r3, #40]	; 0x28
 8002a66:	e015      	b.n	8002a94 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a68:	893b      	ldrh	r3, [r7, #8]
 8002a6a:	0a1b      	lsrs	r3, r3, #8
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a76:	69fa      	ldr	r2, [r7, #28]
 8002a78:	69b9      	ldr	r1, [r7, #24]
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 f8d6 	bl	8002c2c <I2C_WaitOnTXISFlagUntilTimeout>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e012      	b.n	8002ab0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a8a:	893b      	ldrh	r3, [r7, #8]
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2180      	movs	r1, #128	; 0x80
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f884 	bl	8002bac <I2C_WaitOnFlagUntilTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	80002000 	.word	0x80002000

08002abc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	4608      	mov	r0, r1
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4603      	mov	r3, r0
 8002acc:	817b      	strh	r3, [r7, #10]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	813b      	strh	r3, [r7, #8]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	8979      	ldrh	r1, [r7, #10]
 8002adc:	4b20      	ldr	r3, [pc, #128]	; (8002b60 <I2C_RequestMemoryRead+0xa4>)
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 fa0a 	bl	8002efc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ae8:	69fa      	ldr	r2, [r7, #28]
 8002aea:	69b9      	ldr	r1, [r7, #24]
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 f89d 	bl	8002c2c <I2C_WaitOnTXISFlagUntilTimeout>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e02c      	b.n	8002b56 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002afc:	88fb      	ldrh	r3, [r7, #6]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d105      	bne.n	8002b0e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b02:	893b      	ldrh	r3, [r7, #8]
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	629a      	str	r2, [r3, #40]	; 0x28
 8002b0c:	e015      	b.n	8002b3a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b0e:	893b      	ldrh	r3, [r7, #8]
 8002b10:	0a1b      	lsrs	r3, r3, #8
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b1c:	69fa      	ldr	r2, [r7, #28]
 8002b1e:	69b9      	ldr	r1, [r7, #24]
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 f883 	bl	8002c2c <I2C_WaitOnTXISFlagUntilTimeout>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e012      	b.n	8002b56 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b30:	893b      	ldrh	r3, [r7, #8]
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	2200      	movs	r2, #0
 8002b42:	2140      	movs	r1, #64	; 0x40
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f831 	bl	8002bac <I2C_WaitOnFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	80002000 	.word	0x80002000

08002b64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d103      	bne.n	8002b82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d007      	beq.n	8002ba0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699a      	ldr	r2, [r3, #24]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0201 	orr.w	r2, r2, #1
 8002b9e:	619a      	str	r2, [r3, #24]
  }
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	603b      	str	r3, [r7, #0]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bbc:	e022      	b.n	8002c04 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc4:	d01e      	beq.n	8002c04 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc6:	f7ff f987 	bl	8001ed8 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d302      	bcc.n	8002bdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d113      	bne.n	8002c04 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be0:	f043 0220 	orr.w	r2, r3, #32
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e00f      	b.n	8002c24 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	bf0c      	ite	eq
 8002c14:	2301      	moveq	r3, #1
 8002c16:	2300      	movne	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	79fb      	ldrb	r3, [r7, #7]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d0cd      	beq.n	8002bbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c38:	e02c      	b.n	8002c94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f870 	bl	8002d24 <I2C_IsErrorOccurred>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e02a      	b.n	8002ca4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c54:	d01e      	beq.n	8002c94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c56:	f7ff f93f 	bl	8001ed8 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d302      	bcc.n	8002c6c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d113      	bne.n	8002c94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c70:	f043 0220 	orr.w	r2, r3, #32
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e007      	b.n	8002ca4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d1cb      	bne.n	8002c3a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cb8:	e028      	b.n	8002d0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f830 	bl	8002d24 <I2C_IsErrorOccurred>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e026      	b.n	8002d1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cce:	f7ff f903 	bl	8001ed8 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d302      	bcc.n	8002ce4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d113      	bne.n	8002d0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce8:	f043 0220 	orr.w	r2, r3, #32
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e007      	b.n	8002d1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	f003 0320 	and.w	r3, r3, #32
 8002d16:	2b20      	cmp	r3, #32
 8002d18:	d1cf      	bne.n	8002cba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08a      	sub	sp, #40	; 0x28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d075      	beq.n	8002e3c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2210      	movs	r2, #16
 8002d56:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d58:	e056      	b.n	8002e08 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d60:	d052      	beq.n	8002e08 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d62:	f7ff f8b9 	bl	8001ed8 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d302      	bcc.n	8002d78 <I2C_IsErrorOccurred+0x54>
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d147      	bne.n	8002e08 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d8a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d9a:	d12e      	bne.n	8002dfa <I2C_IsErrorOccurred+0xd6>
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002da2:	d02a      	beq.n	8002dfa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002da4:	7cfb      	ldrb	r3, [r7, #19]
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	d027      	beq.n	8002dfa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002db8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002dba:	f7ff f88d 	bl	8001ed8 <HAL_GetTick>
 8002dbe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dc0:	e01b      	b.n	8002dfa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002dc2:	f7ff f889 	bl	8001ed8 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b19      	cmp	r3, #25
 8002dce:	d914      	bls.n	8002dfa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd4:	f043 0220 	orr.w	r2, r3, #32
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	f003 0320 	and.w	r3, r3, #32
 8002e04:	2b20      	cmp	r3, #32
 8002e06:	d1dc      	bne.n	8002dc2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b20      	cmp	r3, #32
 8002e14:	d003      	beq.n	8002e1e <I2C_IsErrorOccurred+0xfa>
 8002e16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d09d      	beq.n	8002d5a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d103      	bne.n	8002e2e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	f043 0304 	orr.w	r3, r3, #4
 8002e34:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00b      	beq.n	8002e66 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00b      	beq.n	8002e88 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	f043 0308 	orr.w	r3, r3, #8
 8002e76:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00b      	beq.n	8002eaa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	f043 0302 	orr.w	r3, r3, #2
 8002e98:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ea2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002eaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01c      	beq.n	8002eec <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f7ff fe56 	bl	8002b64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6859      	ldr	r1, [r3, #4]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <I2C_IsErrorOccurred+0x1d4>)
 8002ec4:	400b      	ands	r3, r1
 8002ec6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002eec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3728      	adds	r7, #40	; 0x28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	fe00e800 	.word	0xfe00e800

08002efc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b087      	sub	sp, #28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	607b      	str	r3, [r7, #4]
 8002f06:	460b      	mov	r3, r1
 8002f08:	817b      	strh	r3, [r7, #10]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f0e:	897b      	ldrh	r3, [r7, #10]
 8002f10:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f14:	7a7b      	ldrb	r3, [r7, #9]
 8002f16:	041b      	lsls	r3, r3, #16
 8002f18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f1c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f2a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	0d5b      	lsrs	r3, r3, #21
 8002f36:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002f3a:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <I2C_TransferConfig+0x60>)
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	ea02 0103 	and.w	r1, r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f4e:	bf00      	nop
 8002f50:	371c      	adds	r7, #28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	03ff63ff 	.word	0x03ff63ff

08002f60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	d138      	bne.n	8002fe8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e032      	b.n	8002fea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2224      	movs	r2, #36	; 0x24
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0201 	bic.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6819      	ldr	r1, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	e000      	b.n	8002fea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fe8:	2302      	movs	r3, #2
  }
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b085      	sub	sp, #20
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
 8002ffe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b20      	cmp	r3, #32
 800300a:	d139      	bne.n	8003080 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003012:	2b01      	cmp	r3, #1
 8003014:	d101      	bne.n	800301a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003016:	2302      	movs	r3, #2
 8003018:	e033      	b.n	8003082 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2224      	movs	r2, #36	; 0x24
 8003026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0201 	bic.w	r2, r2, #1
 8003038:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003048:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	021b      	lsls	r3, r3, #8
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4313      	orrs	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0201 	orr.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	e000      	b.n	8003082 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003080:	2302      	movs	r3, #2
  }
}
 8003082:	4618      	mov	r0, r3
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
	...

08003090 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003094:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40007000 	.word	0x40007000

080030ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ba:	d130      	bne.n	800311e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80030bc:	4b23      	ldr	r3, [pc, #140]	; (800314c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030c8:	d038      	beq.n	800313c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030ca:	4b20      	ldr	r3, [pc, #128]	; (800314c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030d2:	4a1e      	ldr	r2, [pc, #120]	; (800314c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030da:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2232      	movs	r2, #50	; 0x32
 80030e0:	fb02 f303 	mul.w	r3, r2, r3
 80030e4:	4a1b      	ldr	r2, [pc, #108]	; (8003154 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80030e6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ea:	0c9b      	lsrs	r3, r3, #18
 80030ec:	3301      	adds	r3, #1
 80030ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030f0:	e002      	b.n	80030f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	3b01      	subs	r3, #1
 80030f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030f8:	4b14      	ldr	r3, [pc, #80]	; (800314c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003104:	d102      	bne.n	800310c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f2      	bne.n	80030f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800310c:	4b0f      	ldr	r3, [pc, #60]	; (800314c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003118:	d110      	bne.n	800313c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e00f      	b.n	800313e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800311e:	4b0b      	ldr	r3, [pc, #44]	; (800314c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312a:	d007      	beq.n	800313c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800312c:	4b07      	ldr	r3, [pc, #28]	; (800314c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003134:	4a05      	ldr	r2, [pc, #20]	; (800314c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003136:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800313a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40007000 	.word	0x40007000
 8003150:	2000001c 	.word	0x2000001c
 8003154:	431bde83 	.word	0x431bde83

08003158 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e3ca      	b.n	8003900 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800316a:	4b97      	ldr	r3, [pc, #604]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 030c 	and.w	r3, r3, #12
 8003172:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003174:	4b94      	ldr	r3, [pc, #592]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0303 	and.w	r3, r3, #3
 800317c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0310 	and.w	r3, r3, #16
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 80e4 	beq.w	8003354 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d007      	beq.n	80031a2 <HAL_RCC_OscConfig+0x4a>
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	2b0c      	cmp	r3, #12
 8003196:	f040 808b 	bne.w	80032b0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2b01      	cmp	r3, #1
 800319e:	f040 8087 	bne.w	80032b0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031a2:	4b89      	ldr	r3, [pc, #548]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d005      	beq.n	80031ba <HAL_RCC_OscConfig+0x62>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e3a2      	b.n	8003900 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1a      	ldr	r2, [r3, #32]
 80031be:	4b82      	ldr	r3, [pc, #520]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d004      	beq.n	80031d4 <HAL_RCC_OscConfig+0x7c>
 80031ca:	4b7f      	ldr	r3, [pc, #508]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031d2:	e005      	b.n	80031e0 <HAL_RCC_OscConfig+0x88>
 80031d4:	4b7c      	ldr	r3, [pc, #496]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80031d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031da:	091b      	lsrs	r3, r3, #4
 80031dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d223      	bcs.n	800322c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 fd55 	bl	8003c98 <RCC_SetFlashLatencyFromMSIRange>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e383      	b.n	8003900 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031f8:	4b73      	ldr	r3, [pc, #460]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a72      	ldr	r2, [pc, #456]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80031fe:	f043 0308 	orr.w	r3, r3, #8
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	4b70      	ldr	r3, [pc, #448]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	496d      	ldr	r1, [pc, #436]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003212:	4313      	orrs	r3, r2
 8003214:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003216:	4b6c      	ldr	r3, [pc, #432]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	021b      	lsls	r3, r3, #8
 8003224:	4968      	ldr	r1, [pc, #416]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003226:	4313      	orrs	r3, r2
 8003228:	604b      	str	r3, [r1, #4]
 800322a:	e025      	b.n	8003278 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800322c:	4b66      	ldr	r3, [pc, #408]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a65      	ldr	r2, [pc, #404]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003232:	f043 0308 	orr.w	r3, r3, #8
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	4b63      	ldr	r3, [pc, #396]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	4960      	ldr	r1, [pc, #384]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003246:	4313      	orrs	r3, r2
 8003248:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800324a:	4b5f      	ldr	r3, [pc, #380]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	495b      	ldr	r1, [pc, #364]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 800325a:	4313      	orrs	r3, r2
 800325c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d109      	bne.n	8003278 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	4618      	mov	r0, r3
 800326a:	f000 fd15 	bl	8003c98 <RCC_SetFlashLatencyFromMSIRange>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e343      	b.n	8003900 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003278:	f000 fc4a 	bl	8003b10 <HAL_RCC_GetSysClockFreq>
 800327c:	4602      	mov	r2, r0
 800327e:	4b52      	ldr	r3, [pc, #328]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	091b      	lsrs	r3, r3, #4
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	4950      	ldr	r1, [pc, #320]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 800328a:	5ccb      	ldrb	r3, [r1, r3]
 800328c:	f003 031f 	and.w	r3, r3, #31
 8003290:	fa22 f303 	lsr.w	r3, r2, r3
 8003294:	4a4e      	ldr	r2, [pc, #312]	; (80033d0 <HAL_RCC_OscConfig+0x278>)
 8003296:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003298:	4b4e      	ldr	r3, [pc, #312]	; (80033d4 <HAL_RCC_OscConfig+0x27c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7fe fdcb 	bl	8001e38 <HAL_InitTick>
 80032a2:	4603      	mov	r3, r0
 80032a4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d052      	beq.n	8003352 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	e327      	b.n	8003900 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d032      	beq.n	800331e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032b8:	4b43      	ldr	r3, [pc, #268]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a42      	ldr	r2, [pc, #264]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032c4:	f7fe fe08 	bl	8001ed8 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032cc:	f7fe fe04 	bl	8001ed8 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e310      	b.n	8003900 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032de:	4b3a      	ldr	r3, [pc, #232]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032ea:	4b37      	ldr	r3, [pc, #220]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a36      	ldr	r2, [pc, #216]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80032f0:	f043 0308 	orr.w	r3, r3, #8
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	4b34      	ldr	r3, [pc, #208]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	4931      	ldr	r1, [pc, #196]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003304:	4313      	orrs	r3, r2
 8003306:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003308:	4b2f      	ldr	r3, [pc, #188]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	021b      	lsls	r3, r3, #8
 8003316:	492c      	ldr	r1, [pc, #176]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003318:	4313      	orrs	r3, r2
 800331a:	604b      	str	r3, [r1, #4]
 800331c:	e01a      	b.n	8003354 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800331e:	4b2a      	ldr	r3, [pc, #168]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a29      	ldr	r2, [pc, #164]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800332a:	f7fe fdd5 	bl	8001ed8 <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003332:	f7fe fdd1 	bl	8001ed8 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e2dd      	b.n	8003900 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003344:	4b20      	ldr	r3, [pc, #128]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1f0      	bne.n	8003332 <HAL_RCC_OscConfig+0x1da>
 8003350:	e000      	b.n	8003354 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003352:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d074      	beq.n	800344a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	2b08      	cmp	r3, #8
 8003364:	d005      	beq.n	8003372 <HAL_RCC_OscConfig+0x21a>
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	2b0c      	cmp	r3, #12
 800336a:	d10e      	bne.n	800338a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	2b03      	cmp	r3, #3
 8003370:	d10b      	bne.n	800338a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003372:	4b15      	ldr	r3, [pc, #84]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d064      	beq.n	8003448 <HAL_RCC_OscConfig+0x2f0>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d160      	bne.n	8003448 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e2ba      	b.n	8003900 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003392:	d106      	bne.n	80033a2 <HAL_RCC_OscConfig+0x24a>
 8003394:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a0b      	ldr	r2, [pc, #44]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 800339a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	e026      	b.n	80033f0 <HAL_RCC_OscConfig+0x298>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033aa:	d115      	bne.n	80033d8 <HAL_RCC_OscConfig+0x280>
 80033ac:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a05      	ldr	r2, [pc, #20]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80033b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033b6:	6013      	str	r3, [r2, #0]
 80033b8:	4b03      	ldr	r3, [pc, #12]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a02      	ldr	r2, [pc, #8]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80033be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	e014      	b.n	80033f0 <HAL_RCC_OscConfig+0x298>
 80033c6:	bf00      	nop
 80033c8:	40021000 	.word	0x40021000
 80033cc:	080084c4 	.word	0x080084c4
 80033d0:	2000001c 	.word	0x2000001c
 80033d4:	20000020 	.word	0x20000020
 80033d8:	4ba0      	ldr	r3, [pc, #640]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a9f      	ldr	r2, [pc, #636]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80033de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	4b9d      	ldr	r3, [pc, #628]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a9c      	ldr	r2, [pc, #624]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80033ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d013      	beq.n	8003420 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f8:	f7fe fd6e 	bl	8001ed8 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003400:	f7fe fd6a 	bl	8001ed8 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b64      	cmp	r3, #100	; 0x64
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e276      	b.n	8003900 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003412:	4b92      	ldr	r3, [pc, #584]	; (800365c <HAL_RCC_OscConfig+0x504>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f0      	beq.n	8003400 <HAL_RCC_OscConfig+0x2a8>
 800341e:	e014      	b.n	800344a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003420:	f7fe fd5a 	bl	8001ed8 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003428:	f7fe fd56 	bl	8001ed8 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e262      	b.n	8003900 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800343a:	4b88      	ldr	r3, [pc, #544]	; (800365c <HAL_RCC_OscConfig+0x504>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0x2d0>
 8003446:	e000      	b.n	800344a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d060      	beq.n	8003518 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	2b04      	cmp	r3, #4
 800345a:	d005      	beq.n	8003468 <HAL_RCC_OscConfig+0x310>
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	2b0c      	cmp	r3, #12
 8003460:	d119      	bne.n	8003496 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d116      	bne.n	8003496 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003468:	4b7c      	ldr	r3, [pc, #496]	; (800365c <HAL_RCC_OscConfig+0x504>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_RCC_OscConfig+0x328>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e23f      	b.n	8003900 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003480:	4b76      	ldr	r3, [pc, #472]	; (800365c <HAL_RCC_OscConfig+0x504>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	061b      	lsls	r3, r3, #24
 800348e:	4973      	ldr	r1, [pc, #460]	; (800365c <HAL_RCC_OscConfig+0x504>)
 8003490:	4313      	orrs	r3, r2
 8003492:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003494:	e040      	b.n	8003518 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d023      	beq.n	80034e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800349e:	4b6f      	ldr	r3, [pc, #444]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a6e      	ldr	r2, [pc, #440]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80034a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034aa:	f7fe fd15 	bl	8001ed8 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b2:	f7fe fd11 	bl	8001ed8 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e21d      	b.n	8003900 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034c4:	4b65      	ldr	r3, [pc, #404]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d0:	4b62      	ldr	r3, [pc, #392]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	061b      	lsls	r3, r3, #24
 80034de:	495f      	ldr	r1, [pc, #380]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	604b      	str	r3, [r1, #4]
 80034e4:	e018      	b.n	8003518 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034e6:	4b5d      	ldr	r3, [pc, #372]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a5c      	ldr	r2, [pc, #368]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80034ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f2:	f7fe fcf1 	bl	8001ed8 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034fa:	f7fe fced 	bl	8001ed8 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e1f9      	b.n	8003900 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800350c:	4b53      	ldr	r3, [pc, #332]	; (800365c <HAL_RCC_OscConfig+0x504>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1f0      	bne.n	80034fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	d03c      	beq.n	800359e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d01c      	beq.n	8003566 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800352c:	4b4b      	ldr	r3, [pc, #300]	; (800365c <HAL_RCC_OscConfig+0x504>)
 800352e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003532:	4a4a      	ldr	r2, [pc, #296]	; (800365c <HAL_RCC_OscConfig+0x504>)
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353c:	f7fe fccc 	bl	8001ed8 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003544:	f7fe fcc8 	bl	8001ed8 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e1d4      	b.n	8003900 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003556:	4b41      	ldr	r3, [pc, #260]	; (800365c <HAL_RCC_OscConfig+0x504>)
 8003558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0ef      	beq.n	8003544 <HAL_RCC_OscConfig+0x3ec>
 8003564:	e01b      	b.n	800359e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003566:	4b3d      	ldr	r3, [pc, #244]	; (800365c <HAL_RCC_OscConfig+0x504>)
 8003568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800356c:	4a3b      	ldr	r2, [pc, #236]	; (800365c <HAL_RCC_OscConfig+0x504>)
 800356e:	f023 0301 	bic.w	r3, r3, #1
 8003572:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003576:	f7fe fcaf 	bl	8001ed8 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800357e:	f7fe fcab 	bl	8001ed8 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e1b7      	b.n	8003900 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003590:	4b32      	ldr	r3, [pc, #200]	; (800365c <HAL_RCC_OscConfig+0x504>)
 8003592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1ef      	bne.n	800357e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0304 	and.w	r3, r3, #4
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 80a6 	beq.w	80036f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ac:	2300      	movs	r3, #0
 80035ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035b0:	4b2a      	ldr	r3, [pc, #168]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80035b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10d      	bne.n	80035d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035bc:	4b27      	ldr	r3, [pc, #156]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80035be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c0:	4a26      	ldr	r2, [pc, #152]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80035c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c6:	6593      	str	r3, [r2, #88]	; 0x58
 80035c8:	4b24      	ldr	r3, [pc, #144]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80035ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d4:	2301      	movs	r3, #1
 80035d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035d8:	4b21      	ldr	r3, [pc, #132]	; (8003660 <HAL_RCC_OscConfig+0x508>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d118      	bne.n	8003616 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035e4:	4b1e      	ldr	r3, [pc, #120]	; (8003660 <HAL_RCC_OscConfig+0x508>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a1d      	ldr	r2, [pc, #116]	; (8003660 <HAL_RCC_OscConfig+0x508>)
 80035ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f0:	f7fe fc72 	bl	8001ed8 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f8:	f7fe fc6e 	bl	8001ed8 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e17a      	b.n	8003900 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800360a:	4b15      	ldr	r3, [pc, #84]	; (8003660 <HAL_RCC_OscConfig+0x508>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d108      	bne.n	8003630 <HAL_RCC_OscConfig+0x4d8>
 800361e:	4b0f      	ldr	r3, [pc, #60]	; (800365c <HAL_RCC_OscConfig+0x504>)
 8003620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003624:	4a0d      	ldr	r2, [pc, #52]	; (800365c <HAL_RCC_OscConfig+0x504>)
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800362e:	e029      	b.n	8003684 <HAL_RCC_OscConfig+0x52c>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b05      	cmp	r3, #5
 8003636:	d115      	bne.n	8003664 <HAL_RCC_OscConfig+0x50c>
 8003638:	4b08      	ldr	r3, [pc, #32]	; (800365c <HAL_RCC_OscConfig+0x504>)
 800363a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363e:	4a07      	ldr	r2, [pc, #28]	; (800365c <HAL_RCC_OscConfig+0x504>)
 8003640:	f043 0304 	orr.w	r3, r3, #4
 8003644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003648:	4b04      	ldr	r3, [pc, #16]	; (800365c <HAL_RCC_OscConfig+0x504>)
 800364a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364e:	4a03      	ldr	r2, [pc, #12]	; (800365c <HAL_RCC_OscConfig+0x504>)
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003658:	e014      	b.n	8003684 <HAL_RCC_OscConfig+0x52c>
 800365a:	bf00      	nop
 800365c:	40021000 	.word	0x40021000
 8003660:	40007000 	.word	0x40007000
 8003664:	4b9c      	ldr	r3, [pc, #624]	; (80038d8 <HAL_RCC_OscConfig+0x780>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366a:	4a9b      	ldr	r2, [pc, #620]	; (80038d8 <HAL_RCC_OscConfig+0x780>)
 800366c:	f023 0301 	bic.w	r3, r3, #1
 8003670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003674:	4b98      	ldr	r3, [pc, #608]	; (80038d8 <HAL_RCC_OscConfig+0x780>)
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367a:	4a97      	ldr	r2, [pc, #604]	; (80038d8 <HAL_RCC_OscConfig+0x780>)
 800367c:	f023 0304 	bic.w	r3, r3, #4
 8003680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d016      	beq.n	80036ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800368c:	f7fe fc24 	bl	8001ed8 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003692:	e00a      	b.n	80036aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003694:	f7fe fc20 	bl	8001ed8 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e12a      	b.n	8003900 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036aa:	4b8b      	ldr	r3, [pc, #556]	; (80038d8 <HAL_RCC_OscConfig+0x780>)
 80036ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0ed      	beq.n	8003694 <HAL_RCC_OscConfig+0x53c>
 80036b8:	e015      	b.n	80036e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ba:	f7fe fc0d 	bl	8001ed8 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036c0:	e00a      	b.n	80036d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c2:	f7fe fc09 	bl	8001ed8 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e113      	b.n	8003900 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036d8:	4b7f      	ldr	r3, [pc, #508]	; (80038d8 <HAL_RCC_OscConfig+0x780>)
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1ed      	bne.n	80036c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036e6:	7ffb      	ldrb	r3, [r7, #31]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d105      	bne.n	80036f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ec:	4b7a      	ldr	r3, [pc, #488]	; (80038d8 <HAL_RCC_OscConfig+0x780>)
 80036ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f0:	4a79      	ldr	r2, [pc, #484]	; (80038d8 <HAL_RCC_OscConfig+0x780>)
 80036f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036f6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 80fe 	beq.w	80038fe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003706:	2b02      	cmp	r3, #2
 8003708:	f040 80d0 	bne.w	80038ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800370c:	4b72      	ldr	r3, [pc, #456]	; (80038d8 <HAL_RCC_OscConfig+0x780>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f003 0203 	and.w	r2, r3, #3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	429a      	cmp	r2, r3
 800371e:	d130      	bne.n	8003782 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	3b01      	subs	r3, #1
 800372c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800372e:	429a      	cmp	r2, r3
 8003730:	d127      	bne.n	8003782 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800373e:	429a      	cmp	r2, r3
 8003740:	d11f      	bne.n	8003782 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800374c:	2a07      	cmp	r2, #7
 800374e:	bf14      	ite	ne
 8003750:	2201      	movne	r2, #1
 8003752:	2200      	moveq	r2, #0
 8003754:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003756:	4293      	cmp	r3, r2
 8003758:	d113      	bne.n	8003782 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003764:	085b      	lsrs	r3, r3, #1
 8003766:	3b01      	subs	r3, #1
 8003768:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800376a:	429a      	cmp	r2, r3
 800376c:	d109      	bne.n	8003782 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	085b      	lsrs	r3, r3, #1
 800377a:	3b01      	subs	r3, #1
 800377c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800377e:	429a      	cmp	r2, r3
 8003780:	d06e      	beq.n	8003860 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	2b0c      	cmp	r3, #12
 8003786:	d069      	beq.n	800385c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003788:	4b53      	ldr	r3, [pc, #332]	; (80038d8 <HAL_RCC_OscConfig+0x780>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d105      	bne.n	80037a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003794:	4b50      	ldr	r3, [pc, #320]	; (80038d8 <HAL_RCC_OscConfig+0x780>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0ad      	b.n	8003900 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037a4:	4b4c      	ldr	r3, [pc, #304]	; (80038d8 <HAL_RCC_OscConfig+0x780>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a4b      	ldr	r2, [pc, #300]	; (80038d8 <HAL_RCC_OscConfig+0x780>)
 80037aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037b0:	f7fe fb92 	bl	8001ed8 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b8:	f7fe fb8e 	bl	8001ed8 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e09a      	b.n	8003900 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ca:	4b43      	ldr	r3, [pc, #268]	; (80038d8 <HAL_RCC_OscConfig+0x780>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037d6:	4b40      	ldr	r3, [pc, #256]	; (80038d8 <HAL_RCC_OscConfig+0x780>)
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	4b40      	ldr	r3, [pc, #256]	; (80038dc <HAL_RCC_OscConfig+0x784>)
 80037dc:	4013      	ands	r3, r2
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037e6:	3a01      	subs	r2, #1
 80037e8:	0112      	lsls	r2, r2, #4
 80037ea:	4311      	orrs	r1, r2
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037f0:	0212      	lsls	r2, r2, #8
 80037f2:	4311      	orrs	r1, r2
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037f8:	0852      	lsrs	r2, r2, #1
 80037fa:	3a01      	subs	r2, #1
 80037fc:	0552      	lsls	r2, r2, #21
 80037fe:	4311      	orrs	r1, r2
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003804:	0852      	lsrs	r2, r2, #1
 8003806:	3a01      	subs	r2, #1
 8003808:	0652      	lsls	r2, r2, #25
 800380a:	4311      	orrs	r1, r2
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003810:	0912      	lsrs	r2, r2, #4
 8003812:	0452      	lsls	r2, r2, #17
 8003814:	430a      	orrs	r2, r1
 8003816:	4930      	ldr	r1, [pc, #192]	; (80038d8 <HAL_RCC_OscConfig+0x780>)
 8003818:	4313      	orrs	r3, r2
 800381a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800381c:	4b2e      	ldr	r3, [pc, #184]	; (80038d8 <HAL_RCC_OscConfig+0x780>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a2d      	ldr	r2, [pc, #180]	; (80038d8 <HAL_RCC_OscConfig+0x780>)
 8003822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003826:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003828:	4b2b      	ldr	r3, [pc, #172]	; (80038d8 <HAL_RCC_OscConfig+0x780>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	4a2a      	ldr	r2, [pc, #168]	; (80038d8 <HAL_RCC_OscConfig+0x780>)
 800382e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003832:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003834:	f7fe fb50 	bl	8001ed8 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800383c:	f7fe fb4c 	bl	8001ed8 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e058      	b.n	8003900 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800384e:	4b22      	ldr	r3, [pc, #136]	; (80038d8 <HAL_RCC_OscConfig+0x780>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0f0      	beq.n	800383c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800385a:	e050      	b.n	80038fe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e04f      	b.n	8003900 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003860:	4b1d      	ldr	r3, [pc, #116]	; (80038d8 <HAL_RCC_OscConfig+0x780>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d148      	bne.n	80038fe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800386c:	4b1a      	ldr	r3, [pc, #104]	; (80038d8 <HAL_RCC_OscConfig+0x780>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a19      	ldr	r2, [pc, #100]	; (80038d8 <HAL_RCC_OscConfig+0x780>)
 8003872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003876:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003878:	4b17      	ldr	r3, [pc, #92]	; (80038d8 <HAL_RCC_OscConfig+0x780>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	4a16      	ldr	r2, [pc, #88]	; (80038d8 <HAL_RCC_OscConfig+0x780>)
 800387e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003882:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003884:	f7fe fb28 	bl	8001ed8 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800388c:	f7fe fb24 	bl	8001ed8 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e030      	b.n	8003900 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800389e:	4b0e      	ldr	r3, [pc, #56]	; (80038d8 <HAL_RCC_OscConfig+0x780>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0f0      	beq.n	800388c <HAL_RCC_OscConfig+0x734>
 80038aa:	e028      	b.n	80038fe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	2b0c      	cmp	r3, #12
 80038b0:	d023      	beq.n	80038fa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b2:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <HAL_RCC_OscConfig+0x780>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a08      	ldr	r2, [pc, #32]	; (80038d8 <HAL_RCC_OscConfig+0x780>)
 80038b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038be:	f7fe fb0b 	bl	8001ed8 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038c4:	e00c      	b.n	80038e0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c6:	f7fe fb07 	bl	8001ed8 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d905      	bls.n	80038e0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e013      	b.n	8003900 <HAL_RCC_OscConfig+0x7a8>
 80038d8:	40021000 	.word	0x40021000
 80038dc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e0:	4b09      	ldr	r3, [pc, #36]	; (8003908 <HAL_RCC_OscConfig+0x7b0>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1ec      	bne.n	80038c6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80038ec:	4b06      	ldr	r3, [pc, #24]	; (8003908 <HAL_RCC_OscConfig+0x7b0>)
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	4905      	ldr	r1, [pc, #20]	; (8003908 <HAL_RCC_OscConfig+0x7b0>)
 80038f2:	4b06      	ldr	r3, [pc, #24]	; (800390c <HAL_RCC_OscConfig+0x7b4>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	60cb      	str	r3, [r1, #12]
 80038f8:	e001      	b.n	80038fe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3720      	adds	r7, #32
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40021000 	.word	0x40021000
 800390c:	feeefffc 	.word	0xfeeefffc

08003910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0e7      	b.n	8003af4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003924:	4b75      	ldr	r3, [pc, #468]	; (8003afc <HAL_RCC_ClockConfig+0x1ec>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d910      	bls.n	8003954 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003932:	4b72      	ldr	r3, [pc, #456]	; (8003afc <HAL_RCC_ClockConfig+0x1ec>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f023 0207 	bic.w	r2, r3, #7
 800393a:	4970      	ldr	r1, [pc, #448]	; (8003afc <HAL_RCC_ClockConfig+0x1ec>)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	4313      	orrs	r3, r2
 8003940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003942:	4b6e      	ldr	r3, [pc, #440]	; (8003afc <HAL_RCC_ClockConfig+0x1ec>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d001      	beq.n	8003954 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e0cf      	b.n	8003af4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d010      	beq.n	8003982 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	4b66      	ldr	r3, [pc, #408]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800396c:	429a      	cmp	r2, r3
 800396e:	d908      	bls.n	8003982 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003970:	4b63      	ldr	r3, [pc, #396]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	4960      	ldr	r1, [pc, #384]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 800397e:	4313      	orrs	r3, r2
 8003980:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d04c      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b03      	cmp	r3, #3
 8003994:	d107      	bne.n	80039a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003996:	4b5a      	ldr	r3, [pc, #360]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d121      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e0a6      	b.n	8003af4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d107      	bne.n	80039be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ae:	4b54      	ldr	r3, [pc, #336]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d115      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e09a      	b.n	8003af4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d107      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039c6:	4b4e      	ldr	r3, [pc, #312]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d109      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e08e      	b.n	8003af4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039d6:	4b4a      	ldr	r3, [pc, #296]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e086      	b.n	8003af4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039e6:	4b46      	ldr	r3, [pc, #280]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f023 0203 	bic.w	r2, r3, #3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	4943      	ldr	r1, [pc, #268]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f8:	f7fe fa6e 	bl	8001ed8 <HAL_GetTick>
 80039fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fe:	e00a      	b.n	8003a16 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a00:	f7fe fa6a 	bl	8001ed8 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e06e      	b.n	8003af4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a16:	4b3a      	ldr	r3, [pc, #232]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 020c 	and.w	r2, r3, #12
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d1eb      	bne.n	8003a00 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d010      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	4b31      	ldr	r3, [pc, #196]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d208      	bcs.n	8003a56 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a44:	4b2e      	ldr	r3, [pc, #184]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	492b      	ldr	r1, [pc, #172]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a56:	4b29      	ldr	r3, [pc, #164]	; (8003afc <HAL_RCC_ClockConfig+0x1ec>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d210      	bcs.n	8003a86 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a64:	4b25      	ldr	r3, [pc, #148]	; (8003afc <HAL_RCC_ClockConfig+0x1ec>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f023 0207 	bic.w	r2, r3, #7
 8003a6c:	4923      	ldr	r1, [pc, #140]	; (8003afc <HAL_RCC_ClockConfig+0x1ec>)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a74:	4b21      	ldr	r3, [pc, #132]	; (8003afc <HAL_RCC_ClockConfig+0x1ec>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d001      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e036      	b.n	8003af4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0304 	and.w	r3, r3, #4
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d008      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a92:	4b1b      	ldr	r3, [pc, #108]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	4918      	ldr	r1, [pc, #96]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d009      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ab0:	4b13      	ldr	r3, [pc, #76]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	4910      	ldr	r1, [pc, #64]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ac4:	f000 f824 	bl	8003b10 <HAL_RCC_GetSysClockFreq>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	4b0d      	ldr	r3, [pc, #52]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	091b      	lsrs	r3, r3, #4
 8003ad0:	f003 030f 	and.w	r3, r3, #15
 8003ad4:	490b      	ldr	r1, [pc, #44]	; (8003b04 <HAL_RCC_ClockConfig+0x1f4>)
 8003ad6:	5ccb      	ldrb	r3, [r1, r3]
 8003ad8:	f003 031f 	and.w	r3, r3, #31
 8003adc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae0:	4a09      	ldr	r2, [pc, #36]	; (8003b08 <HAL_RCC_ClockConfig+0x1f8>)
 8003ae2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ae4:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <HAL_RCC_ClockConfig+0x1fc>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fe f9a5 	bl	8001e38 <HAL_InitTick>
 8003aee:	4603      	mov	r3, r0
 8003af0:	72fb      	strb	r3, [r7, #11]

  return status;
 8003af2:	7afb      	ldrb	r3, [r7, #11]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40022000 	.word	0x40022000
 8003b00:	40021000 	.word	0x40021000
 8003b04:	080084c4 	.word	0x080084c4
 8003b08:	2000001c 	.word	0x2000001c
 8003b0c:	20000020 	.word	0x20000020

08003b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b089      	sub	sp, #36	; 0x24
 8003b14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	61fb      	str	r3, [r7, #28]
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b1e:	4b3e      	ldr	r3, [pc, #248]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 030c 	and.w	r3, r3, #12
 8003b26:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b28:	4b3b      	ldr	r3, [pc, #236]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f003 0303 	and.w	r3, r3, #3
 8003b30:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <HAL_RCC_GetSysClockFreq+0x34>
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	2b0c      	cmp	r3, #12
 8003b3c:	d121      	bne.n	8003b82 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d11e      	bne.n	8003b82 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b44:	4b34      	ldr	r3, [pc, #208]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d107      	bne.n	8003b60 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b50:	4b31      	ldr	r3, [pc, #196]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b56:	0a1b      	lsrs	r3, r3, #8
 8003b58:	f003 030f 	and.w	r3, r3, #15
 8003b5c:	61fb      	str	r3, [r7, #28]
 8003b5e:	e005      	b.n	8003b6c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b60:	4b2d      	ldr	r3, [pc, #180]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b6c:	4a2b      	ldr	r2, [pc, #172]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b74:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10d      	bne.n	8003b98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b80:	e00a      	b.n	8003b98 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d102      	bne.n	8003b8e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b88:	4b25      	ldr	r3, [pc, #148]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b8a:	61bb      	str	r3, [r7, #24]
 8003b8c:	e004      	b.n	8003b98 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d101      	bne.n	8003b98 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b94:	4b23      	ldr	r3, [pc, #140]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b96:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	2b0c      	cmp	r3, #12
 8003b9c:	d134      	bne.n	8003c08 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b9e:	4b1e      	ldr	r3, [pc, #120]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d003      	beq.n	8003bb6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	d003      	beq.n	8003bbc <HAL_RCC_GetSysClockFreq+0xac>
 8003bb4:	e005      	b.n	8003bc2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003bb6:	4b1a      	ldr	r3, [pc, #104]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bb8:	617b      	str	r3, [r7, #20]
      break;
 8003bba:	e005      	b.n	8003bc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003bbc:	4b19      	ldr	r3, [pc, #100]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x114>)
 8003bbe:	617b      	str	r3, [r7, #20]
      break;
 8003bc0:	e002      	b.n	8003bc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	617b      	str	r3, [r7, #20]
      break;
 8003bc6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bc8:	4b13      	ldr	r3, [pc, #76]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	091b      	lsrs	r3, r3, #4
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003bd6:	4b10      	ldr	r3, [pc, #64]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	0a1b      	lsrs	r3, r3, #8
 8003bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	fb03 f202 	mul.w	r2, r3, r2
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bee:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	0e5b      	lsrs	r3, r3, #25
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c06:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c08:	69bb      	ldr	r3, [r7, #24]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3724      	adds	r7, #36	; 0x24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	080084dc 	.word	0x080084dc
 8003c20:	00f42400 	.word	0x00f42400
 8003c24:	007a1200 	.word	0x007a1200

08003c28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c2c:	4b03      	ldr	r3, [pc, #12]	; (8003c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	2000001c 	.word	0x2000001c

08003c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c44:	f7ff fff0 	bl	8003c28 <HAL_RCC_GetHCLKFreq>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	0a1b      	lsrs	r3, r3, #8
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	4904      	ldr	r1, [pc, #16]	; (8003c68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c56:	5ccb      	ldrb	r3, [r1, r3]
 8003c58:	f003 031f 	and.w	r3, r3, #31
 8003c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40021000 	.word	0x40021000
 8003c68:	080084d4 	.word	0x080084d4

08003c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c70:	f7ff ffda 	bl	8003c28 <HAL_RCC_GetHCLKFreq>
 8003c74:	4602      	mov	r2, r0
 8003c76:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	0adb      	lsrs	r3, r3, #11
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	4904      	ldr	r1, [pc, #16]	; (8003c94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c82:	5ccb      	ldrb	r3, [r1, r3]
 8003c84:	f003 031f 	and.w	r3, r3, #31
 8003c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40021000 	.word	0x40021000
 8003c94:	080084d4 	.word	0x080084d4

08003c98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ca4:	4b2a      	ldr	r3, [pc, #168]	; (8003d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003cb0:	f7ff f9ee 	bl	8003090 <HAL_PWREx_GetVoltageRange>
 8003cb4:	6178      	str	r0, [r7, #20]
 8003cb6:	e014      	b.n	8003ce2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cb8:	4b25      	ldr	r3, [pc, #148]	; (8003d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbc:	4a24      	ldr	r2, [pc, #144]	; (8003d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc2:	6593      	str	r3, [r2, #88]	; 0x58
 8003cc4:	4b22      	ldr	r3, [pc, #136]	; (8003d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003cd0:	f7ff f9de 	bl	8003090 <HAL_PWREx_GetVoltageRange>
 8003cd4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003cd6:	4b1e      	ldr	r3, [pc, #120]	; (8003d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cda:	4a1d      	ldr	r2, [pc, #116]	; (8003d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ce8:	d10b      	bne.n	8003d02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b80      	cmp	r3, #128	; 0x80
 8003cee:	d919      	bls.n	8003d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2ba0      	cmp	r3, #160	; 0xa0
 8003cf4:	d902      	bls.n	8003cfc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	e013      	b.n	8003d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	613b      	str	r3, [r7, #16]
 8003d00:	e010      	b.n	8003d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b80      	cmp	r3, #128	; 0x80
 8003d06:	d902      	bls.n	8003d0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d08:	2303      	movs	r3, #3
 8003d0a:	613b      	str	r3, [r7, #16]
 8003d0c:	e00a      	b.n	8003d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b80      	cmp	r3, #128	; 0x80
 8003d12:	d102      	bne.n	8003d1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d14:	2302      	movs	r3, #2
 8003d16:	613b      	str	r3, [r7, #16]
 8003d18:	e004      	b.n	8003d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b70      	cmp	r3, #112	; 0x70
 8003d1e:	d101      	bne.n	8003d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d20:	2301      	movs	r3, #1
 8003d22:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f023 0207 	bic.w	r2, r3, #7
 8003d2c:	4909      	ldr	r1, [pc, #36]	; (8003d54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d34:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d001      	beq.n	8003d46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40021000 	.word	0x40021000
 8003d54:	40022000 	.word	0x40022000

08003d58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d60:	2300      	movs	r3, #0
 8003d62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d64:	2300      	movs	r3, #0
 8003d66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d041      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d7c:	d02a      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003d7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d82:	d824      	bhi.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d88:	d008      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d8e:	d81e      	bhi.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003d94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d98:	d010      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d9a:	e018      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d9c:	4b86      	ldr	r3, [pc, #536]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	4a85      	ldr	r2, [pc, #532]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003da8:	e015      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3304      	adds	r3, #4
 8003dae:	2100      	movs	r1, #0
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 fabb 	bl	800432c <RCCEx_PLLSAI1_Config>
 8003db6:	4603      	mov	r3, r0
 8003db8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dba:	e00c      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3320      	adds	r3, #32
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fba6 	bl	8004514 <RCCEx_PLLSAI2_Config>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dcc:	e003      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	74fb      	strb	r3, [r7, #19]
      break;
 8003dd2:	e000      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003dd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dd6:	7cfb      	ldrb	r3, [r7, #19]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10b      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ddc:	4b76      	ldr	r3, [pc, #472]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dea:	4973      	ldr	r1, [pc, #460]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003df2:	e001      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df4:	7cfb      	ldrb	r3, [r7, #19]
 8003df6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d041      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e0c:	d02a      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003e0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e12:	d824      	bhi.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e18:	d008      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e1e:	d81e      	bhi.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00a      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e28:	d010      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e2a:	e018      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e2c:	4b62      	ldr	r3, [pc, #392]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	4a61      	ldr	r2, [pc, #388]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e36:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e38:	e015      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	2100      	movs	r1, #0
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 fa73 	bl	800432c <RCCEx_PLLSAI1_Config>
 8003e46:	4603      	mov	r3, r0
 8003e48:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e4a:	e00c      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3320      	adds	r3, #32
 8003e50:	2100      	movs	r1, #0
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 fb5e 	bl	8004514 <RCCEx_PLLSAI2_Config>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e5c:	e003      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	74fb      	strb	r3, [r7, #19]
      break;
 8003e62:	e000      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003e64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e66:	7cfb      	ldrb	r3, [r7, #19]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10b      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e6c:	4b52      	ldr	r3, [pc, #328]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e72:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e7a:	494f      	ldr	r1, [pc, #316]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e82:	e001      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e84:	7cfb      	ldrb	r3, [r7, #19]
 8003e86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 80a0 	beq.w	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e96:	2300      	movs	r3, #0
 8003e98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e9a:	4b47      	ldr	r3, [pc, #284]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00d      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eb0:	4b41      	ldr	r3, [pc, #260]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb4:	4a40      	ldr	r2, [pc, #256]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eba:	6593      	str	r3, [r2, #88]	; 0x58
 8003ebc:	4b3e      	ldr	r3, [pc, #248]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec4:	60bb      	str	r3, [r7, #8]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ecc:	4b3b      	ldr	r3, [pc, #236]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a3a      	ldr	r2, [pc, #232]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ed8:	f7fd fffe 	bl	8001ed8 <HAL_GetTick>
 8003edc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ede:	e009      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee0:	f7fd fffa 	bl	8001ed8 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d902      	bls.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	74fb      	strb	r3, [r7, #19]
        break;
 8003ef2:	e005      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ef4:	4b31      	ldr	r3, [pc, #196]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0ef      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003f00:	7cfb      	ldrb	r3, [r7, #19]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d15c      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f06:	4b2c      	ldr	r3, [pc, #176]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d01f      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d019      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f24:	4b24      	ldr	r3, [pc, #144]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f30:	4b21      	ldr	r3, [pc, #132]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f36:	4a20      	ldr	r2, [pc, #128]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f40:	4b1d      	ldr	r3, [pc, #116]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f46:	4a1c      	ldr	r2, [pc, #112]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f50:	4a19      	ldr	r2, [pc, #100]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d016      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f62:	f7fd ffb9 	bl	8001ed8 <HAL_GetTick>
 8003f66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f68:	e00b      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f6a:	f7fd ffb5 	bl	8001ed8 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d902      	bls.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	74fb      	strb	r3, [r7, #19]
            break;
 8003f80:	e006      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f82:	4b0d      	ldr	r3, [pc, #52]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0ec      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003f90:	7cfb      	ldrb	r3, [r7, #19]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10c      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f96:	4b08      	ldr	r3, [pc, #32]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fa6:	4904      	ldr	r1, [pc, #16]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003fae:	e009      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fb0:	7cfb      	ldrb	r3, [r7, #19]
 8003fb2:	74bb      	strb	r3, [r7, #18]
 8003fb4:	e006      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003fb6:	bf00      	nop
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc0:	7cfb      	ldrb	r3, [r7, #19]
 8003fc2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fc4:	7c7b      	ldrb	r3, [r7, #17]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d105      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fca:	4b9e      	ldr	r3, [pc, #632]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fce:	4a9d      	ldr	r2, [pc, #628]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fd4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fe2:	4b98      	ldr	r3, [pc, #608]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe8:	f023 0203 	bic.w	r2, r3, #3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff0:	4994      	ldr	r1, [pc, #592]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00a      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004004:	4b8f      	ldr	r3, [pc, #572]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400a:	f023 020c 	bic.w	r2, r3, #12
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004012:	498c      	ldr	r1, [pc, #560]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0304 	and.w	r3, r3, #4
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004026:	4b87      	ldr	r3, [pc, #540]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	4983      	ldr	r1, [pc, #524]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00a      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004048:	4b7e      	ldr	r3, [pc, #504]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004056:	497b      	ldr	r1, [pc, #492]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0310 	and.w	r3, r3, #16
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800406a:	4b76      	ldr	r3, [pc, #472]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004070:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004078:	4972      	ldr	r1, [pc, #456]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0320 	and.w	r3, r3, #32
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00a      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800408c:	4b6d      	ldr	r3, [pc, #436]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800408e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004092:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800409a:	496a      	ldr	r1, [pc, #424]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800409c:	4313      	orrs	r3, r2
 800409e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040ae:	4b65      	ldr	r3, [pc, #404]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040bc:	4961      	ldr	r1, [pc, #388]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00a      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040d0:	4b5c      	ldr	r3, [pc, #368]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040de:	4959      	ldr	r1, [pc, #356]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00a      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040f2:	4b54      	ldr	r3, [pc, #336]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004100:	4950      	ldr	r1, [pc, #320]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00a      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004114:	4b4b      	ldr	r3, [pc, #300]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004122:	4948      	ldr	r1, [pc, #288]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004136:	4b43      	ldr	r3, [pc, #268]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004144:	493f      	ldr	r1, [pc, #252]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d028      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004158:	4b3a      	ldr	r3, [pc, #232]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004166:	4937      	ldr	r1, [pc, #220]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004172:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004176:	d106      	bne.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004178:	4b32      	ldr	r3, [pc, #200]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4a31      	ldr	r2, [pc, #196]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004182:	60d3      	str	r3, [r2, #12]
 8004184:	e011      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800418a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800418e:	d10c      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3304      	adds	r3, #4
 8004194:	2101      	movs	r1, #1
 8004196:	4618      	mov	r0, r3
 8004198:	f000 f8c8 	bl	800432c <RCCEx_PLLSAI1_Config>
 800419c:	4603      	mov	r3, r0
 800419e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80041a0:	7cfb      	ldrb	r3, [r7, #19]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80041a6:	7cfb      	ldrb	r3, [r7, #19]
 80041a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d028      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041b6:	4b23      	ldr	r3, [pc, #140]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c4:	491f      	ldr	r1, [pc, #124]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041d4:	d106      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041d6:	4b1b      	ldr	r3, [pc, #108]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	4a1a      	ldr	r2, [pc, #104]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041e0:	60d3      	str	r3, [r2, #12]
 80041e2:	e011      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041ec:	d10c      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3304      	adds	r3, #4
 80041f2:	2101      	movs	r1, #1
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 f899 	bl	800432c <RCCEx_PLLSAI1_Config>
 80041fa:	4603      	mov	r3, r0
 80041fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041fe:	7cfb      	ldrb	r3, [r7, #19]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004204:	7cfb      	ldrb	r3, [r7, #19]
 8004206:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d02b      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004214:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004222:	4908      	ldr	r1, [pc, #32]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004224:	4313      	orrs	r3, r2
 8004226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800422e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004232:	d109      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004234:	4b03      	ldr	r3, [pc, #12]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	4a02      	ldr	r2, [pc, #8]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800423e:	60d3      	str	r3, [r2, #12]
 8004240:	e014      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004242:	bf00      	nop
 8004244:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800424c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004250:	d10c      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	3304      	adds	r3, #4
 8004256:	2101      	movs	r1, #1
 8004258:	4618      	mov	r0, r3
 800425a:	f000 f867 	bl	800432c <RCCEx_PLLSAI1_Config>
 800425e:	4603      	mov	r3, r0
 8004260:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004262:	7cfb      	ldrb	r3, [r7, #19]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004268:	7cfb      	ldrb	r3, [r7, #19]
 800426a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d02f      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004278:	4b2b      	ldr	r3, [pc, #172]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800427a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004286:	4928      	ldr	r1, [pc, #160]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004288:	4313      	orrs	r3, r2
 800428a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004292:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004296:	d10d      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3304      	adds	r3, #4
 800429c:	2102      	movs	r1, #2
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 f844 	bl	800432c <RCCEx_PLLSAI1_Config>
 80042a4:	4603      	mov	r3, r0
 80042a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042a8:	7cfb      	ldrb	r3, [r7, #19]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d014      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80042ae:	7cfb      	ldrb	r3, [r7, #19]
 80042b0:	74bb      	strb	r3, [r7, #18]
 80042b2:	e011      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042bc:	d10c      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3320      	adds	r3, #32
 80042c2:	2102      	movs	r1, #2
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 f925 	bl	8004514 <RCCEx_PLLSAI2_Config>
 80042ca:	4603      	mov	r3, r0
 80042cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042ce:	7cfb      	ldrb	r3, [r7, #19]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80042d4:	7cfb      	ldrb	r3, [r7, #19]
 80042d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00a      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042e4:	4b10      	ldr	r3, [pc, #64]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042f2:	490d      	ldr	r1, [pc, #52]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00b      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004306:	4b08      	ldr	r3, [pc, #32]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004316:	4904      	ldr	r1, [pc, #16]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800431e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40021000 	.word	0x40021000

0800432c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800433a:	4b75      	ldr	r3, [pc, #468]	; (8004510 <RCCEx_PLLSAI1_Config+0x1e4>)
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f003 0303 	and.w	r3, r3, #3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d018      	beq.n	8004378 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004346:	4b72      	ldr	r3, [pc, #456]	; (8004510 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f003 0203 	and.w	r2, r3, #3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	429a      	cmp	r2, r3
 8004354:	d10d      	bne.n	8004372 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
       ||
 800435a:	2b00      	cmp	r3, #0
 800435c:	d009      	beq.n	8004372 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800435e:	4b6c      	ldr	r3, [pc, #432]	; (8004510 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	091b      	lsrs	r3, r3, #4
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
       ||
 800436e:	429a      	cmp	r2, r3
 8004370:	d047      	beq.n	8004402 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	73fb      	strb	r3, [r7, #15]
 8004376:	e044      	b.n	8004402 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b03      	cmp	r3, #3
 800437e:	d018      	beq.n	80043b2 <RCCEx_PLLSAI1_Config+0x86>
 8004380:	2b03      	cmp	r3, #3
 8004382:	d825      	bhi.n	80043d0 <RCCEx_PLLSAI1_Config+0xa4>
 8004384:	2b01      	cmp	r3, #1
 8004386:	d002      	beq.n	800438e <RCCEx_PLLSAI1_Config+0x62>
 8004388:	2b02      	cmp	r3, #2
 800438a:	d009      	beq.n	80043a0 <RCCEx_PLLSAI1_Config+0x74>
 800438c:	e020      	b.n	80043d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800438e:	4b60      	ldr	r3, [pc, #384]	; (8004510 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d11d      	bne.n	80043d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800439e:	e01a      	b.n	80043d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043a0:	4b5b      	ldr	r3, [pc, #364]	; (8004510 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d116      	bne.n	80043da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043b0:	e013      	b.n	80043da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043b2:	4b57      	ldr	r3, [pc, #348]	; (8004510 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10f      	bne.n	80043de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043be:	4b54      	ldr	r3, [pc, #336]	; (8004510 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d109      	bne.n	80043de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043ce:	e006      	b.n	80043de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	73fb      	strb	r3, [r7, #15]
      break;
 80043d4:	e004      	b.n	80043e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043d6:	bf00      	nop
 80043d8:	e002      	b.n	80043e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043da:	bf00      	nop
 80043dc:	e000      	b.n	80043e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043de:	bf00      	nop
    }

    if(status == HAL_OK)
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10d      	bne.n	8004402 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043e6:	4b4a      	ldr	r3, [pc, #296]	; (8004510 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6819      	ldr	r1, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	430b      	orrs	r3, r1
 80043fc:	4944      	ldr	r1, [pc, #272]	; (8004510 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004402:	7bfb      	ldrb	r3, [r7, #15]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d17d      	bne.n	8004504 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004408:	4b41      	ldr	r3, [pc, #260]	; (8004510 <RCCEx_PLLSAI1_Config+0x1e4>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a40      	ldr	r2, [pc, #256]	; (8004510 <RCCEx_PLLSAI1_Config+0x1e4>)
 800440e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004412:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004414:	f7fd fd60 	bl	8001ed8 <HAL_GetTick>
 8004418:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800441a:	e009      	b.n	8004430 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800441c:	f7fd fd5c 	bl	8001ed8 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d902      	bls.n	8004430 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	73fb      	strb	r3, [r7, #15]
        break;
 800442e:	e005      	b.n	800443c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004430:	4b37      	ldr	r3, [pc, #220]	; (8004510 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1ef      	bne.n	800441c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800443c:	7bfb      	ldrb	r3, [r7, #15]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d160      	bne.n	8004504 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d111      	bne.n	800446c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004448:	4b31      	ldr	r3, [pc, #196]	; (8004510 <RCCEx_PLLSAI1_Config+0x1e4>)
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6892      	ldr	r2, [r2, #8]
 8004458:	0211      	lsls	r1, r2, #8
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	68d2      	ldr	r2, [r2, #12]
 800445e:	0912      	lsrs	r2, r2, #4
 8004460:	0452      	lsls	r2, r2, #17
 8004462:	430a      	orrs	r2, r1
 8004464:	492a      	ldr	r1, [pc, #168]	; (8004510 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004466:	4313      	orrs	r3, r2
 8004468:	610b      	str	r3, [r1, #16]
 800446a:	e027      	b.n	80044bc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d112      	bne.n	8004498 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004472:	4b27      	ldr	r3, [pc, #156]	; (8004510 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800447a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6892      	ldr	r2, [r2, #8]
 8004482:	0211      	lsls	r1, r2, #8
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6912      	ldr	r2, [r2, #16]
 8004488:	0852      	lsrs	r2, r2, #1
 800448a:	3a01      	subs	r2, #1
 800448c:	0552      	lsls	r2, r2, #21
 800448e:	430a      	orrs	r2, r1
 8004490:	491f      	ldr	r1, [pc, #124]	; (8004510 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004492:	4313      	orrs	r3, r2
 8004494:	610b      	str	r3, [r1, #16]
 8004496:	e011      	b.n	80044bc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004498:	4b1d      	ldr	r3, [pc, #116]	; (8004510 <RCCEx_PLLSAI1_Config+0x1e4>)
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6892      	ldr	r2, [r2, #8]
 80044a8:	0211      	lsls	r1, r2, #8
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6952      	ldr	r2, [r2, #20]
 80044ae:	0852      	lsrs	r2, r2, #1
 80044b0:	3a01      	subs	r2, #1
 80044b2:	0652      	lsls	r2, r2, #25
 80044b4:	430a      	orrs	r2, r1
 80044b6:	4916      	ldr	r1, [pc, #88]	; (8004510 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044bc:	4b14      	ldr	r3, [pc, #80]	; (8004510 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a13      	ldr	r2, [pc, #76]	; (8004510 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c8:	f7fd fd06 	bl	8001ed8 <HAL_GetTick>
 80044cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044ce:	e009      	b.n	80044e4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044d0:	f7fd fd02 	bl	8001ed8 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d902      	bls.n	80044e4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	73fb      	strb	r3, [r7, #15]
          break;
 80044e2:	e005      	b.n	80044f0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044e4:	4b0a      	ldr	r3, [pc, #40]	; (8004510 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0ef      	beq.n	80044d0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d106      	bne.n	8004504 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80044f6:	4b06      	ldr	r3, [pc, #24]	; (8004510 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044f8:	691a      	ldr	r2, [r3, #16]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	4904      	ldr	r1, [pc, #16]	; (8004510 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004500:	4313      	orrs	r3, r2
 8004502:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004504:	7bfb      	ldrb	r3, [r7, #15]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	40021000 	.word	0x40021000

08004514 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004522:	4b6a      	ldr	r3, [pc, #424]	; (80046cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d018      	beq.n	8004560 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800452e:	4b67      	ldr	r3, [pc, #412]	; (80046cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f003 0203 	and.w	r2, r3, #3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d10d      	bne.n	800455a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
       ||
 8004542:	2b00      	cmp	r3, #0
 8004544:	d009      	beq.n	800455a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004546:	4b61      	ldr	r3, [pc, #388]	; (80046cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	091b      	lsrs	r3, r3, #4
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	1c5a      	adds	r2, r3, #1
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
       ||
 8004556:	429a      	cmp	r2, r3
 8004558:	d047      	beq.n	80045ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	73fb      	strb	r3, [r7, #15]
 800455e:	e044      	b.n	80045ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b03      	cmp	r3, #3
 8004566:	d018      	beq.n	800459a <RCCEx_PLLSAI2_Config+0x86>
 8004568:	2b03      	cmp	r3, #3
 800456a:	d825      	bhi.n	80045b8 <RCCEx_PLLSAI2_Config+0xa4>
 800456c:	2b01      	cmp	r3, #1
 800456e:	d002      	beq.n	8004576 <RCCEx_PLLSAI2_Config+0x62>
 8004570:	2b02      	cmp	r3, #2
 8004572:	d009      	beq.n	8004588 <RCCEx_PLLSAI2_Config+0x74>
 8004574:	e020      	b.n	80045b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004576:	4b55      	ldr	r3, [pc, #340]	; (80046cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d11d      	bne.n	80045be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004586:	e01a      	b.n	80045be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004588:	4b50      	ldr	r3, [pc, #320]	; (80046cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004590:	2b00      	cmp	r3, #0
 8004592:	d116      	bne.n	80045c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004598:	e013      	b.n	80045c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800459a:	4b4c      	ldr	r3, [pc, #304]	; (80046cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10f      	bne.n	80045c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045a6:	4b49      	ldr	r3, [pc, #292]	; (80046cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d109      	bne.n	80045c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045b6:	e006      	b.n	80045c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	73fb      	strb	r3, [r7, #15]
      break;
 80045bc:	e004      	b.n	80045c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045be:	bf00      	nop
 80045c0:	e002      	b.n	80045c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045c2:	bf00      	nop
 80045c4:	e000      	b.n	80045c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10d      	bne.n	80045ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045ce:	4b3f      	ldr	r3, [pc, #252]	; (80046cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6819      	ldr	r1, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	3b01      	subs	r3, #1
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	430b      	orrs	r3, r1
 80045e4:	4939      	ldr	r1, [pc, #228]	; (80046cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045ea:	7bfb      	ldrb	r3, [r7, #15]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d167      	bne.n	80046c0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80045f0:	4b36      	ldr	r3, [pc, #216]	; (80046cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a35      	ldr	r2, [pc, #212]	; (80046cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80045f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045fc:	f7fd fc6c 	bl	8001ed8 <HAL_GetTick>
 8004600:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004602:	e009      	b.n	8004618 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004604:	f7fd fc68 	bl	8001ed8 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d902      	bls.n	8004618 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	73fb      	strb	r3, [r7, #15]
        break;
 8004616:	e005      	b.n	8004624 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004618:	4b2c      	ldr	r3, [pc, #176]	; (80046cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1ef      	bne.n	8004604 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004624:	7bfb      	ldrb	r3, [r7, #15]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d14a      	bne.n	80046c0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d111      	bne.n	8004654 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004630:	4b26      	ldr	r3, [pc, #152]	; (80046cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6892      	ldr	r2, [r2, #8]
 8004640:	0211      	lsls	r1, r2, #8
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	68d2      	ldr	r2, [r2, #12]
 8004646:	0912      	lsrs	r2, r2, #4
 8004648:	0452      	lsls	r2, r2, #17
 800464a:	430a      	orrs	r2, r1
 800464c:	491f      	ldr	r1, [pc, #124]	; (80046cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800464e:	4313      	orrs	r3, r2
 8004650:	614b      	str	r3, [r1, #20]
 8004652:	e011      	b.n	8004678 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004654:	4b1d      	ldr	r3, [pc, #116]	; (80046cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800465c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6892      	ldr	r2, [r2, #8]
 8004664:	0211      	lsls	r1, r2, #8
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6912      	ldr	r2, [r2, #16]
 800466a:	0852      	lsrs	r2, r2, #1
 800466c:	3a01      	subs	r2, #1
 800466e:	0652      	lsls	r2, r2, #25
 8004670:	430a      	orrs	r2, r1
 8004672:	4916      	ldr	r1, [pc, #88]	; (80046cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004674:	4313      	orrs	r3, r2
 8004676:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004678:	4b14      	ldr	r3, [pc, #80]	; (80046cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a13      	ldr	r2, [pc, #76]	; (80046cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800467e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004682:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004684:	f7fd fc28 	bl	8001ed8 <HAL_GetTick>
 8004688:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800468a:	e009      	b.n	80046a0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800468c:	f7fd fc24 	bl	8001ed8 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d902      	bls.n	80046a0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	73fb      	strb	r3, [r7, #15]
          break;
 800469e:	e005      	b.n	80046ac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046a0:	4b0a      	ldr	r3, [pc, #40]	; (80046cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0ef      	beq.n	800468c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80046b2:	4b06      	ldr	r3, [pc, #24]	; (80046cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b4:	695a      	ldr	r2, [r3, #20]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	4904      	ldr	r1, [pc, #16]	; (80046cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	40021000 	.word	0x40021000

080046d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e049      	b.n	8004776 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d106      	bne.n	80046fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7fd f984 	bl	8001a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3304      	adds	r3, #4
 800470c:	4619      	mov	r1, r3
 800470e:	4610      	mov	r0, r2
 8004710:	f000 fd5e 	bl	80051d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b01      	cmp	r3, #1
 8004792:	d001      	beq.n	8004798 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e047      	b.n	8004828 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a23      	ldr	r2, [pc, #140]	; (8004834 <HAL_TIM_Base_Start+0xb4>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d01d      	beq.n	80047e6 <HAL_TIM_Base_Start+0x66>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b2:	d018      	beq.n	80047e6 <HAL_TIM_Base_Start+0x66>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a1f      	ldr	r2, [pc, #124]	; (8004838 <HAL_TIM_Base_Start+0xb8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d013      	beq.n	80047e6 <HAL_TIM_Base_Start+0x66>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a1e      	ldr	r2, [pc, #120]	; (800483c <HAL_TIM_Base_Start+0xbc>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d00e      	beq.n	80047e6 <HAL_TIM_Base_Start+0x66>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a1c      	ldr	r2, [pc, #112]	; (8004840 <HAL_TIM_Base_Start+0xc0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d009      	beq.n	80047e6 <HAL_TIM_Base_Start+0x66>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a1b      	ldr	r2, [pc, #108]	; (8004844 <HAL_TIM_Base_Start+0xc4>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d004      	beq.n	80047e6 <HAL_TIM_Base_Start+0x66>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a19      	ldr	r2, [pc, #100]	; (8004848 <HAL_TIM_Base_Start+0xc8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d115      	bne.n	8004812 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	4b17      	ldr	r3, [pc, #92]	; (800484c <HAL_TIM_Base_Start+0xcc>)
 80047ee:	4013      	ands	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2b06      	cmp	r3, #6
 80047f6:	d015      	beq.n	8004824 <HAL_TIM_Base_Start+0xa4>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047fe:	d011      	beq.n	8004824 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0201 	orr.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004810:	e008      	b.n	8004824 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f042 0201 	orr.w	r2, r2, #1
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	e000      	b.n	8004826 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004824:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	40012c00 	.word	0x40012c00
 8004838:	40000400 	.word	0x40000400
 800483c:	40000800 	.word	0x40000800
 8004840:	40000c00 	.word	0x40000c00
 8004844:	40013400 	.word	0x40013400
 8004848:	40014000 	.word	0x40014000
 800484c:	00010007 	.word	0x00010007

08004850 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b01      	cmp	r3, #1
 8004862:	d001      	beq.n	8004868 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e04f      	b.n	8004908 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0201 	orr.w	r2, r2, #1
 800487e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a23      	ldr	r2, [pc, #140]	; (8004914 <HAL_TIM_Base_Start_IT+0xc4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d01d      	beq.n	80048c6 <HAL_TIM_Base_Start_IT+0x76>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004892:	d018      	beq.n	80048c6 <HAL_TIM_Base_Start_IT+0x76>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a1f      	ldr	r2, [pc, #124]	; (8004918 <HAL_TIM_Base_Start_IT+0xc8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d013      	beq.n	80048c6 <HAL_TIM_Base_Start_IT+0x76>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a1e      	ldr	r2, [pc, #120]	; (800491c <HAL_TIM_Base_Start_IT+0xcc>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00e      	beq.n	80048c6 <HAL_TIM_Base_Start_IT+0x76>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a1c      	ldr	r2, [pc, #112]	; (8004920 <HAL_TIM_Base_Start_IT+0xd0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d009      	beq.n	80048c6 <HAL_TIM_Base_Start_IT+0x76>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a1b      	ldr	r2, [pc, #108]	; (8004924 <HAL_TIM_Base_Start_IT+0xd4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d004      	beq.n	80048c6 <HAL_TIM_Base_Start_IT+0x76>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a19      	ldr	r2, [pc, #100]	; (8004928 <HAL_TIM_Base_Start_IT+0xd8>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d115      	bne.n	80048f2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	4b17      	ldr	r3, [pc, #92]	; (800492c <HAL_TIM_Base_Start_IT+0xdc>)
 80048ce:	4013      	ands	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2b06      	cmp	r3, #6
 80048d6:	d015      	beq.n	8004904 <HAL_TIM_Base_Start_IT+0xb4>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048de:	d011      	beq.n	8004904 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f0:	e008      	b.n	8004904 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f042 0201 	orr.w	r2, r2, #1
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	e000      	b.n	8004906 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004904:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	40012c00 	.word	0x40012c00
 8004918:	40000400 	.word	0x40000400
 800491c:	40000800 	.word	0x40000800
 8004920:	40000c00 	.word	0x40000c00
 8004924:	40013400 	.word	0x40013400
 8004928:	40014000 	.word	0x40014000
 800492c:	00010007 	.word	0x00010007

08004930 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e049      	b.n	80049d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d106      	bne.n	800495c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7fd f834 	bl	80019c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3304      	adds	r3, #4
 800496c:	4619      	mov	r1, r3
 800496e:	4610      	mov	r0, r2
 8004970:	f000 fc2e 	bl	80051d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d109      	bne.n	8004a04 <HAL_TIM_PWM_Start+0x24>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	bf14      	ite	ne
 80049fc:	2301      	movne	r3, #1
 80049fe:	2300      	moveq	r3, #0
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	e03c      	b.n	8004a7e <HAL_TIM_PWM_Start+0x9e>
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d109      	bne.n	8004a1e <HAL_TIM_PWM_Start+0x3e>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	bf14      	ite	ne
 8004a16:	2301      	movne	r3, #1
 8004a18:	2300      	moveq	r3, #0
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	e02f      	b.n	8004a7e <HAL_TIM_PWM_Start+0x9e>
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d109      	bne.n	8004a38 <HAL_TIM_PWM_Start+0x58>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	bf14      	ite	ne
 8004a30:	2301      	movne	r3, #1
 8004a32:	2300      	moveq	r3, #0
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	e022      	b.n	8004a7e <HAL_TIM_PWM_Start+0x9e>
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	2b0c      	cmp	r3, #12
 8004a3c:	d109      	bne.n	8004a52 <HAL_TIM_PWM_Start+0x72>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	bf14      	ite	ne
 8004a4a:	2301      	movne	r3, #1
 8004a4c:	2300      	moveq	r3, #0
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	e015      	b.n	8004a7e <HAL_TIM_PWM_Start+0x9e>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b10      	cmp	r3, #16
 8004a56:	d109      	bne.n	8004a6c <HAL_TIM_PWM_Start+0x8c>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	bf14      	ite	ne
 8004a64:	2301      	movne	r3, #1
 8004a66:	2300      	moveq	r3, #0
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	e008      	b.n	8004a7e <HAL_TIM_PWM_Start+0x9e>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	bf14      	ite	ne
 8004a78:	2301      	movne	r3, #1
 8004a7a:	2300      	moveq	r3, #0
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e09c      	b.n	8004bc0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d104      	bne.n	8004a96 <HAL_TIM_PWM_Start+0xb6>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a94:	e023      	b.n	8004ade <HAL_TIM_PWM_Start+0xfe>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d104      	bne.n	8004aa6 <HAL_TIM_PWM_Start+0xc6>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aa4:	e01b      	b.n	8004ade <HAL_TIM_PWM_Start+0xfe>
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d104      	bne.n	8004ab6 <HAL_TIM_PWM_Start+0xd6>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ab4:	e013      	b.n	8004ade <HAL_TIM_PWM_Start+0xfe>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b0c      	cmp	r3, #12
 8004aba:	d104      	bne.n	8004ac6 <HAL_TIM_PWM_Start+0xe6>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ac4:	e00b      	b.n	8004ade <HAL_TIM_PWM_Start+0xfe>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b10      	cmp	r3, #16
 8004aca:	d104      	bne.n	8004ad6 <HAL_TIM_PWM_Start+0xf6>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ad4:	e003      	b.n	8004ade <HAL_TIM_PWM_Start+0xfe>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2202      	movs	r2, #2
 8004ada:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	6839      	ldr	r1, [r7, #0]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 fee2 	bl	80058b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a35      	ldr	r2, [pc, #212]	; (8004bc8 <HAL_TIM_PWM_Start+0x1e8>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d013      	beq.n	8004b1e <HAL_TIM_PWM_Start+0x13e>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a34      	ldr	r2, [pc, #208]	; (8004bcc <HAL_TIM_PWM_Start+0x1ec>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d00e      	beq.n	8004b1e <HAL_TIM_PWM_Start+0x13e>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a32      	ldr	r2, [pc, #200]	; (8004bd0 <HAL_TIM_PWM_Start+0x1f0>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d009      	beq.n	8004b1e <HAL_TIM_PWM_Start+0x13e>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a31      	ldr	r2, [pc, #196]	; (8004bd4 <HAL_TIM_PWM_Start+0x1f4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d004      	beq.n	8004b1e <HAL_TIM_PWM_Start+0x13e>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a2f      	ldr	r2, [pc, #188]	; (8004bd8 <HAL_TIM_PWM_Start+0x1f8>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d101      	bne.n	8004b22 <HAL_TIM_PWM_Start+0x142>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <HAL_TIM_PWM_Start+0x144>
 8004b22:	2300      	movs	r3, #0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d007      	beq.n	8004b38 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b36:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a22      	ldr	r2, [pc, #136]	; (8004bc8 <HAL_TIM_PWM_Start+0x1e8>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d01d      	beq.n	8004b7e <HAL_TIM_PWM_Start+0x19e>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b4a:	d018      	beq.n	8004b7e <HAL_TIM_PWM_Start+0x19e>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a22      	ldr	r2, [pc, #136]	; (8004bdc <HAL_TIM_PWM_Start+0x1fc>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d013      	beq.n	8004b7e <HAL_TIM_PWM_Start+0x19e>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a21      	ldr	r2, [pc, #132]	; (8004be0 <HAL_TIM_PWM_Start+0x200>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00e      	beq.n	8004b7e <HAL_TIM_PWM_Start+0x19e>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a1f      	ldr	r2, [pc, #124]	; (8004be4 <HAL_TIM_PWM_Start+0x204>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d009      	beq.n	8004b7e <HAL_TIM_PWM_Start+0x19e>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a17      	ldr	r2, [pc, #92]	; (8004bcc <HAL_TIM_PWM_Start+0x1ec>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d004      	beq.n	8004b7e <HAL_TIM_PWM_Start+0x19e>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a15      	ldr	r2, [pc, #84]	; (8004bd0 <HAL_TIM_PWM_Start+0x1f0>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d115      	bne.n	8004baa <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	4b18      	ldr	r3, [pc, #96]	; (8004be8 <HAL_TIM_PWM_Start+0x208>)
 8004b86:	4013      	ands	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2b06      	cmp	r3, #6
 8004b8e:	d015      	beq.n	8004bbc <HAL_TIM_PWM_Start+0x1dc>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b96:	d011      	beq.n	8004bbc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0201 	orr.w	r2, r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba8:	e008      	b.n	8004bbc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0201 	orr.w	r2, r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	e000      	b.n	8004bbe <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bbc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40012c00 	.word	0x40012c00
 8004bcc:	40013400 	.word	0x40013400
 8004bd0:	40014000 	.word	0x40014000
 8004bd4:	40014400 	.word	0x40014400
 8004bd8:	40014800 	.word	0x40014800
 8004bdc:	40000400 	.word	0x40000400
 8004be0:	40000800 	.word	0x40000800
 8004be4:	40000c00 	.word	0x40000c00
 8004be8:	00010007 	.word	0x00010007

08004bec <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	6839      	ldr	r1, [r7, #0]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fe56 	bl	80058b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a3e      	ldr	r2, [pc, #248]	; (8004d04 <HAL_TIM_PWM_Stop+0x118>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d013      	beq.n	8004c36 <HAL_TIM_PWM_Stop+0x4a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a3d      	ldr	r2, [pc, #244]	; (8004d08 <HAL_TIM_PWM_Stop+0x11c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d00e      	beq.n	8004c36 <HAL_TIM_PWM_Stop+0x4a>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a3b      	ldr	r2, [pc, #236]	; (8004d0c <HAL_TIM_PWM_Stop+0x120>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d009      	beq.n	8004c36 <HAL_TIM_PWM_Stop+0x4a>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a3a      	ldr	r2, [pc, #232]	; (8004d10 <HAL_TIM_PWM_Stop+0x124>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d004      	beq.n	8004c36 <HAL_TIM_PWM_Stop+0x4a>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a38      	ldr	r2, [pc, #224]	; (8004d14 <HAL_TIM_PWM_Stop+0x128>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d101      	bne.n	8004c3a <HAL_TIM_PWM_Stop+0x4e>
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <HAL_TIM_PWM_Stop+0x50>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d017      	beq.n	8004c70 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6a1a      	ldr	r2, [r3, #32]
 8004c46:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10f      	bne.n	8004c70 <HAL_TIM_PWM_Stop+0x84>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6a1a      	ldr	r2, [r3, #32]
 8004c56:	f240 4344 	movw	r3, #1092	; 0x444
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d107      	bne.n	8004c70 <HAL_TIM_PWM_Stop+0x84>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c6e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6a1a      	ldr	r2, [r3, #32]
 8004c76:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10f      	bne.n	8004ca0 <HAL_TIM_PWM_Stop+0xb4>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6a1a      	ldr	r2, [r3, #32]
 8004c86:	f240 4344 	movw	r3, #1092	; 0x444
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d107      	bne.n	8004ca0 <HAL_TIM_PWM_Stop+0xb4>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0201 	bic.w	r2, r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d104      	bne.n	8004cb0 <HAL_TIM_PWM_Stop+0xc4>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cae:	e023      	b.n	8004cf8 <HAL_TIM_PWM_Stop+0x10c>
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d104      	bne.n	8004cc0 <HAL_TIM_PWM_Stop+0xd4>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cbe:	e01b      	b.n	8004cf8 <HAL_TIM_PWM_Stop+0x10c>
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	2b08      	cmp	r3, #8
 8004cc4:	d104      	bne.n	8004cd0 <HAL_TIM_PWM_Stop+0xe4>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cce:	e013      	b.n	8004cf8 <HAL_TIM_PWM_Stop+0x10c>
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	2b0c      	cmp	r3, #12
 8004cd4:	d104      	bne.n	8004ce0 <HAL_TIM_PWM_Stop+0xf4>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cde:	e00b      	b.n	8004cf8 <HAL_TIM_PWM_Stop+0x10c>
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2b10      	cmp	r3, #16
 8004ce4:	d104      	bne.n	8004cf0 <HAL_TIM_PWM_Stop+0x104>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cee:	e003      	b.n	8004cf8 <HAL_TIM_PWM_Stop+0x10c>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	40012c00 	.word	0x40012c00
 8004d08:	40013400 	.word	0x40013400
 8004d0c:	40014000 	.word	0x40014000
 8004d10:	40014400 	.word	0x40014400
 8004d14:	40014800 	.word	0x40014800

08004d18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d122      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d11b      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f06f 0202 	mvn.w	r2, #2
 8004d44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fa1a 	bl	8005194 <HAL_TIM_IC_CaptureCallback>
 8004d60:	e005      	b.n	8004d6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fa0c 	bl	8005180 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 fa1d 	bl	80051a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f003 0304 	and.w	r3, r3, #4
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	d122      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b04      	cmp	r3, #4
 8004d8e:	d11b      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0204 	mvn.w	r2, #4
 8004d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f9f0 	bl	8005194 <HAL_TIM_IC_CaptureCallback>
 8004db4:	e005      	b.n	8004dc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f9e2 	bl	8005180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f9f3 	bl	80051a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f003 0308 	and.w	r3, r3, #8
 8004dd2:	2b08      	cmp	r3, #8
 8004dd4:	d122      	bne.n	8004e1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d11b      	bne.n	8004e1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f06f 0208 	mvn.w	r2, #8
 8004dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2204      	movs	r2, #4
 8004df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f9c6 	bl	8005194 <HAL_TIM_IC_CaptureCallback>
 8004e08:	e005      	b.n	8004e16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f9b8 	bl	8005180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f9c9 	bl	80051a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	f003 0310 	and.w	r3, r3, #16
 8004e26:	2b10      	cmp	r3, #16
 8004e28:	d122      	bne.n	8004e70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f003 0310 	and.w	r3, r3, #16
 8004e34:	2b10      	cmp	r3, #16
 8004e36:	d11b      	bne.n	8004e70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f06f 0210 	mvn.w	r2, #16
 8004e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2208      	movs	r2, #8
 8004e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f99c 	bl	8005194 <HAL_TIM_IC_CaptureCallback>
 8004e5c:	e005      	b.n	8004e6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f98e 	bl	8005180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f99f 	bl	80051a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d10e      	bne.n	8004e9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d107      	bne.n	8004e9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f06f 0201 	mvn.w	r2, #1
 8004e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7fb fee2 	bl	8000c60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea6:	2b80      	cmp	r3, #128	; 0x80
 8004ea8:	d10e      	bne.n	8004ec8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb4:	2b80      	cmp	r3, #128	; 0x80
 8004eb6:	d107      	bne.n	8004ec8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fdac 	bl	8005a20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ed6:	d10e      	bne.n	8004ef6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee2:	2b80      	cmp	r3, #128	; 0x80
 8004ee4:	d107      	bne.n	8004ef6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fd9f 	bl	8005a34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f00:	2b40      	cmp	r3, #64	; 0x40
 8004f02:	d10e      	bne.n	8004f22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0e:	2b40      	cmp	r3, #64	; 0x40
 8004f10:	d107      	bne.n	8004f22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f94d 	bl	80051bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	f003 0320 	and.w	r3, r3, #32
 8004f2c:	2b20      	cmp	r3, #32
 8004f2e:	d10e      	bne.n	8004f4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	d107      	bne.n	8004f4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f06f 0220 	mvn.w	r2, #32
 8004f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 fd5f 	bl	8005a0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f4e:	bf00      	nop
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
	...

08004f58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f64:	2300      	movs	r3, #0
 8004f66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d101      	bne.n	8004f76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f72:	2302      	movs	r3, #2
 8004f74:	e0ff      	b.n	8005176 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b14      	cmp	r3, #20
 8004f82:	f200 80f0 	bhi.w	8005166 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f86:	a201      	add	r2, pc, #4	; (adr r2, 8004f8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8c:	08004fe1 	.word	0x08004fe1
 8004f90:	08005167 	.word	0x08005167
 8004f94:	08005167 	.word	0x08005167
 8004f98:	08005167 	.word	0x08005167
 8004f9c:	08005021 	.word	0x08005021
 8004fa0:	08005167 	.word	0x08005167
 8004fa4:	08005167 	.word	0x08005167
 8004fa8:	08005167 	.word	0x08005167
 8004fac:	08005063 	.word	0x08005063
 8004fb0:	08005167 	.word	0x08005167
 8004fb4:	08005167 	.word	0x08005167
 8004fb8:	08005167 	.word	0x08005167
 8004fbc:	080050a3 	.word	0x080050a3
 8004fc0:	08005167 	.word	0x08005167
 8004fc4:	08005167 	.word	0x08005167
 8004fc8:	08005167 	.word	0x08005167
 8004fcc:	080050e5 	.word	0x080050e5
 8004fd0:	08005167 	.word	0x08005167
 8004fd4:	08005167 	.word	0x08005167
 8004fd8:	08005167 	.word	0x08005167
 8004fdc:	08005125 	.word	0x08005125
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68b9      	ldr	r1, [r7, #8]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 f98c 	bl	8005304 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	699a      	ldr	r2, [r3, #24]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0208 	orr.w	r2, r2, #8
 8004ffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	699a      	ldr	r2, [r3, #24]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 0204 	bic.w	r2, r2, #4
 800500a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6999      	ldr	r1, [r3, #24]
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	691a      	ldr	r2, [r3, #16]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	619a      	str	r2, [r3, #24]
      break;
 800501e:	e0a5      	b.n	800516c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68b9      	ldr	r1, [r7, #8]
 8005026:	4618      	mov	r0, r3
 8005028:	f000 f9fc 	bl	8005424 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699a      	ldr	r2, [r3, #24]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800503a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	699a      	ldr	r2, [r3, #24]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800504a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6999      	ldr	r1, [r3, #24]
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	021a      	lsls	r2, r3, #8
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	619a      	str	r2, [r3, #24]
      break;
 8005060:	e084      	b.n	800516c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68b9      	ldr	r1, [r7, #8]
 8005068:	4618      	mov	r0, r3
 800506a:	f000 fa65 	bl	8005538 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69da      	ldr	r2, [r3, #28]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f042 0208 	orr.w	r2, r2, #8
 800507c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69da      	ldr	r2, [r3, #28]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 0204 	bic.w	r2, r2, #4
 800508c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	69d9      	ldr	r1, [r3, #28]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	691a      	ldr	r2, [r3, #16]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	61da      	str	r2, [r3, #28]
      break;
 80050a0:	e064      	b.n	800516c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68b9      	ldr	r1, [r7, #8]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f000 facd 	bl	8005648 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	69da      	ldr	r2, [r3, #28]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	69da      	ldr	r2, [r3, #28]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	69d9      	ldr	r1, [r3, #28]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	021a      	lsls	r2, r3, #8
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	61da      	str	r2, [r3, #28]
      break;
 80050e2:	e043      	b.n	800516c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 fb16 	bl	800571c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0208 	orr.w	r2, r2, #8
 80050fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0204 	bic.w	r2, r2, #4
 800510e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	691a      	ldr	r2, [r3, #16]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005122:	e023      	b.n	800516c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68b9      	ldr	r1, [r7, #8]
 800512a:	4618      	mov	r0, r3
 800512c:	f000 fb5a 	bl	80057e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800513e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800514e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	021a      	lsls	r2, r3, #8
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005164:	e002      	b.n	800516c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	75fb      	strb	r3, [r7, #23]
      break;
 800516a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005174:	7dfb      	ldrb	r3, [r7, #23]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3718      	adds	r7, #24
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop

08005180 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a40      	ldr	r2, [pc, #256]	; (80052e4 <TIM_Base_SetConfig+0x114>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d013      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ee:	d00f      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a3d      	ldr	r2, [pc, #244]	; (80052e8 <TIM_Base_SetConfig+0x118>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d00b      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a3c      	ldr	r2, [pc, #240]	; (80052ec <TIM_Base_SetConfig+0x11c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d007      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a3b      	ldr	r2, [pc, #236]	; (80052f0 <TIM_Base_SetConfig+0x120>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d003      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a3a      	ldr	r2, [pc, #232]	; (80052f4 <TIM_Base_SetConfig+0x124>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d108      	bne.n	8005222 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a2f      	ldr	r2, [pc, #188]	; (80052e4 <TIM_Base_SetConfig+0x114>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d01f      	beq.n	800526a <TIM_Base_SetConfig+0x9a>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005230:	d01b      	beq.n	800526a <TIM_Base_SetConfig+0x9a>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a2c      	ldr	r2, [pc, #176]	; (80052e8 <TIM_Base_SetConfig+0x118>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d017      	beq.n	800526a <TIM_Base_SetConfig+0x9a>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a2b      	ldr	r2, [pc, #172]	; (80052ec <TIM_Base_SetConfig+0x11c>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d013      	beq.n	800526a <TIM_Base_SetConfig+0x9a>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a2a      	ldr	r2, [pc, #168]	; (80052f0 <TIM_Base_SetConfig+0x120>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d00f      	beq.n	800526a <TIM_Base_SetConfig+0x9a>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a29      	ldr	r2, [pc, #164]	; (80052f4 <TIM_Base_SetConfig+0x124>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d00b      	beq.n	800526a <TIM_Base_SetConfig+0x9a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a28      	ldr	r2, [pc, #160]	; (80052f8 <TIM_Base_SetConfig+0x128>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d007      	beq.n	800526a <TIM_Base_SetConfig+0x9a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a27      	ldr	r2, [pc, #156]	; (80052fc <TIM_Base_SetConfig+0x12c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d003      	beq.n	800526a <TIM_Base_SetConfig+0x9a>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a26      	ldr	r2, [pc, #152]	; (8005300 <TIM_Base_SetConfig+0x130>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d108      	bne.n	800527c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005270:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	4313      	orrs	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a10      	ldr	r2, [pc, #64]	; (80052e4 <TIM_Base_SetConfig+0x114>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d00f      	beq.n	80052c8 <TIM_Base_SetConfig+0xf8>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a12      	ldr	r2, [pc, #72]	; (80052f4 <TIM_Base_SetConfig+0x124>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00b      	beq.n	80052c8 <TIM_Base_SetConfig+0xf8>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a11      	ldr	r2, [pc, #68]	; (80052f8 <TIM_Base_SetConfig+0x128>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d007      	beq.n	80052c8 <TIM_Base_SetConfig+0xf8>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a10      	ldr	r2, [pc, #64]	; (80052fc <TIM_Base_SetConfig+0x12c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d003      	beq.n	80052c8 <TIM_Base_SetConfig+0xf8>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a0f      	ldr	r2, [pc, #60]	; (8005300 <TIM_Base_SetConfig+0x130>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d103      	bne.n	80052d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	691a      	ldr	r2, [r3, #16]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	615a      	str	r2, [r3, #20]
}
 80052d6:	bf00      	nop
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40012c00 	.word	0x40012c00
 80052e8:	40000400 	.word	0x40000400
 80052ec:	40000800 	.word	0x40000800
 80052f0:	40000c00 	.word	0x40000c00
 80052f4:	40013400 	.word	0x40013400
 80052f8:	40014000 	.word	0x40014000
 80052fc:	40014400 	.word	0x40014400
 8005300:	40014800 	.word	0x40014800

08005304 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	f023 0201 	bic.w	r2, r3, #1
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f023 0303 	bic.w	r3, r3, #3
 800533e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4313      	orrs	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f023 0302 	bic.w	r3, r3, #2
 8005350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	4313      	orrs	r3, r2
 800535a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a2c      	ldr	r2, [pc, #176]	; (8005410 <TIM_OC1_SetConfig+0x10c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d00f      	beq.n	8005384 <TIM_OC1_SetConfig+0x80>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a2b      	ldr	r2, [pc, #172]	; (8005414 <TIM_OC1_SetConfig+0x110>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d00b      	beq.n	8005384 <TIM_OC1_SetConfig+0x80>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a2a      	ldr	r2, [pc, #168]	; (8005418 <TIM_OC1_SetConfig+0x114>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d007      	beq.n	8005384 <TIM_OC1_SetConfig+0x80>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a29      	ldr	r2, [pc, #164]	; (800541c <TIM_OC1_SetConfig+0x118>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d003      	beq.n	8005384 <TIM_OC1_SetConfig+0x80>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a28      	ldr	r2, [pc, #160]	; (8005420 <TIM_OC1_SetConfig+0x11c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d10c      	bne.n	800539e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f023 0308 	bic.w	r3, r3, #8
 800538a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	4313      	orrs	r3, r2
 8005394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f023 0304 	bic.w	r3, r3, #4
 800539c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a1b      	ldr	r2, [pc, #108]	; (8005410 <TIM_OC1_SetConfig+0x10c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d00f      	beq.n	80053c6 <TIM_OC1_SetConfig+0xc2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a1a      	ldr	r2, [pc, #104]	; (8005414 <TIM_OC1_SetConfig+0x110>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d00b      	beq.n	80053c6 <TIM_OC1_SetConfig+0xc2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a19      	ldr	r2, [pc, #100]	; (8005418 <TIM_OC1_SetConfig+0x114>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d007      	beq.n	80053c6 <TIM_OC1_SetConfig+0xc2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a18      	ldr	r2, [pc, #96]	; (800541c <TIM_OC1_SetConfig+0x118>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d003      	beq.n	80053c6 <TIM_OC1_SetConfig+0xc2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a17      	ldr	r2, [pc, #92]	; (8005420 <TIM_OC1_SetConfig+0x11c>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d111      	bne.n	80053ea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	4313      	orrs	r3, r2
 80053de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	621a      	str	r2, [r3, #32]
}
 8005404:	bf00      	nop
 8005406:	371c      	adds	r7, #28
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	40012c00 	.word	0x40012c00
 8005414:	40013400 	.word	0x40013400
 8005418:	40014000 	.word	0x40014000
 800541c:	40014400 	.word	0x40014400
 8005420:	40014800 	.word	0x40014800

08005424 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005424:	b480      	push	{r7}
 8005426:	b087      	sub	sp, #28
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	f023 0210 	bic.w	r2, r3, #16
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800545e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	021b      	lsls	r3, r3, #8
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	4313      	orrs	r3, r2
 800546a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f023 0320 	bic.w	r3, r3, #32
 8005472:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	4313      	orrs	r3, r2
 800547e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a28      	ldr	r2, [pc, #160]	; (8005524 <TIM_OC2_SetConfig+0x100>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d003      	beq.n	8005490 <TIM_OC2_SetConfig+0x6c>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a27      	ldr	r2, [pc, #156]	; (8005528 <TIM_OC2_SetConfig+0x104>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d10d      	bne.n	80054ac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a1d      	ldr	r2, [pc, #116]	; (8005524 <TIM_OC2_SetConfig+0x100>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d00f      	beq.n	80054d4 <TIM_OC2_SetConfig+0xb0>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a1c      	ldr	r2, [pc, #112]	; (8005528 <TIM_OC2_SetConfig+0x104>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d00b      	beq.n	80054d4 <TIM_OC2_SetConfig+0xb0>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a1b      	ldr	r2, [pc, #108]	; (800552c <TIM_OC2_SetConfig+0x108>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d007      	beq.n	80054d4 <TIM_OC2_SetConfig+0xb0>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a1a      	ldr	r2, [pc, #104]	; (8005530 <TIM_OC2_SetConfig+0x10c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d003      	beq.n	80054d4 <TIM_OC2_SetConfig+0xb0>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a19      	ldr	r2, [pc, #100]	; (8005534 <TIM_OC2_SetConfig+0x110>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d113      	bne.n	80054fc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	621a      	str	r2, [r3, #32]
}
 8005516:	bf00      	nop
 8005518:	371c      	adds	r7, #28
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	40012c00 	.word	0x40012c00
 8005528:	40013400 	.word	0x40013400
 800552c:	40014000 	.word	0x40014000
 8005530:	40014400 	.word	0x40014400
 8005534:	40014800 	.word	0x40014800

08005538 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 0303 	bic.w	r3, r3, #3
 8005572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	021b      	lsls	r3, r3, #8
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a27      	ldr	r2, [pc, #156]	; (8005634 <TIM_OC3_SetConfig+0xfc>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d003      	beq.n	80055a2 <TIM_OC3_SetConfig+0x6a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a26      	ldr	r2, [pc, #152]	; (8005638 <TIM_OC3_SetConfig+0x100>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d10d      	bne.n	80055be <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	021b      	lsls	r3, r3, #8
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a1c      	ldr	r2, [pc, #112]	; (8005634 <TIM_OC3_SetConfig+0xfc>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d00f      	beq.n	80055e6 <TIM_OC3_SetConfig+0xae>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a1b      	ldr	r2, [pc, #108]	; (8005638 <TIM_OC3_SetConfig+0x100>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00b      	beq.n	80055e6 <TIM_OC3_SetConfig+0xae>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a1a      	ldr	r2, [pc, #104]	; (800563c <TIM_OC3_SetConfig+0x104>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d007      	beq.n	80055e6 <TIM_OC3_SetConfig+0xae>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a19      	ldr	r2, [pc, #100]	; (8005640 <TIM_OC3_SetConfig+0x108>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d003      	beq.n	80055e6 <TIM_OC3_SetConfig+0xae>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a18      	ldr	r2, [pc, #96]	; (8005644 <TIM_OC3_SetConfig+0x10c>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d113      	bne.n	800560e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4313      	orrs	r3, r2
 8005600:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	011b      	lsls	r3, r3, #4
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	4313      	orrs	r3, r2
 800560c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	621a      	str	r2, [r3, #32]
}
 8005628:	bf00      	nop
 800562a:	371c      	adds	r7, #28
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	40012c00 	.word	0x40012c00
 8005638:	40013400 	.word	0x40013400
 800563c:	40014000 	.word	0x40014000
 8005640:	40014400 	.word	0x40014400
 8005644:	40014800 	.word	0x40014800

08005648 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800567a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	021b      	lsls	r3, r3, #8
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	4313      	orrs	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005696:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	031b      	lsls	r3, r3, #12
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a18      	ldr	r2, [pc, #96]	; (8005708 <TIM_OC4_SetConfig+0xc0>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d00f      	beq.n	80056cc <TIM_OC4_SetConfig+0x84>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a17      	ldr	r2, [pc, #92]	; (800570c <TIM_OC4_SetConfig+0xc4>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d00b      	beq.n	80056cc <TIM_OC4_SetConfig+0x84>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a16      	ldr	r2, [pc, #88]	; (8005710 <TIM_OC4_SetConfig+0xc8>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d007      	beq.n	80056cc <TIM_OC4_SetConfig+0x84>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a15      	ldr	r2, [pc, #84]	; (8005714 <TIM_OC4_SetConfig+0xcc>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d003      	beq.n	80056cc <TIM_OC4_SetConfig+0x84>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a14      	ldr	r2, [pc, #80]	; (8005718 <TIM_OC4_SetConfig+0xd0>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d109      	bne.n	80056e0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	019b      	lsls	r3, r3, #6
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	621a      	str	r2, [r3, #32]
}
 80056fa:	bf00      	nop
 80056fc:	371c      	adds	r7, #28
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	40012c00 	.word	0x40012c00
 800570c:	40013400 	.word	0x40013400
 8005710:	40014000 	.word	0x40014000
 8005714:	40014400 	.word	0x40014400
 8005718:	40014800 	.word	0x40014800

0800571c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800574a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	4313      	orrs	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005760:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	041b      	lsls	r3, r3, #16
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	4313      	orrs	r3, r2
 800576c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a17      	ldr	r2, [pc, #92]	; (80057d0 <TIM_OC5_SetConfig+0xb4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d00f      	beq.n	8005796 <TIM_OC5_SetConfig+0x7a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a16      	ldr	r2, [pc, #88]	; (80057d4 <TIM_OC5_SetConfig+0xb8>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d00b      	beq.n	8005796 <TIM_OC5_SetConfig+0x7a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a15      	ldr	r2, [pc, #84]	; (80057d8 <TIM_OC5_SetConfig+0xbc>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d007      	beq.n	8005796 <TIM_OC5_SetConfig+0x7a>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a14      	ldr	r2, [pc, #80]	; (80057dc <TIM_OC5_SetConfig+0xc0>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d003      	beq.n	8005796 <TIM_OC5_SetConfig+0x7a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a13      	ldr	r2, [pc, #76]	; (80057e0 <TIM_OC5_SetConfig+0xc4>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d109      	bne.n	80057aa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800579c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	021b      	lsls	r3, r3, #8
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	621a      	str	r2, [r3, #32]
}
 80057c4:	bf00      	nop
 80057c6:	371c      	adds	r7, #28
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	40012c00 	.word	0x40012c00
 80057d4:	40013400 	.word	0x40013400
 80057d8:	40014000 	.word	0x40014000
 80057dc:	40014400 	.word	0x40014400
 80057e0:	40014800 	.word	0x40014800

080057e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	021b      	lsls	r3, r3, #8
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	4313      	orrs	r3, r2
 8005822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800582a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	051b      	lsls	r3, r3, #20
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	4313      	orrs	r3, r2
 8005836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a18      	ldr	r2, [pc, #96]	; (800589c <TIM_OC6_SetConfig+0xb8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d00f      	beq.n	8005860 <TIM_OC6_SetConfig+0x7c>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a17      	ldr	r2, [pc, #92]	; (80058a0 <TIM_OC6_SetConfig+0xbc>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d00b      	beq.n	8005860 <TIM_OC6_SetConfig+0x7c>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a16      	ldr	r2, [pc, #88]	; (80058a4 <TIM_OC6_SetConfig+0xc0>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d007      	beq.n	8005860 <TIM_OC6_SetConfig+0x7c>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a15      	ldr	r2, [pc, #84]	; (80058a8 <TIM_OC6_SetConfig+0xc4>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d003      	beq.n	8005860 <TIM_OC6_SetConfig+0x7c>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a14      	ldr	r2, [pc, #80]	; (80058ac <TIM_OC6_SetConfig+0xc8>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d109      	bne.n	8005874 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005866:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	029b      	lsls	r3, r3, #10
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	4313      	orrs	r3, r2
 8005872:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	621a      	str	r2, [r3, #32]
}
 800588e:	bf00      	nop
 8005890:	371c      	adds	r7, #28
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	40012c00 	.word	0x40012c00
 80058a0:	40013400 	.word	0x40013400
 80058a4:	40014000 	.word	0x40014000
 80058a8:	40014400 	.word	0x40014400
 80058ac:	40014800 	.word	0x40014800

080058b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b087      	sub	sp, #28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f003 031f 	and.w	r3, r3, #31
 80058c2:	2201      	movs	r2, #1
 80058c4:	fa02 f303 	lsl.w	r3, r2, r3
 80058c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6a1a      	ldr	r2, [r3, #32]
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	43db      	mvns	r3, r3
 80058d2:	401a      	ands	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6a1a      	ldr	r2, [r3, #32]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	f003 031f 	and.w	r3, r3, #31
 80058e2:	6879      	ldr	r1, [r7, #4]
 80058e4:	fa01 f303 	lsl.w	r3, r1, r3
 80058e8:	431a      	orrs	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	621a      	str	r2, [r3, #32]
}
 80058ee:	bf00      	nop
 80058f0:	371c      	adds	r7, #28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
	...

080058fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800590c:	2b01      	cmp	r3, #1
 800590e:	d101      	bne.n	8005914 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005910:	2302      	movs	r3, #2
 8005912:	e068      	b.n	80059e6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a2e      	ldr	r2, [pc, #184]	; (80059f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d004      	beq.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a2d      	ldr	r2, [pc, #180]	; (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d108      	bne.n	800595a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800594e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005960:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	4313      	orrs	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a1e      	ldr	r2, [pc, #120]	; (80059f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d01d      	beq.n	80059ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005986:	d018      	beq.n	80059ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1b      	ldr	r2, [pc, #108]	; (80059fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d013      	beq.n	80059ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a1a      	ldr	r2, [pc, #104]	; (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d00e      	beq.n	80059ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a18      	ldr	r2, [pc, #96]	; (8005a04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d009      	beq.n	80059ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a13      	ldr	r2, [pc, #76]	; (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d004      	beq.n	80059ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a14      	ldr	r2, [pc, #80]	; (8005a08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d10c      	bne.n	80059d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	40012c00 	.word	0x40012c00
 80059f8:	40013400 	.word	0x40013400
 80059fc:	40000400 	.word	0x40000400
 8005a00:	40000800 	.word	0x40000800
 8005a04:	40000c00 	.word	0x40000c00
 8005a08:	40014000 	.word	0x40014000

08005a0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e040      	b.n	8005adc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d106      	bne.n	8005a70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7fc f844 	bl	8001af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2224      	movs	r2, #36	; 0x24
 8005a74:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 0201 	bic.w	r2, r2, #1
 8005a84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f992 	bl	8005db0 <UART_SetConfig>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d101      	bne.n	8005a96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e022      	b.n	8005adc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d002      	beq.n	8005aa4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 fc3e 	bl	8006320 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ab2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689a      	ldr	r2, [r3, #8]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ac2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0201 	orr.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 fcc5 	bl	8006464 <UART_CheckIdleState>
 8005ada:	4603      	mov	r3, r0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3708      	adds	r7, #8
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b08a      	sub	sp, #40	; 0x28
 8005ae8:	af02      	add	r7, sp, #8
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	603b      	str	r3, [r7, #0]
 8005af0:	4613      	mov	r3, r2
 8005af2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005af8:	2b20      	cmp	r3, #32
 8005afa:	f040 8082 	bne.w	8005c02 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d002      	beq.n	8005b0a <HAL_UART_Transmit+0x26>
 8005b04:	88fb      	ldrh	r3, [r7, #6]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e07a      	b.n	8005c04 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d101      	bne.n	8005b1c <HAL_UART_Transmit+0x38>
 8005b18:	2302      	movs	r3, #2
 8005b1a:	e073      	b.n	8005c04 <HAL_UART_Transmit+0x120>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2221      	movs	r2, #33	; 0x21
 8005b30:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b32:	f7fc f9d1 	bl	8001ed8 <HAL_GetTick>
 8005b36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	88fa      	ldrh	r2, [r7, #6]
 8005b3c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	88fa      	ldrh	r2, [r7, #6]
 8005b44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b50:	d108      	bne.n	8005b64 <HAL_UART_Transmit+0x80>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d104      	bne.n	8005b64 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	61bb      	str	r3, [r7, #24]
 8005b62:	e003      	b.n	8005b6c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005b74:	e02d      	b.n	8005bd2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	2180      	movs	r1, #128	; 0x80
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 fcb8 	bl	80064f6 <UART_WaitOnFlagUntilTimeout>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e039      	b.n	8005c04 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10b      	bne.n	8005bae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	881a      	ldrh	r2, [r3, #0]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ba2:	b292      	uxth	r2, r2
 8005ba4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	3302      	adds	r3, #2
 8005baa:	61bb      	str	r3, [r7, #24]
 8005bac:	e008      	b.n	8005bc0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	781a      	ldrb	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	b292      	uxth	r2, r2
 8005bb8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1cb      	bne.n	8005b76 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2200      	movs	r2, #0
 8005be6:	2140      	movs	r1, #64	; 0x40
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f000 fc84 	bl	80064f6 <UART_WaitOnFlagUntilTimeout>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e005      	b.n	8005c04 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	e000      	b.n	8005c04 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005c02:	2302      	movs	r3, #2
  }
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3720      	adds	r7, #32
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08a      	sub	sp, #40	; 0x28
 8005c10:	af02      	add	r7, sp, #8
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	603b      	str	r3, [r7, #0]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c20:	2b20      	cmp	r3, #32
 8005c22:	f040 80bf 	bne.w	8005da4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <HAL_UART_Receive+0x26>
 8005c2c:	88fb      	ldrh	r3, [r7, #6]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e0b7      	b.n	8005da6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d101      	bne.n	8005c44 <HAL_UART_Receive+0x38>
 8005c40:	2302      	movs	r3, #2
 8005c42:	e0b0      	b.n	8005da6 <HAL_UART_Receive+0x19a>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2222      	movs	r2, #34	; 0x22
 8005c58:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c60:	f7fc f93a 	bl	8001ed8 <HAL_GetTick>
 8005c64:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	88fa      	ldrh	r2, [r7, #6]
 8005c6a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	88fa      	ldrh	r2, [r7, #6]
 8005c72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c7e:	d10e      	bne.n	8005c9e <HAL_UART_Receive+0x92>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d105      	bne.n	8005c94 <HAL_UART_Receive+0x88>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005c8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c92:	e02d      	b.n	8005cf0 <HAL_UART_Receive+0xe4>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	22ff      	movs	r2, #255	; 0xff
 8005c98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c9c:	e028      	b.n	8005cf0 <HAL_UART_Receive+0xe4>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10d      	bne.n	8005cc2 <HAL_UART_Receive+0xb6>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d104      	bne.n	8005cb8 <HAL_UART_Receive+0xac>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	22ff      	movs	r2, #255	; 0xff
 8005cb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cb6:	e01b      	b.n	8005cf0 <HAL_UART_Receive+0xe4>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	227f      	movs	r2, #127	; 0x7f
 8005cbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cc0:	e016      	b.n	8005cf0 <HAL_UART_Receive+0xe4>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cca:	d10d      	bne.n	8005ce8 <HAL_UART_Receive+0xdc>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d104      	bne.n	8005cde <HAL_UART_Receive+0xd2>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	227f      	movs	r2, #127	; 0x7f
 8005cd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cdc:	e008      	b.n	8005cf0 <HAL_UART_Receive+0xe4>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	223f      	movs	r2, #63	; 0x3f
 8005ce2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ce6:	e003      	b.n	8005cf0 <HAL_UART_Receive+0xe4>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005cf6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d00:	d108      	bne.n	8005d14 <HAL_UART_Receive+0x108>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d104      	bne.n	8005d14 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	61bb      	str	r3, [r7, #24]
 8005d12:	e003      	b.n	8005d1c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005d24:	e033      	b.n	8005d8e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	2120      	movs	r1, #32
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 fbe0 	bl	80064f6 <UART_WaitOnFlagUntilTimeout>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e032      	b.n	8005da6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10c      	bne.n	8005d60 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	8a7b      	ldrh	r3, [r7, #18]
 8005d50:	4013      	ands	r3, r2
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	3302      	adds	r3, #2
 8005d5c:	61bb      	str	r3, [r7, #24]
 8005d5e:	e00d      	b.n	8005d7c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	8a7b      	ldrh	r3, [r7, #18]
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	4013      	ands	r3, r2
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	3b01      	subs	r3, #1
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1c5      	bne.n	8005d26 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005da0:	2300      	movs	r3, #0
 8005da2:	e000      	b.n	8005da6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005da4:	2302      	movs	r3, #2
  }
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3720      	adds	r7, #32
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
	...

08005db0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005db4:	b08a      	sub	sp, #40	; 0x28
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	689a      	ldr	r2, [r3, #8]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	4ba4      	ldr	r3, [pc, #656]	; (8006070 <UART_SetConfig+0x2c0>)
 8005de0:	4013      	ands	r3, r2
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	6812      	ldr	r2, [r2, #0]
 8005de6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005de8:	430b      	orrs	r3, r1
 8005dea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	68da      	ldr	r2, [r3, #12]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a99      	ldr	r2, [pc, #612]	; (8006074 <UART_SetConfig+0x2c4>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d004      	beq.n	8005e1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a90      	ldr	r2, [pc, #576]	; (8006078 <UART_SetConfig+0x2c8>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d126      	bne.n	8005e88 <UART_SetConfig+0xd8>
 8005e3a:	4b90      	ldr	r3, [pc, #576]	; (800607c <UART_SetConfig+0x2cc>)
 8005e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e40:	f003 0303 	and.w	r3, r3, #3
 8005e44:	2b03      	cmp	r3, #3
 8005e46:	d81b      	bhi.n	8005e80 <UART_SetConfig+0xd0>
 8005e48:	a201      	add	r2, pc, #4	; (adr r2, 8005e50 <UART_SetConfig+0xa0>)
 8005e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4e:	bf00      	nop
 8005e50:	08005e61 	.word	0x08005e61
 8005e54:	08005e71 	.word	0x08005e71
 8005e58:	08005e69 	.word	0x08005e69
 8005e5c:	08005e79 	.word	0x08005e79
 8005e60:	2301      	movs	r3, #1
 8005e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e66:	e116      	b.n	8006096 <UART_SetConfig+0x2e6>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e6e:	e112      	b.n	8006096 <UART_SetConfig+0x2e6>
 8005e70:	2304      	movs	r3, #4
 8005e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e76:	e10e      	b.n	8006096 <UART_SetConfig+0x2e6>
 8005e78:	2308      	movs	r3, #8
 8005e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e7e:	e10a      	b.n	8006096 <UART_SetConfig+0x2e6>
 8005e80:	2310      	movs	r3, #16
 8005e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e86:	e106      	b.n	8006096 <UART_SetConfig+0x2e6>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a7c      	ldr	r2, [pc, #496]	; (8006080 <UART_SetConfig+0x2d0>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d138      	bne.n	8005f04 <UART_SetConfig+0x154>
 8005e92:	4b7a      	ldr	r3, [pc, #488]	; (800607c <UART_SetConfig+0x2cc>)
 8005e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e98:	f003 030c 	and.w	r3, r3, #12
 8005e9c:	2b0c      	cmp	r3, #12
 8005e9e:	d82d      	bhi.n	8005efc <UART_SetConfig+0x14c>
 8005ea0:	a201      	add	r2, pc, #4	; (adr r2, 8005ea8 <UART_SetConfig+0xf8>)
 8005ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea6:	bf00      	nop
 8005ea8:	08005edd 	.word	0x08005edd
 8005eac:	08005efd 	.word	0x08005efd
 8005eb0:	08005efd 	.word	0x08005efd
 8005eb4:	08005efd 	.word	0x08005efd
 8005eb8:	08005eed 	.word	0x08005eed
 8005ebc:	08005efd 	.word	0x08005efd
 8005ec0:	08005efd 	.word	0x08005efd
 8005ec4:	08005efd 	.word	0x08005efd
 8005ec8:	08005ee5 	.word	0x08005ee5
 8005ecc:	08005efd 	.word	0x08005efd
 8005ed0:	08005efd 	.word	0x08005efd
 8005ed4:	08005efd 	.word	0x08005efd
 8005ed8:	08005ef5 	.word	0x08005ef5
 8005edc:	2300      	movs	r3, #0
 8005ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ee2:	e0d8      	b.n	8006096 <UART_SetConfig+0x2e6>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eea:	e0d4      	b.n	8006096 <UART_SetConfig+0x2e6>
 8005eec:	2304      	movs	r3, #4
 8005eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ef2:	e0d0      	b.n	8006096 <UART_SetConfig+0x2e6>
 8005ef4:	2308      	movs	r3, #8
 8005ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005efa:	e0cc      	b.n	8006096 <UART_SetConfig+0x2e6>
 8005efc:	2310      	movs	r3, #16
 8005efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f02:	e0c8      	b.n	8006096 <UART_SetConfig+0x2e6>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a5e      	ldr	r2, [pc, #376]	; (8006084 <UART_SetConfig+0x2d4>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d125      	bne.n	8005f5a <UART_SetConfig+0x1aa>
 8005f0e:	4b5b      	ldr	r3, [pc, #364]	; (800607c <UART_SetConfig+0x2cc>)
 8005f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f14:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f18:	2b30      	cmp	r3, #48	; 0x30
 8005f1a:	d016      	beq.n	8005f4a <UART_SetConfig+0x19a>
 8005f1c:	2b30      	cmp	r3, #48	; 0x30
 8005f1e:	d818      	bhi.n	8005f52 <UART_SetConfig+0x1a2>
 8005f20:	2b20      	cmp	r3, #32
 8005f22:	d00a      	beq.n	8005f3a <UART_SetConfig+0x18a>
 8005f24:	2b20      	cmp	r3, #32
 8005f26:	d814      	bhi.n	8005f52 <UART_SetConfig+0x1a2>
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d002      	beq.n	8005f32 <UART_SetConfig+0x182>
 8005f2c:	2b10      	cmp	r3, #16
 8005f2e:	d008      	beq.n	8005f42 <UART_SetConfig+0x192>
 8005f30:	e00f      	b.n	8005f52 <UART_SetConfig+0x1a2>
 8005f32:	2300      	movs	r3, #0
 8005f34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f38:	e0ad      	b.n	8006096 <UART_SetConfig+0x2e6>
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f40:	e0a9      	b.n	8006096 <UART_SetConfig+0x2e6>
 8005f42:	2304      	movs	r3, #4
 8005f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f48:	e0a5      	b.n	8006096 <UART_SetConfig+0x2e6>
 8005f4a:	2308      	movs	r3, #8
 8005f4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f50:	e0a1      	b.n	8006096 <UART_SetConfig+0x2e6>
 8005f52:	2310      	movs	r3, #16
 8005f54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f58:	e09d      	b.n	8006096 <UART_SetConfig+0x2e6>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a4a      	ldr	r2, [pc, #296]	; (8006088 <UART_SetConfig+0x2d8>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d125      	bne.n	8005fb0 <UART_SetConfig+0x200>
 8005f64:	4b45      	ldr	r3, [pc, #276]	; (800607c <UART_SetConfig+0x2cc>)
 8005f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f6a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005f6e:	2bc0      	cmp	r3, #192	; 0xc0
 8005f70:	d016      	beq.n	8005fa0 <UART_SetConfig+0x1f0>
 8005f72:	2bc0      	cmp	r3, #192	; 0xc0
 8005f74:	d818      	bhi.n	8005fa8 <UART_SetConfig+0x1f8>
 8005f76:	2b80      	cmp	r3, #128	; 0x80
 8005f78:	d00a      	beq.n	8005f90 <UART_SetConfig+0x1e0>
 8005f7a:	2b80      	cmp	r3, #128	; 0x80
 8005f7c:	d814      	bhi.n	8005fa8 <UART_SetConfig+0x1f8>
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d002      	beq.n	8005f88 <UART_SetConfig+0x1d8>
 8005f82:	2b40      	cmp	r3, #64	; 0x40
 8005f84:	d008      	beq.n	8005f98 <UART_SetConfig+0x1e8>
 8005f86:	e00f      	b.n	8005fa8 <UART_SetConfig+0x1f8>
 8005f88:	2300      	movs	r3, #0
 8005f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f8e:	e082      	b.n	8006096 <UART_SetConfig+0x2e6>
 8005f90:	2302      	movs	r3, #2
 8005f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f96:	e07e      	b.n	8006096 <UART_SetConfig+0x2e6>
 8005f98:	2304      	movs	r3, #4
 8005f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f9e:	e07a      	b.n	8006096 <UART_SetConfig+0x2e6>
 8005fa0:	2308      	movs	r3, #8
 8005fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fa6:	e076      	b.n	8006096 <UART_SetConfig+0x2e6>
 8005fa8:	2310      	movs	r3, #16
 8005faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fae:	e072      	b.n	8006096 <UART_SetConfig+0x2e6>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a35      	ldr	r2, [pc, #212]	; (800608c <UART_SetConfig+0x2dc>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d12a      	bne.n	8006010 <UART_SetConfig+0x260>
 8005fba:	4b30      	ldr	r3, [pc, #192]	; (800607c <UART_SetConfig+0x2cc>)
 8005fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fc8:	d01a      	beq.n	8006000 <UART_SetConfig+0x250>
 8005fca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fce:	d81b      	bhi.n	8006008 <UART_SetConfig+0x258>
 8005fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fd4:	d00c      	beq.n	8005ff0 <UART_SetConfig+0x240>
 8005fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fda:	d815      	bhi.n	8006008 <UART_SetConfig+0x258>
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d003      	beq.n	8005fe8 <UART_SetConfig+0x238>
 8005fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fe4:	d008      	beq.n	8005ff8 <UART_SetConfig+0x248>
 8005fe6:	e00f      	b.n	8006008 <UART_SetConfig+0x258>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fee:	e052      	b.n	8006096 <UART_SetConfig+0x2e6>
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ff6:	e04e      	b.n	8006096 <UART_SetConfig+0x2e6>
 8005ff8:	2304      	movs	r3, #4
 8005ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ffe:	e04a      	b.n	8006096 <UART_SetConfig+0x2e6>
 8006000:	2308      	movs	r3, #8
 8006002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006006:	e046      	b.n	8006096 <UART_SetConfig+0x2e6>
 8006008:	2310      	movs	r3, #16
 800600a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800600e:	e042      	b.n	8006096 <UART_SetConfig+0x2e6>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a17      	ldr	r2, [pc, #92]	; (8006074 <UART_SetConfig+0x2c4>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d13a      	bne.n	8006090 <UART_SetConfig+0x2e0>
 800601a:	4b18      	ldr	r3, [pc, #96]	; (800607c <UART_SetConfig+0x2cc>)
 800601c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006020:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006024:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006028:	d01a      	beq.n	8006060 <UART_SetConfig+0x2b0>
 800602a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800602e:	d81b      	bhi.n	8006068 <UART_SetConfig+0x2b8>
 8006030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006034:	d00c      	beq.n	8006050 <UART_SetConfig+0x2a0>
 8006036:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800603a:	d815      	bhi.n	8006068 <UART_SetConfig+0x2b8>
 800603c:	2b00      	cmp	r3, #0
 800603e:	d003      	beq.n	8006048 <UART_SetConfig+0x298>
 8006040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006044:	d008      	beq.n	8006058 <UART_SetConfig+0x2a8>
 8006046:	e00f      	b.n	8006068 <UART_SetConfig+0x2b8>
 8006048:	2300      	movs	r3, #0
 800604a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800604e:	e022      	b.n	8006096 <UART_SetConfig+0x2e6>
 8006050:	2302      	movs	r3, #2
 8006052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006056:	e01e      	b.n	8006096 <UART_SetConfig+0x2e6>
 8006058:	2304      	movs	r3, #4
 800605a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800605e:	e01a      	b.n	8006096 <UART_SetConfig+0x2e6>
 8006060:	2308      	movs	r3, #8
 8006062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006066:	e016      	b.n	8006096 <UART_SetConfig+0x2e6>
 8006068:	2310      	movs	r3, #16
 800606a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800606e:	e012      	b.n	8006096 <UART_SetConfig+0x2e6>
 8006070:	efff69f3 	.word	0xefff69f3
 8006074:	40008000 	.word	0x40008000
 8006078:	40013800 	.word	0x40013800
 800607c:	40021000 	.word	0x40021000
 8006080:	40004400 	.word	0x40004400
 8006084:	40004800 	.word	0x40004800
 8006088:	40004c00 	.word	0x40004c00
 800608c:	40005000 	.word	0x40005000
 8006090:	2310      	movs	r3, #16
 8006092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a9f      	ldr	r2, [pc, #636]	; (8006318 <UART_SetConfig+0x568>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d17a      	bne.n	8006196 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	d824      	bhi.n	80060f2 <UART_SetConfig+0x342>
 80060a8:	a201      	add	r2, pc, #4	; (adr r2, 80060b0 <UART_SetConfig+0x300>)
 80060aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ae:	bf00      	nop
 80060b0:	080060d5 	.word	0x080060d5
 80060b4:	080060f3 	.word	0x080060f3
 80060b8:	080060dd 	.word	0x080060dd
 80060bc:	080060f3 	.word	0x080060f3
 80060c0:	080060e3 	.word	0x080060e3
 80060c4:	080060f3 	.word	0x080060f3
 80060c8:	080060f3 	.word	0x080060f3
 80060cc:	080060f3 	.word	0x080060f3
 80060d0:	080060eb 	.word	0x080060eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060d4:	f7fd fdb4 	bl	8003c40 <HAL_RCC_GetPCLK1Freq>
 80060d8:	61f8      	str	r0, [r7, #28]
        break;
 80060da:	e010      	b.n	80060fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060dc:	4b8f      	ldr	r3, [pc, #572]	; (800631c <UART_SetConfig+0x56c>)
 80060de:	61fb      	str	r3, [r7, #28]
        break;
 80060e0:	e00d      	b.n	80060fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060e2:	f7fd fd15 	bl	8003b10 <HAL_RCC_GetSysClockFreq>
 80060e6:	61f8      	str	r0, [r7, #28]
        break;
 80060e8:	e009      	b.n	80060fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ee:	61fb      	str	r3, [r7, #28]
        break;
 80060f0:	e005      	b.n	80060fe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80060fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 80fb 	beq.w	80062fc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	4613      	mov	r3, r2
 800610c:	005b      	lsls	r3, r3, #1
 800610e:	4413      	add	r3, r2
 8006110:	69fa      	ldr	r2, [r7, #28]
 8006112:	429a      	cmp	r2, r3
 8006114:	d305      	bcc.n	8006122 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800611c:	69fa      	ldr	r2, [r7, #28]
 800611e:	429a      	cmp	r2, r3
 8006120:	d903      	bls.n	800612a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006128:	e0e8      	b.n	80062fc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	2200      	movs	r2, #0
 800612e:	461c      	mov	r4, r3
 8006130:	4615      	mov	r5, r2
 8006132:	f04f 0200 	mov.w	r2, #0
 8006136:	f04f 0300 	mov.w	r3, #0
 800613a:	022b      	lsls	r3, r5, #8
 800613c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006140:	0222      	lsls	r2, r4, #8
 8006142:	68f9      	ldr	r1, [r7, #12]
 8006144:	6849      	ldr	r1, [r1, #4]
 8006146:	0849      	lsrs	r1, r1, #1
 8006148:	2000      	movs	r0, #0
 800614a:	4688      	mov	r8, r1
 800614c:	4681      	mov	r9, r0
 800614e:	eb12 0a08 	adds.w	sl, r2, r8
 8006152:	eb43 0b09 	adc.w	fp, r3, r9
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	603b      	str	r3, [r7, #0]
 800615e:	607a      	str	r2, [r7, #4]
 8006160:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006164:	4650      	mov	r0, sl
 8006166:	4659      	mov	r1, fp
 8006168:	f7fa f89a 	bl	80002a0 <__aeabi_uldivmod>
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	4613      	mov	r3, r2
 8006172:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800617a:	d308      	bcc.n	800618e <UART_SetConfig+0x3de>
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006182:	d204      	bcs.n	800618e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	60da      	str	r2, [r3, #12]
 800618c:	e0b6      	b.n	80062fc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006194:	e0b2      	b.n	80062fc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800619e:	d15e      	bne.n	800625e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80061a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061a4:	2b08      	cmp	r3, #8
 80061a6:	d828      	bhi.n	80061fa <UART_SetConfig+0x44a>
 80061a8:	a201      	add	r2, pc, #4	; (adr r2, 80061b0 <UART_SetConfig+0x400>)
 80061aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ae:	bf00      	nop
 80061b0:	080061d5 	.word	0x080061d5
 80061b4:	080061dd 	.word	0x080061dd
 80061b8:	080061e5 	.word	0x080061e5
 80061bc:	080061fb 	.word	0x080061fb
 80061c0:	080061eb 	.word	0x080061eb
 80061c4:	080061fb 	.word	0x080061fb
 80061c8:	080061fb 	.word	0x080061fb
 80061cc:	080061fb 	.word	0x080061fb
 80061d0:	080061f3 	.word	0x080061f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061d4:	f7fd fd34 	bl	8003c40 <HAL_RCC_GetPCLK1Freq>
 80061d8:	61f8      	str	r0, [r7, #28]
        break;
 80061da:	e014      	b.n	8006206 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061dc:	f7fd fd46 	bl	8003c6c <HAL_RCC_GetPCLK2Freq>
 80061e0:	61f8      	str	r0, [r7, #28]
        break;
 80061e2:	e010      	b.n	8006206 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061e4:	4b4d      	ldr	r3, [pc, #308]	; (800631c <UART_SetConfig+0x56c>)
 80061e6:	61fb      	str	r3, [r7, #28]
        break;
 80061e8:	e00d      	b.n	8006206 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061ea:	f7fd fc91 	bl	8003b10 <HAL_RCC_GetSysClockFreq>
 80061ee:	61f8      	str	r0, [r7, #28]
        break;
 80061f0:	e009      	b.n	8006206 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061f6:	61fb      	str	r3, [r7, #28]
        break;
 80061f8:	e005      	b.n	8006206 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006204:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d077      	beq.n	80062fc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	005a      	lsls	r2, r3, #1
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	085b      	lsrs	r3, r3, #1
 8006216:	441a      	add	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006220:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	2b0f      	cmp	r3, #15
 8006226:	d916      	bls.n	8006256 <UART_SetConfig+0x4a6>
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800622e:	d212      	bcs.n	8006256 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	b29b      	uxth	r3, r3
 8006234:	f023 030f 	bic.w	r3, r3, #15
 8006238:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	085b      	lsrs	r3, r3, #1
 800623e:	b29b      	uxth	r3, r3
 8006240:	f003 0307 	and.w	r3, r3, #7
 8006244:	b29a      	uxth	r2, r3
 8006246:	8afb      	ldrh	r3, [r7, #22]
 8006248:	4313      	orrs	r3, r2
 800624a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	8afa      	ldrh	r2, [r7, #22]
 8006252:	60da      	str	r2, [r3, #12]
 8006254:	e052      	b.n	80062fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800625c:	e04e      	b.n	80062fc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800625e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006262:	2b08      	cmp	r3, #8
 8006264:	d827      	bhi.n	80062b6 <UART_SetConfig+0x506>
 8006266:	a201      	add	r2, pc, #4	; (adr r2, 800626c <UART_SetConfig+0x4bc>)
 8006268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626c:	08006291 	.word	0x08006291
 8006270:	08006299 	.word	0x08006299
 8006274:	080062a1 	.word	0x080062a1
 8006278:	080062b7 	.word	0x080062b7
 800627c:	080062a7 	.word	0x080062a7
 8006280:	080062b7 	.word	0x080062b7
 8006284:	080062b7 	.word	0x080062b7
 8006288:	080062b7 	.word	0x080062b7
 800628c:	080062af 	.word	0x080062af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006290:	f7fd fcd6 	bl	8003c40 <HAL_RCC_GetPCLK1Freq>
 8006294:	61f8      	str	r0, [r7, #28]
        break;
 8006296:	e014      	b.n	80062c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006298:	f7fd fce8 	bl	8003c6c <HAL_RCC_GetPCLK2Freq>
 800629c:	61f8      	str	r0, [r7, #28]
        break;
 800629e:	e010      	b.n	80062c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062a0:	4b1e      	ldr	r3, [pc, #120]	; (800631c <UART_SetConfig+0x56c>)
 80062a2:	61fb      	str	r3, [r7, #28]
        break;
 80062a4:	e00d      	b.n	80062c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062a6:	f7fd fc33 	bl	8003b10 <HAL_RCC_GetSysClockFreq>
 80062aa:	61f8      	str	r0, [r7, #28]
        break;
 80062ac:	e009      	b.n	80062c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062b2:	61fb      	str	r3, [r7, #28]
        break;
 80062b4:	e005      	b.n	80062c2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80062b6:	2300      	movs	r3, #0
 80062b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80062c0:	bf00      	nop
    }

    if (pclk != 0U)
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d019      	beq.n	80062fc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	085a      	lsrs	r2, r3, #1
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	441a      	add	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	2b0f      	cmp	r3, #15
 80062e0:	d909      	bls.n	80062f6 <UART_SetConfig+0x546>
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062e8:	d205      	bcs.n	80062f6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	60da      	str	r2, [r3, #12]
 80062f4:	e002      	b.n	80062fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006308:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800630c:	4618      	mov	r0, r3
 800630e:	3728      	adds	r7, #40	; 0x28
 8006310:	46bd      	mov	sp, r7
 8006312:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006316:	bf00      	nop
 8006318:	40008000 	.word	0x40008000
 800631c:	00f42400 	.word	0x00f42400

08006320 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	f003 0301 	and.w	r3, r3, #1
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00a      	beq.n	800634a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00a      	beq.n	800636c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	430a      	orrs	r2, r1
 800636a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	f003 0304 	and.w	r3, r3, #4
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00a      	beq.n	800638e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	430a      	orrs	r2, r1
 800638c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006392:	f003 0308 	and.w	r3, r3, #8
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00a      	beq.n	80063b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	430a      	orrs	r2, r1
 80063ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	f003 0310 	and.w	r3, r3, #16
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00a      	beq.n	80063d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	430a      	orrs	r2, r1
 80063d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d6:	f003 0320 	and.w	r3, r3, #32
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00a      	beq.n	80063f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	430a      	orrs	r2, r1
 80063f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d01a      	beq.n	8006436 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800641e:	d10a      	bne.n	8006436 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	430a      	orrs	r2, r1
 8006434:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00a      	beq.n	8006458 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	430a      	orrs	r2, r1
 8006456:	605a      	str	r2, [r3, #4]
  }
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af02      	add	r7, sp, #8
 800646a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006474:	f7fb fd30 	bl	8001ed8 <HAL_GetTick>
 8006478:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0308 	and.w	r3, r3, #8
 8006484:	2b08      	cmp	r3, #8
 8006486:	d10e      	bne.n	80064a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006488:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f82d 	bl	80064f6 <UART_WaitOnFlagUntilTimeout>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e023      	b.n	80064ee <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0304 	and.w	r3, r3, #4
 80064b0:	2b04      	cmp	r3, #4
 80064b2:	d10e      	bne.n	80064d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 f817 	bl	80064f6 <UART_WaitOnFlagUntilTimeout>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e00d      	b.n	80064ee <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2220      	movs	r2, #32
 80064d6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2220      	movs	r2, #32
 80064dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b09c      	sub	sp, #112	; 0x70
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	60f8      	str	r0, [r7, #12]
 80064fe:	60b9      	str	r1, [r7, #8]
 8006500:	603b      	str	r3, [r7, #0]
 8006502:	4613      	mov	r3, r2
 8006504:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006506:	e0a5      	b.n	8006654 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006508:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800650a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650e:	f000 80a1 	beq.w	8006654 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006512:	f7fb fce1 	bl	8001ed8 <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800651e:	429a      	cmp	r2, r3
 8006520:	d302      	bcc.n	8006528 <UART_WaitOnFlagUntilTimeout+0x32>
 8006522:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006524:	2b00      	cmp	r3, #0
 8006526:	d13e      	bne.n	80065a6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006538:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800653c:	667b      	str	r3, [r7, #100]	; 0x64
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	461a      	mov	r2, r3
 8006544:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006546:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006548:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800654c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800654e:	e841 2300 	strex	r3, r2, [r1]
 8006552:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1e6      	bne.n	8006528 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	3308      	adds	r3, #8
 8006560:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006564:	e853 3f00 	ldrex	r3, [r3]
 8006568:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800656a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656c:	f023 0301 	bic.w	r3, r3, #1
 8006570:	663b      	str	r3, [r7, #96]	; 0x60
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3308      	adds	r3, #8
 8006578:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800657a:	64ba      	str	r2, [r7, #72]	; 0x48
 800657c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006580:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006582:	e841 2300 	strex	r3, r2, [r1]
 8006586:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1e5      	bne.n	800655a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2220      	movs	r2, #32
 8006592:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2220      	movs	r2, #32
 8006598:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e067      	b.n	8006676 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d04f      	beq.n	8006654 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065c2:	d147      	bne.n	8006654 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065cc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d6:	e853 3f00 	ldrex	r3, [r3]
 80065da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	461a      	mov	r2, r3
 80065ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ec:	637b      	str	r3, [r7, #52]	; 0x34
 80065ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065f4:	e841 2300 	strex	r3, r2, [r1]
 80065f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80065fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1e6      	bne.n	80065ce <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	3308      	adds	r3, #8
 8006606:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	e853 3f00 	ldrex	r3, [r3]
 800660e:	613b      	str	r3, [r7, #16]
   return(result);
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	f023 0301 	bic.w	r3, r3, #1
 8006616:	66bb      	str	r3, [r7, #104]	; 0x68
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3308      	adds	r3, #8
 800661e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006620:	623a      	str	r2, [r7, #32]
 8006622:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006624:	69f9      	ldr	r1, [r7, #28]
 8006626:	6a3a      	ldr	r2, [r7, #32]
 8006628:	e841 2300 	strex	r3, r2, [r1]
 800662c:	61bb      	str	r3, [r7, #24]
   return(result);
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1e5      	bne.n	8006600 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2220      	movs	r2, #32
 8006638:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2220      	movs	r2, #32
 800663e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2220      	movs	r2, #32
 8006644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e010      	b.n	8006676 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	69da      	ldr	r2, [r3, #28]
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	4013      	ands	r3, r2
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	429a      	cmp	r2, r3
 8006662:	bf0c      	ite	eq
 8006664:	2301      	moveq	r3, #1
 8006666:	2300      	movne	r3, #0
 8006668:	b2db      	uxtb	r3, r3
 800666a:	461a      	mov	r2, r3
 800666c:	79fb      	ldrb	r3, [r7, #7]
 800666e:	429a      	cmp	r2, r3
 8006670:	f43f af4a 	beq.w	8006508 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3770      	adds	r7, #112	; 0x70
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <atoi>:
 800667e:	220a      	movs	r2, #10
 8006680:	2100      	movs	r1, #0
 8006682:	f000 ba13 	b.w	8006aac <strtol>
	...

08006688 <__errno>:
 8006688:	4b01      	ldr	r3, [pc, #4]	; (8006690 <__errno+0x8>)
 800668a:	6818      	ldr	r0, [r3, #0]
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	20000028 	.word	0x20000028

08006694 <__libc_init_array>:
 8006694:	b570      	push	{r4, r5, r6, lr}
 8006696:	4d0d      	ldr	r5, [pc, #52]	; (80066cc <__libc_init_array+0x38>)
 8006698:	4c0d      	ldr	r4, [pc, #52]	; (80066d0 <__libc_init_array+0x3c>)
 800669a:	1b64      	subs	r4, r4, r5
 800669c:	10a4      	asrs	r4, r4, #2
 800669e:	2600      	movs	r6, #0
 80066a0:	42a6      	cmp	r6, r4
 80066a2:	d109      	bne.n	80066b8 <__libc_init_array+0x24>
 80066a4:	4d0b      	ldr	r5, [pc, #44]	; (80066d4 <__libc_init_array+0x40>)
 80066a6:	4c0c      	ldr	r4, [pc, #48]	; (80066d8 <__libc_init_array+0x44>)
 80066a8:	f001 fe10 	bl	80082cc <_init>
 80066ac:	1b64      	subs	r4, r4, r5
 80066ae:	10a4      	asrs	r4, r4, #2
 80066b0:	2600      	movs	r6, #0
 80066b2:	42a6      	cmp	r6, r4
 80066b4:	d105      	bne.n	80066c2 <__libc_init_array+0x2e>
 80066b6:	bd70      	pop	{r4, r5, r6, pc}
 80066b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80066bc:	4798      	blx	r3
 80066be:	3601      	adds	r6, #1
 80066c0:	e7ee      	b.n	80066a0 <__libc_init_array+0xc>
 80066c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066c6:	4798      	blx	r3
 80066c8:	3601      	adds	r6, #1
 80066ca:	e7f2      	b.n	80066b2 <__libc_init_array+0x1e>
 80066cc:	0800877c 	.word	0x0800877c
 80066d0:	0800877c 	.word	0x0800877c
 80066d4:	0800877c 	.word	0x0800877c
 80066d8:	08008780 	.word	0x08008780

080066dc <memset>:
 80066dc:	4402      	add	r2, r0
 80066de:	4603      	mov	r3, r0
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d100      	bne.n	80066e6 <memset+0xa>
 80066e4:	4770      	bx	lr
 80066e6:	f803 1b01 	strb.w	r1, [r3], #1
 80066ea:	e7f9      	b.n	80066e0 <memset+0x4>

080066ec <iprintf>:
 80066ec:	b40f      	push	{r0, r1, r2, r3}
 80066ee:	4b0a      	ldr	r3, [pc, #40]	; (8006718 <iprintf+0x2c>)
 80066f0:	b513      	push	{r0, r1, r4, lr}
 80066f2:	681c      	ldr	r4, [r3, #0]
 80066f4:	b124      	cbz	r4, 8006700 <iprintf+0x14>
 80066f6:	69a3      	ldr	r3, [r4, #24]
 80066f8:	b913      	cbnz	r3, 8006700 <iprintf+0x14>
 80066fa:	4620      	mov	r0, r4
 80066fc:	f000 fbfa 	bl	8006ef4 <__sinit>
 8006700:	ab05      	add	r3, sp, #20
 8006702:	9a04      	ldr	r2, [sp, #16]
 8006704:	68a1      	ldr	r1, [r4, #8]
 8006706:	9301      	str	r3, [sp, #4]
 8006708:	4620      	mov	r0, r4
 800670a:	f001 f801 	bl	8007710 <_vfiprintf_r>
 800670e:	b002      	add	sp, #8
 8006710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006714:	b004      	add	sp, #16
 8006716:	4770      	bx	lr
 8006718:	20000028 	.word	0x20000028

0800671c <_puts_r>:
 800671c:	b570      	push	{r4, r5, r6, lr}
 800671e:	460e      	mov	r6, r1
 8006720:	4605      	mov	r5, r0
 8006722:	b118      	cbz	r0, 800672c <_puts_r+0x10>
 8006724:	6983      	ldr	r3, [r0, #24]
 8006726:	b90b      	cbnz	r3, 800672c <_puts_r+0x10>
 8006728:	f000 fbe4 	bl	8006ef4 <__sinit>
 800672c:	69ab      	ldr	r3, [r5, #24]
 800672e:	68ac      	ldr	r4, [r5, #8]
 8006730:	b913      	cbnz	r3, 8006738 <_puts_r+0x1c>
 8006732:	4628      	mov	r0, r5
 8006734:	f000 fbde 	bl	8006ef4 <__sinit>
 8006738:	4b2c      	ldr	r3, [pc, #176]	; (80067ec <_puts_r+0xd0>)
 800673a:	429c      	cmp	r4, r3
 800673c:	d120      	bne.n	8006780 <_puts_r+0x64>
 800673e:	686c      	ldr	r4, [r5, #4]
 8006740:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006742:	07db      	lsls	r3, r3, #31
 8006744:	d405      	bmi.n	8006752 <_puts_r+0x36>
 8006746:	89a3      	ldrh	r3, [r4, #12]
 8006748:	0598      	lsls	r0, r3, #22
 800674a:	d402      	bmi.n	8006752 <_puts_r+0x36>
 800674c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800674e:	f000 fc81 	bl	8007054 <__retarget_lock_acquire_recursive>
 8006752:	89a3      	ldrh	r3, [r4, #12]
 8006754:	0719      	lsls	r1, r3, #28
 8006756:	d51d      	bpl.n	8006794 <_puts_r+0x78>
 8006758:	6923      	ldr	r3, [r4, #16]
 800675a:	b1db      	cbz	r3, 8006794 <_puts_r+0x78>
 800675c:	3e01      	subs	r6, #1
 800675e:	68a3      	ldr	r3, [r4, #8]
 8006760:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006764:	3b01      	subs	r3, #1
 8006766:	60a3      	str	r3, [r4, #8]
 8006768:	bb39      	cbnz	r1, 80067ba <_puts_r+0x9e>
 800676a:	2b00      	cmp	r3, #0
 800676c:	da38      	bge.n	80067e0 <_puts_r+0xc4>
 800676e:	4622      	mov	r2, r4
 8006770:	210a      	movs	r1, #10
 8006772:	4628      	mov	r0, r5
 8006774:	f000 f9a4 	bl	8006ac0 <__swbuf_r>
 8006778:	3001      	adds	r0, #1
 800677a:	d011      	beq.n	80067a0 <_puts_r+0x84>
 800677c:	250a      	movs	r5, #10
 800677e:	e011      	b.n	80067a4 <_puts_r+0x88>
 8006780:	4b1b      	ldr	r3, [pc, #108]	; (80067f0 <_puts_r+0xd4>)
 8006782:	429c      	cmp	r4, r3
 8006784:	d101      	bne.n	800678a <_puts_r+0x6e>
 8006786:	68ac      	ldr	r4, [r5, #8]
 8006788:	e7da      	b.n	8006740 <_puts_r+0x24>
 800678a:	4b1a      	ldr	r3, [pc, #104]	; (80067f4 <_puts_r+0xd8>)
 800678c:	429c      	cmp	r4, r3
 800678e:	bf08      	it	eq
 8006790:	68ec      	ldreq	r4, [r5, #12]
 8006792:	e7d5      	b.n	8006740 <_puts_r+0x24>
 8006794:	4621      	mov	r1, r4
 8006796:	4628      	mov	r0, r5
 8006798:	f000 f9f6 	bl	8006b88 <__swsetup_r>
 800679c:	2800      	cmp	r0, #0
 800679e:	d0dd      	beq.n	800675c <_puts_r+0x40>
 80067a0:	f04f 35ff 	mov.w	r5, #4294967295
 80067a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067a6:	07da      	lsls	r2, r3, #31
 80067a8:	d405      	bmi.n	80067b6 <_puts_r+0x9a>
 80067aa:	89a3      	ldrh	r3, [r4, #12]
 80067ac:	059b      	lsls	r3, r3, #22
 80067ae:	d402      	bmi.n	80067b6 <_puts_r+0x9a>
 80067b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067b2:	f000 fc50 	bl	8007056 <__retarget_lock_release_recursive>
 80067b6:	4628      	mov	r0, r5
 80067b8:	bd70      	pop	{r4, r5, r6, pc}
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	da04      	bge.n	80067c8 <_puts_r+0xac>
 80067be:	69a2      	ldr	r2, [r4, #24]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	dc06      	bgt.n	80067d2 <_puts_r+0xb6>
 80067c4:	290a      	cmp	r1, #10
 80067c6:	d004      	beq.n	80067d2 <_puts_r+0xb6>
 80067c8:	6823      	ldr	r3, [r4, #0]
 80067ca:	1c5a      	adds	r2, r3, #1
 80067cc:	6022      	str	r2, [r4, #0]
 80067ce:	7019      	strb	r1, [r3, #0]
 80067d0:	e7c5      	b.n	800675e <_puts_r+0x42>
 80067d2:	4622      	mov	r2, r4
 80067d4:	4628      	mov	r0, r5
 80067d6:	f000 f973 	bl	8006ac0 <__swbuf_r>
 80067da:	3001      	adds	r0, #1
 80067dc:	d1bf      	bne.n	800675e <_puts_r+0x42>
 80067de:	e7df      	b.n	80067a0 <_puts_r+0x84>
 80067e0:	6823      	ldr	r3, [r4, #0]
 80067e2:	250a      	movs	r5, #10
 80067e4:	1c5a      	adds	r2, r3, #1
 80067e6:	6022      	str	r2, [r4, #0]
 80067e8:	701d      	strb	r5, [r3, #0]
 80067ea:	e7db      	b.n	80067a4 <_puts_r+0x88>
 80067ec:	080086e4 	.word	0x080086e4
 80067f0:	08008704 	.word	0x08008704
 80067f4:	080086c4 	.word	0x080086c4

080067f8 <puts>:
 80067f8:	4b02      	ldr	r3, [pc, #8]	; (8006804 <puts+0xc>)
 80067fa:	4601      	mov	r1, r0
 80067fc:	6818      	ldr	r0, [r3, #0]
 80067fe:	f7ff bf8d 	b.w	800671c <_puts_r>
 8006802:	bf00      	nop
 8006804:	20000028 	.word	0x20000028

08006808 <siscanf>:
 8006808:	b40e      	push	{r1, r2, r3}
 800680a:	b510      	push	{r4, lr}
 800680c:	b09f      	sub	sp, #124	; 0x7c
 800680e:	ac21      	add	r4, sp, #132	; 0x84
 8006810:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006814:	f854 2b04 	ldr.w	r2, [r4], #4
 8006818:	9201      	str	r2, [sp, #4]
 800681a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800681e:	9004      	str	r0, [sp, #16]
 8006820:	9008      	str	r0, [sp, #32]
 8006822:	f7f9 fcdf 	bl	80001e4 <strlen>
 8006826:	4b0c      	ldr	r3, [pc, #48]	; (8006858 <siscanf+0x50>)
 8006828:	9005      	str	r0, [sp, #20]
 800682a:	9009      	str	r0, [sp, #36]	; 0x24
 800682c:	930d      	str	r3, [sp, #52]	; 0x34
 800682e:	480b      	ldr	r0, [pc, #44]	; (800685c <siscanf+0x54>)
 8006830:	9a01      	ldr	r2, [sp, #4]
 8006832:	6800      	ldr	r0, [r0, #0]
 8006834:	9403      	str	r4, [sp, #12]
 8006836:	2300      	movs	r3, #0
 8006838:	9311      	str	r3, [sp, #68]	; 0x44
 800683a:	9316      	str	r3, [sp, #88]	; 0x58
 800683c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006840:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006844:	a904      	add	r1, sp, #16
 8006846:	4623      	mov	r3, r4
 8006848:	f000 fdc0 	bl	80073cc <__ssvfiscanf_r>
 800684c:	b01f      	add	sp, #124	; 0x7c
 800684e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006852:	b003      	add	sp, #12
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	08006883 	.word	0x08006883
 800685c:	20000028 	.word	0x20000028

08006860 <__sread>:
 8006860:	b510      	push	{r4, lr}
 8006862:	460c      	mov	r4, r1
 8006864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006868:	f001 fb68 	bl	8007f3c <_read_r>
 800686c:	2800      	cmp	r0, #0
 800686e:	bfab      	itete	ge
 8006870:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006872:	89a3      	ldrhlt	r3, [r4, #12]
 8006874:	181b      	addge	r3, r3, r0
 8006876:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800687a:	bfac      	ite	ge
 800687c:	6563      	strge	r3, [r4, #84]	; 0x54
 800687e:	81a3      	strhlt	r3, [r4, #12]
 8006880:	bd10      	pop	{r4, pc}

08006882 <__seofread>:
 8006882:	2000      	movs	r0, #0
 8006884:	4770      	bx	lr

08006886 <__swrite>:
 8006886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800688a:	461f      	mov	r7, r3
 800688c:	898b      	ldrh	r3, [r1, #12]
 800688e:	05db      	lsls	r3, r3, #23
 8006890:	4605      	mov	r5, r0
 8006892:	460c      	mov	r4, r1
 8006894:	4616      	mov	r6, r2
 8006896:	d505      	bpl.n	80068a4 <__swrite+0x1e>
 8006898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800689c:	2302      	movs	r3, #2
 800689e:	2200      	movs	r2, #0
 80068a0:	f000 fbda 	bl	8007058 <_lseek_r>
 80068a4:	89a3      	ldrh	r3, [r4, #12]
 80068a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068ae:	81a3      	strh	r3, [r4, #12]
 80068b0:	4632      	mov	r2, r6
 80068b2:	463b      	mov	r3, r7
 80068b4:	4628      	mov	r0, r5
 80068b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068ba:	f000 b953 	b.w	8006b64 <_write_r>

080068be <__sseek>:
 80068be:	b510      	push	{r4, lr}
 80068c0:	460c      	mov	r4, r1
 80068c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c6:	f000 fbc7 	bl	8007058 <_lseek_r>
 80068ca:	1c43      	adds	r3, r0, #1
 80068cc:	89a3      	ldrh	r3, [r4, #12]
 80068ce:	bf15      	itete	ne
 80068d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80068d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80068d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80068da:	81a3      	strheq	r3, [r4, #12]
 80068dc:	bf18      	it	ne
 80068de:	81a3      	strhne	r3, [r4, #12]
 80068e0:	bd10      	pop	{r4, pc}

080068e2 <__sclose>:
 80068e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068e6:	f000 b9db 	b.w	8006ca0 <_close_r>
	...

080068ec <strtok>:
 80068ec:	4b16      	ldr	r3, [pc, #88]	; (8006948 <strtok+0x5c>)
 80068ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80068f0:	681e      	ldr	r6, [r3, #0]
 80068f2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80068f4:	4605      	mov	r5, r0
 80068f6:	b9fc      	cbnz	r4, 8006938 <strtok+0x4c>
 80068f8:	2050      	movs	r0, #80	; 0x50
 80068fa:	9101      	str	r1, [sp, #4]
 80068fc:	f000 fc24 	bl	8007148 <malloc>
 8006900:	9901      	ldr	r1, [sp, #4]
 8006902:	65b0      	str	r0, [r6, #88]	; 0x58
 8006904:	4602      	mov	r2, r0
 8006906:	b920      	cbnz	r0, 8006912 <strtok+0x26>
 8006908:	4b10      	ldr	r3, [pc, #64]	; (800694c <strtok+0x60>)
 800690a:	4811      	ldr	r0, [pc, #68]	; (8006950 <strtok+0x64>)
 800690c:	2157      	movs	r1, #87	; 0x57
 800690e:	f000 f9a9 	bl	8006c64 <__assert_func>
 8006912:	e9c0 4400 	strd	r4, r4, [r0]
 8006916:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800691a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800691e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006922:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006926:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800692a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800692e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006932:	6184      	str	r4, [r0, #24]
 8006934:	7704      	strb	r4, [r0, #28]
 8006936:	6244      	str	r4, [r0, #36]	; 0x24
 8006938:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800693a:	2301      	movs	r3, #1
 800693c:	4628      	mov	r0, r5
 800693e:	b002      	add	sp, #8
 8006940:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006944:	f000 b806 	b.w	8006954 <__strtok_r>
 8006948:	20000028 	.word	0x20000028
 800694c:	08008510 	.word	0x08008510
 8006950:	08008527 	.word	0x08008527

08006954 <__strtok_r>:
 8006954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006956:	b908      	cbnz	r0, 800695c <__strtok_r+0x8>
 8006958:	6810      	ldr	r0, [r2, #0]
 800695a:	b188      	cbz	r0, 8006980 <__strtok_r+0x2c>
 800695c:	4604      	mov	r4, r0
 800695e:	4620      	mov	r0, r4
 8006960:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006964:	460f      	mov	r7, r1
 8006966:	f817 6b01 	ldrb.w	r6, [r7], #1
 800696a:	b91e      	cbnz	r6, 8006974 <__strtok_r+0x20>
 800696c:	b965      	cbnz	r5, 8006988 <__strtok_r+0x34>
 800696e:	6015      	str	r5, [r2, #0]
 8006970:	4628      	mov	r0, r5
 8006972:	e005      	b.n	8006980 <__strtok_r+0x2c>
 8006974:	42b5      	cmp	r5, r6
 8006976:	d1f6      	bne.n	8006966 <__strtok_r+0x12>
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1f0      	bne.n	800695e <__strtok_r+0xa>
 800697c:	6014      	str	r4, [r2, #0]
 800697e:	7003      	strb	r3, [r0, #0]
 8006980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006982:	461c      	mov	r4, r3
 8006984:	e00c      	b.n	80069a0 <__strtok_r+0x4c>
 8006986:	b915      	cbnz	r5, 800698e <__strtok_r+0x3a>
 8006988:	f814 3b01 	ldrb.w	r3, [r4], #1
 800698c:	460e      	mov	r6, r1
 800698e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006992:	42ab      	cmp	r3, r5
 8006994:	d1f7      	bne.n	8006986 <__strtok_r+0x32>
 8006996:	2b00      	cmp	r3, #0
 8006998:	d0f3      	beq.n	8006982 <__strtok_r+0x2e>
 800699a:	2300      	movs	r3, #0
 800699c:	f804 3c01 	strb.w	r3, [r4, #-1]
 80069a0:	6014      	str	r4, [r2, #0]
 80069a2:	e7ed      	b.n	8006980 <__strtok_r+0x2c>

080069a4 <_strtol_l.constprop.0>:
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069aa:	d001      	beq.n	80069b0 <_strtol_l.constprop.0+0xc>
 80069ac:	2b24      	cmp	r3, #36	; 0x24
 80069ae:	d906      	bls.n	80069be <_strtol_l.constprop.0+0x1a>
 80069b0:	f7ff fe6a 	bl	8006688 <__errno>
 80069b4:	2316      	movs	r3, #22
 80069b6:	6003      	str	r3, [r0, #0]
 80069b8:	2000      	movs	r0, #0
 80069ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069be:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006aa4 <_strtol_l.constprop.0+0x100>
 80069c2:	460d      	mov	r5, r1
 80069c4:	462e      	mov	r6, r5
 80069c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069ca:	f814 700c 	ldrb.w	r7, [r4, ip]
 80069ce:	f017 0708 	ands.w	r7, r7, #8
 80069d2:	d1f7      	bne.n	80069c4 <_strtol_l.constprop.0+0x20>
 80069d4:	2c2d      	cmp	r4, #45	; 0x2d
 80069d6:	d132      	bne.n	8006a3e <_strtol_l.constprop.0+0x9a>
 80069d8:	782c      	ldrb	r4, [r5, #0]
 80069da:	2701      	movs	r7, #1
 80069dc:	1cb5      	adds	r5, r6, #2
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d05b      	beq.n	8006a9a <_strtol_l.constprop.0+0xf6>
 80069e2:	2b10      	cmp	r3, #16
 80069e4:	d109      	bne.n	80069fa <_strtol_l.constprop.0+0x56>
 80069e6:	2c30      	cmp	r4, #48	; 0x30
 80069e8:	d107      	bne.n	80069fa <_strtol_l.constprop.0+0x56>
 80069ea:	782c      	ldrb	r4, [r5, #0]
 80069ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80069f0:	2c58      	cmp	r4, #88	; 0x58
 80069f2:	d14d      	bne.n	8006a90 <_strtol_l.constprop.0+0xec>
 80069f4:	786c      	ldrb	r4, [r5, #1]
 80069f6:	2310      	movs	r3, #16
 80069f8:	3502      	adds	r5, #2
 80069fa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80069fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a02:	f04f 0c00 	mov.w	ip, #0
 8006a06:	fbb8 f9f3 	udiv	r9, r8, r3
 8006a0a:	4666      	mov	r6, ip
 8006a0c:	fb03 8a19 	mls	sl, r3, r9, r8
 8006a10:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006a14:	f1be 0f09 	cmp.w	lr, #9
 8006a18:	d816      	bhi.n	8006a48 <_strtol_l.constprop.0+0xa4>
 8006a1a:	4674      	mov	r4, lr
 8006a1c:	42a3      	cmp	r3, r4
 8006a1e:	dd24      	ble.n	8006a6a <_strtol_l.constprop.0+0xc6>
 8006a20:	f1bc 0f00 	cmp.w	ip, #0
 8006a24:	db1e      	blt.n	8006a64 <_strtol_l.constprop.0+0xc0>
 8006a26:	45b1      	cmp	r9, r6
 8006a28:	d31c      	bcc.n	8006a64 <_strtol_l.constprop.0+0xc0>
 8006a2a:	d101      	bne.n	8006a30 <_strtol_l.constprop.0+0x8c>
 8006a2c:	45a2      	cmp	sl, r4
 8006a2e:	db19      	blt.n	8006a64 <_strtol_l.constprop.0+0xc0>
 8006a30:	fb06 4603 	mla	r6, r6, r3, r4
 8006a34:	f04f 0c01 	mov.w	ip, #1
 8006a38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a3c:	e7e8      	b.n	8006a10 <_strtol_l.constprop.0+0x6c>
 8006a3e:	2c2b      	cmp	r4, #43	; 0x2b
 8006a40:	bf04      	itt	eq
 8006a42:	782c      	ldrbeq	r4, [r5, #0]
 8006a44:	1cb5      	addeq	r5, r6, #2
 8006a46:	e7ca      	b.n	80069de <_strtol_l.constprop.0+0x3a>
 8006a48:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006a4c:	f1be 0f19 	cmp.w	lr, #25
 8006a50:	d801      	bhi.n	8006a56 <_strtol_l.constprop.0+0xb2>
 8006a52:	3c37      	subs	r4, #55	; 0x37
 8006a54:	e7e2      	b.n	8006a1c <_strtol_l.constprop.0+0x78>
 8006a56:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006a5a:	f1be 0f19 	cmp.w	lr, #25
 8006a5e:	d804      	bhi.n	8006a6a <_strtol_l.constprop.0+0xc6>
 8006a60:	3c57      	subs	r4, #87	; 0x57
 8006a62:	e7db      	b.n	8006a1c <_strtol_l.constprop.0+0x78>
 8006a64:	f04f 3cff 	mov.w	ip, #4294967295
 8006a68:	e7e6      	b.n	8006a38 <_strtol_l.constprop.0+0x94>
 8006a6a:	f1bc 0f00 	cmp.w	ip, #0
 8006a6e:	da05      	bge.n	8006a7c <_strtol_l.constprop.0+0xd8>
 8006a70:	2322      	movs	r3, #34	; 0x22
 8006a72:	6003      	str	r3, [r0, #0]
 8006a74:	4646      	mov	r6, r8
 8006a76:	b942      	cbnz	r2, 8006a8a <_strtol_l.constprop.0+0xe6>
 8006a78:	4630      	mov	r0, r6
 8006a7a:	e79e      	b.n	80069ba <_strtol_l.constprop.0+0x16>
 8006a7c:	b107      	cbz	r7, 8006a80 <_strtol_l.constprop.0+0xdc>
 8006a7e:	4276      	negs	r6, r6
 8006a80:	2a00      	cmp	r2, #0
 8006a82:	d0f9      	beq.n	8006a78 <_strtol_l.constprop.0+0xd4>
 8006a84:	f1bc 0f00 	cmp.w	ip, #0
 8006a88:	d000      	beq.n	8006a8c <_strtol_l.constprop.0+0xe8>
 8006a8a:	1e69      	subs	r1, r5, #1
 8006a8c:	6011      	str	r1, [r2, #0]
 8006a8e:	e7f3      	b.n	8006a78 <_strtol_l.constprop.0+0xd4>
 8006a90:	2430      	movs	r4, #48	; 0x30
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1b1      	bne.n	80069fa <_strtol_l.constprop.0+0x56>
 8006a96:	2308      	movs	r3, #8
 8006a98:	e7af      	b.n	80069fa <_strtol_l.constprop.0+0x56>
 8006a9a:	2c30      	cmp	r4, #48	; 0x30
 8006a9c:	d0a5      	beq.n	80069ea <_strtol_l.constprop.0+0x46>
 8006a9e:	230a      	movs	r3, #10
 8006aa0:	e7ab      	b.n	80069fa <_strtol_l.constprop.0+0x56>
 8006aa2:	bf00      	nop
 8006aa4:	080085c1 	.word	0x080085c1

08006aa8 <_strtol_r>:
 8006aa8:	f7ff bf7c 	b.w	80069a4 <_strtol_l.constprop.0>

08006aac <strtol>:
 8006aac:	4613      	mov	r3, r2
 8006aae:	460a      	mov	r2, r1
 8006ab0:	4601      	mov	r1, r0
 8006ab2:	4802      	ldr	r0, [pc, #8]	; (8006abc <strtol+0x10>)
 8006ab4:	6800      	ldr	r0, [r0, #0]
 8006ab6:	f7ff bf75 	b.w	80069a4 <_strtol_l.constprop.0>
 8006aba:	bf00      	nop
 8006abc:	20000028 	.word	0x20000028

08006ac0 <__swbuf_r>:
 8006ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac2:	460e      	mov	r6, r1
 8006ac4:	4614      	mov	r4, r2
 8006ac6:	4605      	mov	r5, r0
 8006ac8:	b118      	cbz	r0, 8006ad2 <__swbuf_r+0x12>
 8006aca:	6983      	ldr	r3, [r0, #24]
 8006acc:	b90b      	cbnz	r3, 8006ad2 <__swbuf_r+0x12>
 8006ace:	f000 fa11 	bl	8006ef4 <__sinit>
 8006ad2:	4b21      	ldr	r3, [pc, #132]	; (8006b58 <__swbuf_r+0x98>)
 8006ad4:	429c      	cmp	r4, r3
 8006ad6:	d12b      	bne.n	8006b30 <__swbuf_r+0x70>
 8006ad8:	686c      	ldr	r4, [r5, #4]
 8006ada:	69a3      	ldr	r3, [r4, #24]
 8006adc:	60a3      	str	r3, [r4, #8]
 8006ade:	89a3      	ldrh	r3, [r4, #12]
 8006ae0:	071a      	lsls	r2, r3, #28
 8006ae2:	d52f      	bpl.n	8006b44 <__swbuf_r+0x84>
 8006ae4:	6923      	ldr	r3, [r4, #16]
 8006ae6:	b36b      	cbz	r3, 8006b44 <__swbuf_r+0x84>
 8006ae8:	6923      	ldr	r3, [r4, #16]
 8006aea:	6820      	ldr	r0, [r4, #0]
 8006aec:	1ac0      	subs	r0, r0, r3
 8006aee:	6963      	ldr	r3, [r4, #20]
 8006af0:	b2f6      	uxtb	r6, r6
 8006af2:	4283      	cmp	r3, r0
 8006af4:	4637      	mov	r7, r6
 8006af6:	dc04      	bgt.n	8006b02 <__swbuf_r+0x42>
 8006af8:	4621      	mov	r1, r4
 8006afa:	4628      	mov	r0, r5
 8006afc:	f000 f966 	bl	8006dcc <_fflush_r>
 8006b00:	bb30      	cbnz	r0, 8006b50 <__swbuf_r+0x90>
 8006b02:	68a3      	ldr	r3, [r4, #8]
 8006b04:	3b01      	subs	r3, #1
 8006b06:	60a3      	str	r3, [r4, #8]
 8006b08:	6823      	ldr	r3, [r4, #0]
 8006b0a:	1c5a      	adds	r2, r3, #1
 8006b0c:	6022      	str	r2, [r4, #0]
 8006b0e:	701e      	strb	r6, [r3, #0]
 8006b10:	6963      	ldr	r3, [r4, #20]
 8006b12:	3001      	adds	r0, #1
 8006b14:	4283      	cmp	r3, r0
 8006b16:	d004      	beq.n	8006b22 <__swbuf_r+0x62>
 8006b18:	89a3      	ldrh	r3, [r4, #12]
 8006b1a:	07db      	lsls	r3, r3, #31
 8006b1c:	d506      	bpl.n	8006b2c <__swbuf_r+0x6c>
 8006b1e:	2e0a      	cmp	r6, #10
 8006b20:	d104      	bne.n	8006b2c <__swbuf_r+0x6c>
 8006b22:	4621      	mov	r1, r4
 8006b24:	4628      	mov	r0, r5
 8006b26:	f000 f951 	bl	8006dcc <_fflush_r>
 8006b2a:	b988      	cbnz	r0, 8006b50 <__swbuf_r+0x90>
 8006b2c:	4638      	mov	r0, r7
 8006b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b30:	4b0a      	ldr	r3, [pc, #40]	; (8006b5c <__swbuf_r+0x9c>)
 8006b32:	429c      	cmp	r4, r3
 8006b34:	d101      	bne.n	8006b3a <__swbuf_r+0x7a>
 8006b36:	68ac      	ldr	r4, [r5, #8]
 8006b38:	e7cf      	b.n	8006ada <__swbuf_r+0x1a>
 8006b3a:	4b09      	ldr	r3, [pc, #36]	; (8006b60 <__swbuf_r+0xa0>)
 8006b3c:	429c      	cmp	r4, r3
 8006b3e:	bf08      	it	eq
 8006b40:	68ec      	ldreq	r4, [r5, #12]
 8006b42:	e7ca      	b.n	8006ada <__swbuf_r+0x1a>
 8006b44:	4621      	mov	r1, r4
 8006b46:	4628      	mov	r0, r5
 8006b48:	f000 f81e 	bl	8006b88 <__swsetup_r>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	d0cb      	beq.n	8006ae8 <__swbuf_r+0x28>
 8006b50:	f04f 37ff 	mov.w	r7, #4294967295
 8006b54:	e7ea      	b.n	8006b2c <__swbuf_r+0x6c>
 8006b56:	bf00      	nop
 8006b58:	080086e4 	.word	0x080086e4
 8006b5c:	08008704 	.word	0x08008704
 8006b60:	080086c4 	.word	0x080086c4

08006b64 <_write_r>:
 8006b64:	b538      	push	{r3, r4, r5, lr}
 8006b66:	4d07      	ldr	r5, [pc, #28]	; (8006b84 <_write_r+0x20>)
 8006b68:	4604      	mov	r4, r0
 8006b6a:	4608      	mov	r0, r1
 8006b6c:	4611      	mov	r1, r2
 8006b6e:	2200      	movs	r2, #0
 8006b70:	602a      	str	r2, [r5, #0]
 8006b72:	461a      	mov	r2, r3
 8006b74:	f7fa f85e 	bl	8000c34 <_write>
 8006b78:	1c43      	adds	r3, r0, #1
 8006b7a:	d102      	bne.n	8006b82 <_write_r+0x1e>
 8006b7c:	682b      	ldr	r3, [r5, #0]
 8006b7e:	b103      	cbz	r3, 8006b82 <_write_r+0x1e>
 8006b80:	6023      	str	r3, [r4, #0]
 8006b82:	bd38      	pop	{r3, r4, r5, pc}
 8006b84:	20000340 	.word	0x20000340

08006b88 <__swsetup_r>:
 8006b88:	4b32      	ldr	r3, [pc, #200]	; (8006c54 <__swsetup_r+0xcc>)
 8006b8a:	b570      	push	{r4, r5, r6, lr}
 8006b8c:	681d      	ldr	r5, [r3, #0]
 8006b8e:	4606      	mov	r6, r0
 8006b90:	460c      	mov	r4, r1
 8006b92:	b125      	cbz	r5, 8006b9e <__swsetup_r+0x16>
 8006b94:	69ab      	ldr	r3, [r5, #24]
 8006b96:	b913      	cbnz	r3, 8006b9e <__swsetup_r+0x16>
 8006b98:	4628      	mov	r0, r5
 8006b9a:	f000 f9ab 	bl	8006ef4 <__sinit>
 8006b9e:	4b2e      	ldr	r3, [pc, #184]	; (8006c58 <__swsetup_r+0xd0>)
 8006ba0:	429c      	cmp	r4, r3
 8006ba2:	d10f      	bne.n	8006bc4 <__swsetup_r+0x3c>
 8006ba4:	686c      	ldr	r4, [r5, #4]
 8006ba6:	89a3      	ldrh	r3, [r4, #12]
 8006ba8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bac:	0719      	lsls	r1, r3, #28
 8006bae:	d42c      	bmi.n	8006c0a <__swsetup_r+0x82>
 8006bb0:	06dd      	lsls	r5, r3, #27
 8006bb2:	d411      	bmi.n	8006bd8 <__swsetup_r+0x50>
 8006bb4:	2309      	movs	r3, #9
 8006bb6:	6033      	str	r3, [r6, #0]
 8006bb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006bbc:	81a3      	strh	r3, [r4, #12]
 8006bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc2:	e03e      	b.n	8006c42 <__swsetup_r+0xba>
 8006bc4:	4b25      	ldr	r3, [pc, #148]	; (8006c5c <__swsetup_r+0xd4>)
 8006bc6:	429c      	cmp	r4, r3
 8006bc8:	d101      	bne.n	8006bce <__swsetup_r+0x46>
 8006bca:	68ac      	ldr	r4, [r5, #8]
 8006bcc:	e7eb      	b.n	8006ba6 <__swsetup_r+0x1e>
 8006bce:	4b24      	ldr	r3, [pc, #144]	; (8006c60 <__swsetup_r+0xd8>)
 8006bd0:	429c      	cmp	r4, r3
 8006bd2:	bf08      	it	eq
 8006bd4:	68ec      	ldreq	r4, [r5, #12]
 8006bd6:	e7e6      	b.n	8006ba6 <__swsetup_r+0x1e>
 8006bd8:	0758      	lsls	r0, r3, #29
 8006bda:	d512      	bpl.n	8006c02 <__swsetup_r+0x7a>
 8006bdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bde:	b141      	cbz	r1, 8006bf2 <__swsetup_r+0x6a>
 8006be0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006be4:	4299      	cmp	r1, r3
 8006be6:	d002      	beq.n	8006bee <__swsetup_r+0x66>
 8006be8:	4630      	mov	r0, r6
 8006bea:	f000 fab5 	bl	8007158 <_free_r>
 8006bee:	2300      	movs	r3, #0
 8006bf0:	6363      	str	r3, [r4, #52]	; 0x34
 8006bf2:	89a3      	ldrh	r3, [r4, #12]
 8006bf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006bf8:	81a3      	strh	r3, [r4, #12]
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	6063      	str	r3, [r4, #4]
 8006bfe:	6923      	ldr	r3, [r4, #16]
 8006c00:	6023      	str	r3, [r4, #0]
 8006c02:	89a3      	ldrh	r3, [r4, #12]
 8006c04:	f043 0308 	orr.w	r3, r3, #8
 8006c08:	81a3      	strh	r3, [r4, #12]
 8006c0a:	6923      	ldr	r3, [r4, #16]
 8006c0c:	b94b      	cbnz	r3, 8006c22 <__swsetup_r+0x9a>
 8006c0e:	89a3      	ldrh	r3, [r4, #12]
 8006c10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c18:	d003      	beq.n	8006c22 <__swsetup_r+0x9a>
 8006c1a:	4621      	mov	r1, r4
 8006c1c:	4630      	mov	r0, r6
 8006c1e:	f000 fa53 	bl	80070c8 <__smakebuf_r>
 8006c22:	89a0      	ldrh	r0, [r4, #12]
 8006c24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c28:	f010 0301 	ands.w	r3, r0, #1
 8006c2c:	d00a      	beq.n	8006c44 <__swsetup_r+0xbc>
 8006c2e:	2300      	movs	r3, #0
 8006c30:	60a3      	str	r3, [r4, #8]
 8006c32:	6963      	ldr	r3, [r4, #20]
 8006c34:	425b      	negs	r3, r3
 8006c36:	61a3      	str	r3, [r4, #24]
 8006c38:	6923      	ldr	r3, [r4, #16]
 8006c3a:	b943      	cbnz	r3, 8006c4e <__swsetup_r+0xc6>
 8006c3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c40:	d1ba      	bne.n	8006bb8 <__swsetup_r+0x30>
 8006c42:	bd70      	pop	{r4, r5, r6, pc}
 8006c44:	0781      	lsls	r1, r0, #30
 8006c46:	bf58      	it	pl
 8006c48:	6963      	ldrpl	r3, [r4, #20]
 8006c4a:	60a3      	str	r3, [r4, #8]
 8006c4c:	e7f4      	b.n	8006c38 <__swsetup_r+0xb0>
 8006c4e:	2000      	movs	r0, #0
 8006c50:	e7f7      	b.n	8006c42 <__swsetup_r+0xba>
 8006c52:	bf00      	nop
 8006c54:	20000028 	.word	0x20000028
 8006c58:	080086e4 	.word	0x080086e4
 8006c5c:	08008704 	.word	0x08008704
 8006c60:	080086c4 	.word	0x080086c4

08006c64 <__assert_func>:
 8006c64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c66:	4614      	mov	r4, r2
 8006c68:	461a      	mov	r2, r3
 8006c6a:	4b09      	ldr	r3, [pc, #36]	; (8006c90 <__assert_func+0x2c>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4605      	mov	r5, r0
 8006c70:	68d8      	ldr	r0, [r3, #12]
 8006c72:	b14c      	cbz	r4, 8006c88 <__assert_func+0x24>
 8006c74:	4b07      	ldr	r3, [pc, #28]	; (8006c94 <__assert_func+0x30>)
 8006c76:	9100      	str	r1, [sp, #0]
 8006c78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c7c:	4906      	ldr	r1, [pc, #24]	; (8006c98 <__assert_func+0x34>)
 8006c7e:	462b      	mov	r3, r5
 8006c80:	f000 f9b6 	bl	8006ff0 <fiprintf>
 8006c84:	f001 fa62 	bl	800814c <abort>
 8006c88:	4b04      	ldr	r3, [pc, #16]	; (8006c9c <__assert_func+0x38>)
 8006c8a:	461c      	mov	r4, r3
 8006c8c:	e7f3      	b.n	8006c76 <__assert_func+0x12>
 8006c8e:	bf00      	nop
 8006c90:	20000028 	.word	0x20000028
 8006c94:	08008584 	.word	0x08008584
 8006c98:	08008591 	.word	0x08008591
 8006c9c:	080085bf 	.word	0x080085bf

08006ca0 <_close_r>:
 8006ca0:	b538      	push	{r3, r4, r5, lr}
 8006ca2:	4d06      	ldr	r5, [pc, #24]	; (8006cbc <_close_r+0x1c>)
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	4608      	mov	r0, r1
 8006caa:	602b      	str	r3, [r5, #0]
 8006cac:	f7fa fffd 	bl	8001caa <_close>
 8006cb0:	1c43      	adds	r3, r0, #1
 8006cb2:	d102      	bne.n	8006cba <_close_r+0x1a>
 8006cb4:	682b      	ldr	r3, [r5, #0]
 8006cb6:	b103      	cbz	r3, 8006cba <_close_r+0x1a>
 8006cb8:	6023      	str	r3, [r4, #0]
 8006cba:	bd38      	pop	{r3, r4, r5, pc}
 8006cbc:	20000340 	.word	0x20000340

08006cc0 <__sflush_r>:
 8006cc0:	898a      	ldrh	r2, [r1, #12]
 8006cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc6:	4605      	mov	r5, r0
 8006cc8:	0710      	lsls	r0, r2, #28
 8006cca:	460c      	mov	r4, r1
 8006ccc:	d458      	bmi.n	8006d80 <__sflush_r+0xc0>
 8006cce:	684b      	ldr	r3, [r1, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	dc05      	bgt.n	8006ce0 <__sflush_r+0x20>
 8006cd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	dc02      	bgt.n	8006ce0 <__sflush_r+0x20>
 8006cda:	2000      	movs	r0, #0
 8006cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ce0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ce2:	2e00      	cmp	r6, #0
 8006ce4:	d0f9      	beq.n	8006cda <__sflush_r+0x1a>
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006cec:	682f      	ldr	r7, [r5, #0]
 8006cee:	602b      	str	r3, [r5, #0]
 8006cf0:	d032      	beq.n	8006d58 <__sflush_r+0x98>
 8006cf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006cf4:	89a3      	ldrh	r3, [r4, #12]
 8006cf6:	075a      	lsls	r2, r3, #29
 8006cf8:	d505      	bpl.n	8006d06 <__sflush_r+0x46>
 8006cfa:	6863      	ldr	r3, [r4, #4]
 8006cfc:	1ac0      	subs	r0, r0, r3
 8006cfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d00:	b10b      	cbz	r3, 8006d06 <__sflush_r+0x46>
 8006d02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d04:	1ac0      	subs	r0, r0, r3
 8006d06:	2300      	movs	r3, #0
 8006d08:	4602      	mov	r2, r0
 8006d0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d0c:	6a21      	ldr	r1, [r4, #32]
 8006d0e:	4628      	mov	r0, r5
 8006d10:	47b0      	blx	r6
 8006d12:	1c43      	adds	r3, r0, #1
 8006d14:	89a3      	ldrh	r3, [r4, #12]
 8006d16:	d106      	bne.n	8006d26 <__sflush_r+0x66>
 8006d18:	6829      	ldr	r1, [r5, #0]
 8006d1a:	291d      	cmp	r1, #29
 8006d1c:	d82c      	bhi.n	8006d78 <__sflush_r+0xb8>
 8006d1e:	4a2a      	ldr	r2, [pc, #168]	; (8006dc8 <__sflush_r+0x108>)
 8006d20:	40ca      	lsrs	r2, r1
 8006d22:	07d6      	lsls	r6, r2, #31
 8006d24:	d528      	bpl.n	8006d78 <__sflush_r+0xb8>
 8006d26:	2200      	movs	r2, #0
 8006d28:	6062      	str	r2, [r4, #4]
 8006d2a:	04d9      	lsls	r1, r3, #19
 8006d2c:	6922      	ldr	r2, [r4, #16]
 8006d2e:	6022      	str	r2, [r4, #0]
 8006d30:	d504      	bpl.n	8006d3c <__sflush_r+0x7c>
 8006d32:	1c42      	adds	r2, r0, #1
 8006d34:	d101      	bne.n	8006d3a <__sflush_r+0x7a>
 8006d36:	682b      	ldr	r3, [r5, #0]
 8006d38:	b903      	cbnz	r3, 8006d3c <__sflush_r+0x7c>
 8006d3a:	6560      	str	r0, [r4, #84]	; 0x54
 8006d3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d3e:	602f      	str	r7, [r5, #0]
 8006d40:	2900      	cmp	r1, #0
 8006d42:	d0ca      	beq.n	8006cda <__sflush_r+0x1a>
 8006d44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d48:	4299      	cmp	r1, r3
 8006d4a:	d002      	beq.n	8006d52 <__sflush_r+0x92>
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	f000 fa03 	bl	8007158 <_free_r>
 8006d52:	2000      	movs	r0, #0
 8006d54:	6360      	str	r0, [r4, #52]	; 0x34
 8006d56:	e7c1      	b.n	8006cdc <__sflush_r+0x1c>
 8006d58:	6a21      	ldr	r1, [r4, #32]
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	47b0      	blx	r6
 8006d60:	1c41      	adds	r1, r0, #1
 8006d62:	d1c7      	bne.n	8006cf4 <__sflush_r+0x34>
 8006d64:	682b      	ldr	r3, [r5, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d0c4      	beq.n	8006cf4 <__sflush_r+0x34>
 8006d6a:	2b1d      	cmp	r3, #29
 8006d6c:	d001      	beq.n	8006d72 <__sflush_r+0xb2>
 8006d6e:	2b16      	cmp	r3, #22
 8006d70:	d101      	bne.n	8006d76 <__sflush_r+0xb6>
 8006d72:	602f      	str	r7, [r5, #0]
 8006d74:	e7b1      	b.n	8006cda <__sflush_r+0x1a>
 8006d76:	89a3      	ldrh	r3, [r4, #12]
 8006d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d7c:	81a3      	strh	r3, [r4, #12]
 8006d7e:	e7ad      	b.n	8006cdc <__sflush_r+0x1c>
 8006d80:	690f      	ldr	r7, [r1, #16]
 8006d82:	2f00      	cmp	r7, #0
 8006d84:	d0a9      	beq.n	8006cda <__sflush_r+0x1a>
 8006d86:	0793      	lsls	r3, r2, #30
 8006d88:	680e      	ldr	r6, [r1, #0]
 8006d8a:	bf08      	it	eq
 8006d8c:	694b      	ldreq	r3, [r1, #20]
 8006d8e:	600f      	str	r7, [r1, #0]
 8006d90:	bf18      	it	ne
 8006d92:	2300      	movne	r3, #0
 8006d94:	eba6 0807 	sub.w	r8, r6, r7
 8006d98:	608b      	str	r3, [r1, #8]
 8006d9a:	f1b8 0f00 	cmp.w	r8, #0
 8006d9e:	dd9c      	ble.n	8006cda <__sflush_r+0x1a>
 8006da0:	6a21      	ldr	r1, [r4, #32]
 8006da2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006da4:	4643      	mov	r3, r8
 8006da6:	463a      	mov	r2, r7
 8006da8:	4628      	mov	r0, r5
 8006daa:	47b0      	blx	r6
 8006dac:	2800      	cmp	r0, #0
 8006dae:	dc06      	bgt.n	8006dbe <__sflush_r+0xfe>
 8006db0:	89a3      	ldrh	r3, [r4, #12]
 8006db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006db6:	81a3      	strh	r3, [r4, #12]
 8006db8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dbc:	e78e      	b.n	8006cdc <__sflush_r+0x1c>
 8006dbe:	4407      	add	r7, r0
 8006dc0:	eba8 0800 	sub.w	r8, r8, r0
 8006dc4:	e7e9      	b.n	8006d9a <__sflush_r+0xda>
 8006dc6:	bf00      	nop
 8006dc8:	20400001 	.word	0x20400001

08006dcc <_fflush_r>:
 8006dcc:	b538      	push	{r3, r4, r5, lr}
 8006dce:	690b      	ldr	r3, [r1, #16]
 8006dd0:	4605      	mov	r5, r0
 8006dd2:	460c      	mov	r4, r1
 8006dd4:	b913      	cbnz	r3, 8006ddc <_fflush_r+0x10>
 8006dd6:	2500      	movs	r5, #0
 8006dd8:	4628      	mov	r0, r5
 8006dda:	bd38      	pop	{r3, r4, r5, pc}
 8006ddc:	b118      	cbz	r0, 8006de6 <_fflush_r+0x1a>
 8006dde:	6983      	ldr	r3, [r0, #24]
 8006de0:	b90b      	cbnz	r3, 8006de6 <_fflush_r+0x1a>
 8006de2:	f000 f887 	bl	8006ef4 <__sinit>
 8006de6:	4b14      	ldr	r3, [pc, #80]	; (8006e38 <_fflush_r+0x6c>)
 8006de8:	429c      	cmp	r4, r3
 8006dea:	d11b      	bne.n	8006e24 <_fflush_r+0x58>
 8006dec:	686c      	ldr	r4, [r5, #4]
 8006dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d0ef      	beq.n	8006dd6 <_fflush_r+0xa>
 8006df6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006df8:	07d0      	lsls	r0, r2, #31
 8006dfa:	d404      	bmi.n	8006e06 <_fflush_r+0x3a>
 8006dfc:	0599      	lsls	r1, r3, #22
 8006dfe:	d402      	bmi.n	8006e06 <_fflush_r+0x3a>
 8006e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e02:	f000 f927 	bl	8007054 <__retarget_lock_acquire_recursive>
 8006e06:	4628      	mov	r0, r5
 8006e08:	4621      	mov	r1, r4
 8006e0a:	f7ff ff59 	bl	8006cc0 <__sflush_r>
 8006e0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e10:	07da      	lsls	r2, r3, #31
 8006e12:	4605      	mov	r5, r0
 8006e14:	d4e0      	bmi.n	8006dd8 <_fflush_r+0xc>
 8006e16:	89a3      	ldrh	r3, [r4, #12]
 8006e18:	059b      	lsls	r3, r3, #22
 8006e1a:	d4dd      	bmi.n	8006dd8 <_fflush_r+0xc>
 8006e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e1e:	f000 f91a 	bl	8007056 <__retarget_lock_release_recursive>
 8006e22:	e7d9      	b.n	8006dd8 <_fflush_r+0xc>
 8006e24:	4b05      	ldr	r3, [pc, #20]	; (8006e3c <_fflush_r+0x70>)
 8006e26:	429c      	cmp	r4, r3
 8006e28:	d101      	bne.n	8006e2e <_fflush_r+0x62>
 8006e2a:	68ac      	ldr	r4, [r5, #8]
 8006e2c:	e7df      	b.n	8006dee <_fflush_r+0x22>
 8006e2e:	4b04      	ldr	r3, [pc, #16]	; (8006e40 <_fflush_r+0x74>)
 8006e30:	429c      	cmp	r4, r3
 8006e32:	bf08      	it	eq
 8006e34:	68ec      	ldreq	r4, [r5, #12]
 8006e36:	e7da      	b.n	8006dee <_fflush_r+0x22>
 8006e38:	080086e4 	.word	0x080086e4
 8006e3c:	08008704 	.word	0x08008704
 8006e40:	080086c4 	.word	0x080086c4

08006e44 <std>:
 8006e44:	2300      	movs	r3, #0
 8006e46:	b510      	push	{r4, lr}
 8006e48:	4604      	mov	r4, r0
 8006e4a:	e9c0 3300 	strd	r3, r3, [r0]
 8006e4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e52:	6083      	str	r3, [r0, #8]
 8006e54:	8181      	strh	r1, [r0, #12]
 8006e56:	6643      	str	r3, [r0, #100]	; 0x64
 8006e58:	81c2      	strh	r2, [r0, #14]
 8006e5a:	6183      	str	r3, [r0, #24]
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	2208      	movs	r2, #8
 8006e60:	305c      	adds	r0, #92	; 0x5c
 8006e62:	f7ff fc3b 	bl	80066dc <memset>
 8006e66:	4b05      	ldr	r3, [pc, #20]	; (8006e7c <std+0x38>)
 8006e68:	6263      	str	r3, [r4, #36]	; 0x24
 8006e6a:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <std+0x3c>)
 8006e6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e6e:	4b05      	ldr	r3, [pc, #20]	; (8006e84 <std+0x40>)
 8006e70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e72:	4b05      	ldr	r3, [pc, #20]	; (8006e88 <std+0x44>)
 8006e74:	6224      	str	r4, [r4, #32]
 8006e76:	6323      	str	r3, [r4, #48]	; 0x30
 8006e78:	bd10      	pop	{r4, pc}
 8006e7a:	bf00      	nop
 8006e7c:	08006861 	.word	0x08006861
 8006e80:	08006887 	.word	0x08006887
 8006e84:	080068bf 	.word	0x080068bf
 8006e88:	080068e3 	.word	0x080068e3

08006e8c <_cleanup_r>:
 8006e8c:	4901      	ldr	r1, [pc, #4]	; (8006e94 <_cleanup_r+0x8>)
 8006e8e:	f000 b8c1 	b.w	8007014 <_fwalk_reent>
 8006e92:	bf00      	nop
 8006e94:	08006dcd 	.word	0x08006dcd

08006e98 <__sfmoreglue>:
 8006e98:	b570      	push	{r4, r5, r6, lr}
 8006e9a:	2268      	movs	r2, #104	; 0x68
 8006e9c:	1e4d      	subs	r5, r1, #1
 8006e9e:	4355      	muls	r5, r2
 8006ea0:	460e      	mov	r6, r1
 8006ea2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006ea6:	f000 f9c3 	bl	8007230 <_malloc_r>
 8006eaa:	4604      	mov	r4, r0
 8006eac:	b140      	cbz	r0, 8006ec0 <__sfmoreglue+0x28>
 8006eae:	2100      	movs	r1, #0
 8006eb0:	e9c0 1600 	strd	r1, r6, [r0]
 8006eb4:	300c      	adds	r0, #12
 8006eb6:	60a0      	str	r0, [r4, #8]
 8006eb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ebc:	f7ff fc0e 	bl	80066dc <memset>
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	bd70      	pop	{r4, r5, r6, pc}

08006ec4 <__sfp_lock_acquire>:
 8006ec4:	4801      	ldr	r0, [pc, #4]	; (8006ecc <__sfp_lock_acquire+0x8>)
 8006ec6:	f000 b8c5 	b.w	8007054 <__retarget_lock_acquire_recursive>
 8006eca:	bf00      	nop
 8006ecc:	20000335 	.word	0x20000335

08006ed0 <__sfp_lock_release>:
 8006ed0:	4801      	ldr	r0, [pc, #4]	; (8006ed8 <__sfp_lock_release+0x8>)
 8006ed2:	f000 b8c0 	b.w	8007056 <__retarget_lock_release_recursive>
 8006ed6:	bf00      	nop
 8006ed8:	20000335 	.word	0x20000335

08006edc <__sinit_lock_acquire>:
 8006edc:	4801      	ldr	r0, [pc, #4]	; (8006ee4 <__sinit_lock_acquire+0x8>)
 8006ede:	f000 b8b9 	b.w	8007054 <__retarget_lock_acquire_recursive>
 8006ee2:	bf00      	nop
 8006ee4:	20000336 	.word	0x20000336

08006ee8 <__sinit_lock_release>:
 8006ee8:	4801      	ldr	r0, [pc, #4]	; (8006ef0 <__sinit_lock_release+0x8>)
 8006eea:	f000 b8b4 	b.w	8007056 <__retarget_lock_release_recursive>
 8006eee:	bf00      	nop
 8006ef0:	20000336 	.word	0x20000336

08006ef4 <__sinit>:
 8006ef4:	b510      	push	{r4, lr}
 8006ef6:	4604      	mov	r4, r0
 8006ef8:	f7ff fff0 	bl	8006edc <__sinit_lock_acquire>
 8006efc:	69a3      	ldr	r3, [r4, #24]
 8006efe:	b11b      	cbz	r3, 8006f08 <__sinit+0x14>
 8006f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f04:	f7ff bff0 	b.w	8006ee8 <__sinit_lock_release>
 8006f08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f0c:	6523      	str	r3, [r4, #80]	; 0x50
 8006f0e:	4b13      	ldr	r3, [pc, #76]	; (8006f5c <__sinit+0x68>)
 8006f10:	4a13      	ldr	r2, [pc, #76]	; (8006f60 <__sinit+0x6c>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f16:	42a3      	cmp	r3, r4
 8006f18:	bf04      	itt	eq
 8006f1a:	2301      	moveq	r3, #1
 8006f1c:	61a3      	streq	r3, [r4, #24]
 8006f1e:	4620      	mov	r0, r4
 8006f20:	f000 f820 	bl	8006f64 <__sfp>
 8006f24:	6060      	str	r0, [r4, #4]
 8006f26:	4620      	mov	r0, r4
 8006f28:	f000 f81c 	bl	8006f64 <__sfp>
 8006f2c:	60a0      	str	r0, [r4, #8]
 8006f2e:	4620      	mov	r0, r4
 8006f30:	f000 f818 	bl	8006f64 <__sfp>
 8006f34:	2200      	movs	r2, #0
 8006f36:	60e0      	str	r0, [r4, #12]
 8006f38:	2104      	movs	r1, #4
 8006f3a:	6860      	ldr	r0, [r4, #4]
 8006f3c:	f7ff ff82 	bl	8006e44 <std>
 8006f40:	68a0      	ldr	r0, [r4, #8]
 8006f42:	2201      	movs	r2, #1
 8006f44:	2109      	movs	r1, #9
 8006f46:	f7ff ff7d 	bl	8006e44 <std>
 8006f4a:	68e0      	ldr	r0, [r4, #12]
 8006f4c:	2202      	movs	r2, #2
 8006f4e:	2112      	movs	r1, #18
 8006f50:	f7ff ff78 	bl	8006e44 <std>
 8006f54:	2301      	movs	r3, #1
 8006f56:	61a3      	str	r3, [r4, #24]
 8006f58:	e7d2      	b.n	8006f00 <__sinit+0xc>
 8006f5a:	bf00      	nop
 8006f5c:	0800850c 	.word	0x0800850c
 8006f60:	08006e8d 	.word	0x08006e8d

08006f64 <__sfp>:
 8006f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f66:	4607      	mov	r7, r0
 8006f68:	f7ff ffac 	bl	8006ec4 <__sfp_lock_acquire>
 8006f6c:	4b1e      	ldr	r3, [pc, #120]	; (8006fe8 <__sfp+0x84>)
 8006f6e:	681e      	ldr	r6, [r3, #0]
 8006f70:	69b3      	ldr	r3, [r6, #24]
 8006f72:	b913      	cbnz	r3, 8006f7a <__sfp+0x16>
 8006f74:	4630      	mov	r0, r6
 8006f76:	f7ff ffbd 	bl	8006ef4 <__sinit>
 8006f7a:	3648      	adds	r6, #72	; 0x48
 8006f7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f80:	3b01      	subs	r3, #1
 8006f82:	d503      	bpl.n	8006f8c <__sfp+0x28>
 8006f84:	6833      	ldr	r3, [r6, #0]
 8006f86:	b30b      	cbz	r3, 8006fcc <__sfp+0x68>
 8006f88:	6836      	ldr	r6, [r6, #0]
 8006f8a:	e7f7      	b.n	8006f7c <__sfp+0x18>
 8006f8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f90:	b9d5      	cbnz	r5, 8006fc8 <__sfp+0x64>
 8006f92:	4b16      	ldr	r3, [pc, #88]	; (8006fec <__sfp+0x88>)
 8006f94:	60e3      	str	r3, [r4, #12]
 8006f96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f9a:	6665      	str	r5, [r4, #100]	; 0x64
 8006f9c:	f000 f859 	bl	8007052 <__retarget_lock_init_recursive>
 8006fa0:	f7ff ff96 	bl	8006ed0 <__sfp_lock_release>
 8006fa4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006fa8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006fac:	6025      	str	r5, [r4, #0]
 8006fae:	61a5      	str	r5, [r4, #24]
 8006fb0:	2208      	movs	r2, #8
 8006fb2:	4629      	mov	r1, r5
 8006fb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006fb8:	f7ff fb90 	bl	80066dc <memset>
 8006fbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fc8:	3468      	adds	r4, #104	; 0x68
 8006fca:	e7d9      	b.n	8006f80 <__sfp+0x1c>
 8006fcc:	2104      	movs	r1, #4
 8006fce:	4638      	mov	r0, r7
 8006fd0:	f7ff ff62 	bl	8006e98 <__sfmoreglue>
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	6030      	str	r0, [r6, #0]
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	d1d5      	bne.n	8006f88 <__sfp+0x24>
 8006fdc:	f7ff ff78 	bl	8006ed0 <__sfp_lock_release>
 8006fe0:	230c      	movs	r3, #12
 8006fe2:	603b      	str	r3, [r7, #0]
 8006fe4:	e7ee      	b.n	8006fc4 <__sfp+0x60>
 8006fe6:	bf00      	nop
 8006fe8:	0800850c 	.word	0x0800850c
 8006fec:	ffff0001 	.word	0xffff0001

08006ff0 <fiprintf>:
 8006ff0:	b40e      	push	{r1, r2, r3}
 8006ff2:	b503      	push	{r0, r1, lr}
 8006ff4:	4601      	mov	r1, r0
 8006ff6:	ab03      	add	r3, sp, #12
 8006ff8:	4805      	ldr	r0, [pc, #20]	; (8007010 <fiprintf+0x20>)
 8006ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ffe:	6800      	ldr	r0, [r0, #0]
 8007000:	9301      	str	r3, [sp, #4]
 8007002:	f000 fb85 	bl	8007710 <_vfiprintf_r>
 8007006:	b002      	add	sp, #8
 8007008:	f85d eb04 	ldr.w	lr, [sp], #4
 800700c:	b003      	add	sp, #12
 800700e:	4770      	bx	lr
 8007010:	20000028 	.word	0x20000028

08007014 <_fwalk_reent>:
 8007014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007018:	4606      	mov	r6, r0
 800701a:	4688      	mov	r8, r1
 800701c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007020:	2700      	movs	r7, #0
 8007022:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007026:	f1b9 0901 	subs.w	r9, r9, #1
 800702a:	d505      	bpl.n	8007038 <_fwalk_reent+0x24>
 800702c:	6824      	ldr	r4, [r4, #0]
 800702e:	2c00      	cmp	r4, #0
 8007030:	d1f7      	bne.n	8007022 <_fwalk_reent+0xe>
 8007032:	4638      	mov	r0, r7
 8007034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007038:	89ab      	ldrh	r3, [r5, #12]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d907      	bls.n	800704e <_fwalk_reent+0x3a>
 800703e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007042:	3301      	adds	r3, #1
 8007044:	d003      	beq.n	800704e <_fwalk_reent+0x3a>
 8007046:	4629      	mov	r1, r5
 8007048:	4630      	mov	r0, r6
 800704a:	47c0      	blx	r8
 800704c:	4307      	orrs	r7, r0
 800704e:	3568      	adds	r5, #104	; 0x68
 8007050:	e7e9      	b.n	8007026 <_fwalk_reent+0x12>

08007052 <__retarget_lock_init_recursive>:
 8007052:	4770      	bx	lr

08007054 <__retarget_lock_acquire_recursive>:
 8007054:	4770      	bx	lr

08007056 <__retarget_lock_release_recursive>:
 8007056:	4770      	bx	lr

08007058 <_lseek_r>:
 8007058:	b538      	push	{r3, r4, r5, lr}
 800705a:	4d07      	ldr	r5, [pc, #28]	; (8007078 <_lseek_r+0x20>)
 800705c:	4604      	mov	r4, r0
 800705e:	4608      	mov	r0, r1
 8007060:	4611      	mov	r1, r2
 8007062:	2200      	movs	r2, #0
 8007064:	602a      	str	r2, [r5, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	f7fa fe46 	bl	8001cf8 <_lseek>
 800706c:	1c43      	adds	r3, r0, #1
 800706e:	d102      	bne.n	8007076 <_lseek_r+0x1e>
 8007070:	682b      	ldr	r3, [r5, #0]
 8007072:	b103      	cbz	r3, 8007076 <_lseek_r+0x1e>
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	bd38      	pop	{r3, r4, r5, pc}
 8007078:	20000340 	.word	0x20000340

0800707c <__swhatbuf_r>:
 800707c:	b570      	push	{r4, r5, r6, lr}
 800707e:	460e      	mov	r6, r1
 8007080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007084:	2900      	cmp	r1, #0
 8007086:	b096      	sub	sp, #88	; 0x58
 8007088:	4614      	mov	r4, r2
 800708a:	461d      	mov	r5, r3
 800708c:	da08      	bge.n	80070a0 <__swhatbuf_r+0x24>
 800708e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	602a      	str	r2, [r5, #0]
 8007096:	061a      	lsls	r2, r3, #24
 8007098:	d410      	bmi.n	80070bc <__swhatbuf_r+0x40>
 800709a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800709e:	e00e      	b.n	80070be <__swhatbuf_r+0x42>
 80070a0:	466a      	mov	r2, sp
 80070a2:	f001 f85b 	bl	800815c <_fstat_r>
 80070a6:	2800      	cmp	r0, #0
 80070a8:	dbf1      	blt.n	800708e <__swhatbuf_r+0x12>
 80070aa:	9a01      	ldr	r2, [sp, #4]
 80070ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80070b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80070b4:	425a      	negs	r2, r3
 80070b6:	415a      	adcs	r2, r3
 80070b8:	602a      	str	r2, [r5, #0]
 80070ba:	e7ee      	b.n	800709a <__swhatbuf_r+0x1e>
 80070bc:	2340      	movs	r3, #64	; 0x40
 80070be:	2000      	movs	r0, #0
 80070c0:	6023      	str	r3, [r4, #0]
 80070c2:	b016      	add	sp, #88	; 0x58
 80070c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080070c8 <__smakebuf_r>:
 80070c8:	898b      	ldrh	r3, [r1, #12]
 80070ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070cc:	079d      	lsls	r5, r3, #30
 80070ce:	4606      	mov	r6, r0
 80070d0:	460c      	mov	r4, r1
 80070d2:	d507      	bpl.n	80070e4 <__smakebuf_r+0x1c>
 80070d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070d8:	6023      	str	r3, [r4, #0]
 80070da:	6123      	str	r3, [r4, #16]
 80070dc:	2301      	movs	r3, #1
 80070de:	6163      	str	r3, [r4, #20]
 80070e0:	b002      	add	sp, #8
 80070e2:	bd70      	pop	{r4, r5, r6, pc}
 80070e4:	ab01      	add	r3, sp, #4
 80070e6:	466a      	mov	r2, sp
 80070e8:	f7ff ffc8 	bl	800707c <__swhatbuf_r>
 80070ec:	9900      	ldr	r1, [sp, #0]
 80070ee:	4605      	mov	r5, r0
 80070f0:	4630      	mov	r0, r6
 80070f2:	f000 f89d 	bl	8007230 <_malloc_r>
 80070f6:	b948      	cbnz	r0, 800710c <__smakebuf_r+0x44>
 80070f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070fc:	059a      	lsls	r2, r3, #22
 80070fe:	d4ef      	bmi.n	80070e0 <__smakebuf_r+0x18>
 8007100:	f023 0303 	bic.w	r3, r3, #3
 8007104:	f043 0302 	orr.w	r3, r3, #2
 8007108:	81a3      	strh	r3, [r4, #12]
 800710a:	e7e3      	b.n	80070d4 <__smakebuf_r+0xc>
 800710c:	4b0d      	ldr	r3, [pc, #52]	; (8007144 <__smakebuf_r+0x7c>)
 800710e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007110:	89a3      	ldrh	r3, [r4, #12]
 8007112:	6020      	str	r0, [r4, #0]
 8007114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007118:	81a3      	strh	r3, [r4, #12]
 800711a:	9b00      	ldr	r3, [sp, #0]
 800711c:	6163      	str	r3, [r4, #20]
 800711e:	9b01      	ldr	r3, [sp, #4]
 8007120:	6120      	str	r0, [r4, #16]
 8007122:	b15b      	cbz	r3, 800713c <__smakebuf_r+0x74>
 8007124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007128:	4630      	mov	r0, r6
 800712a:	f001 f829 	bl	8008180 <_isatty_r>
 800712e:	b128      	cbz	r0, 800713c <__smakebuf_r+0x74>
 8007130:	89a3      	ldrh	r3, [r4, #12]
 8007132:	f023 0303 	bic.w	r3, r3, #3
 8007136:	f043 0301 	orr.w	r3, r3, #1
 800713a:	81a3      	strh	r3, [r4, #12]
 800713c:	89a0      	ldrh	r0, [r4, #12]
 800713e:	4305      	orrs	r5, r0
 8007140:	81a5      	strh	r5, [r4, #12]
 8007142:	e7cd      	b.n	80070e0 <__smakebuf_r+0x18>
 8007144:	08006e8d 	.word	0x08006e8d

08007148 <malloc>:
 8007148:	4b02      	ldr	r3, [pc, #8]	; (8007154 <malloc+0xc>)
 800714a:	4601      	mov	r1, r0
 800714c:	6818      	ldr	r0, [r3, #0]
 800714e:	f000 b86f 	b.w	8007230 <_malloc_r>
 8007152:	bf00      	nop
 8007154:	20000028 	.word	0x20000028

08007158 <_free_r>:
 8007158:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800715a:	2900      	cmp	r1, #0
 800715c:	d044      	beq.n	80071e8 <_free_r+0x90>
 800715e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007162:	9001      	str	r0, [sp, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	f1a1 0404 	sub.w	r4, r1, #4
 800716a:	bfb8      	it	lt
 800716c:	18e4      	addlt	r4, r4, r3
 800716e:	f001 f825 	bl	80081bc <__malloc_lock>
 8007172:	4a1e      	ldr	r2, [pc, #120]	; (80071ec <_free_r+0x94>)
 8007174:	9801      	ldr	r0, [sp, #4]
 8007176:	6813      	ldr	r3, [r2, #0]
 8007178:	b933      	cbnz	r3, 8007188 <_free_r+0x30>
 800717a:	6063      	str	r3, [r4, #4]
 800717c:	6014      	str	r4, [r2, #0]
 800717e:	b003      	add	sp, #12
 8007180:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007184:	f001 b820 	b.w	80081c8 <__malloc_unlock>
 8007188:	42a3      	cmp	r3, r4
 800718a:	d908      	bls.n	800719e <_free_r+0x46>
 800718c:	6825      	ldr	r5, [r4, #0]
 800718e:	1961      	adds	r1, r4, r5
 8007190:	428b      	cmp	r3, r1
 8007192:	bf01      	itttt	eq
 8007194:	6819      	ldreq	r1, [r3, #0]
 8007196:	685b      	ldreq	r3, [r3, #4]
 8007198:	1949      	addeq	r1, r1, r5
 800719a:	6021      	streq	r1, [r4, #0]
 800719c:	e7ed      	b.n	800717a <_free_r+0x22>
 800719e:	461a      	mov	r2, r3
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	b10b      	cbz	r3, 80071a8 <_free_r+0x50>
 80071a4:	42a3      	cmp	r3, r4
 80071a6:	d9fa      	bls.n	800719e <_free_r+0x46>
 80071a8:	6811      	ldr	r1, [r2, #0]
 80071aa:	1855      	adds	r5, r2, r1
 80071ac:	42a5      	cmp	r5, r4
 80071ae:	d10b      	bne.n	80071c8 <_free_r+0x70>
 80071b0:	6824      	ldr	r4, [r4, #0]
 80071b2:	4421      	add	r1, r4
 80071b4:	1854      	adds	r4, r2, r1
 80071b6:	42a3      	cmp	r3, r4
 80071b8:	6011      	str	r1, [r2, #0]
 80071ba:	d1e0      	bne.n	800717e <_free_r+0x26>
 80071bc:	681c      	ldr	r4, [r3, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	6053      	str	r3, [r2, #4]
 80071c2:	4421      	add	r1, r4
 80071c4:	6011      	str	r1, [r2, #0]
 80071c6:	e7da      	b.n	800717e <_free_r+0x26>
 80071c8:	d902      	bls.n	80071d0 <_free_r+0x78>
 80071ca:	230c      	movs	r3, #12
 80071cc:	6003      	str	r3, [r0, #0]
 80071ce:	e7d6      	b.n	800717e <_free_r+0x26>
 80071d0:	6825      	ldr	r5, [r4, #0]
 80071d2:	1961      	adds	r1, r4, r5
 80071d4:	428b      	cmp	r3, r1
 80071d6:	bf04      	itt	eq
 80071d8:	6819      	ldreq	r1, [r3, #0]
 80071da:	685b      	ldreq	r3, [r3, #4]
 80071dc:	6063      	str	r3, [r4, #4]
 80071de:	bf04      	itt	eq
 80071e0:	1949      	addeq	r1, r1, r5
 80071e2:	6021      	streq	r1, [r4, #0]
 80071e4:	6054      	str	r4, [r2, #4]
 80071e6:	e7ca      	b.n	800717e <_free_r+0x26>
 80071e8:	b003      	add	sp, #12
 80071ea:	bd30      	pop	{r4, r5, pc}
 80071ec:	20000338 	.word	0x20000338

080071f0 <sbrk_aligned>:
 80071f0:	b570      	push	{r4, r5, r6, lr}
 80071f2:	4e0e      	ldr	r6, [pc, #56]	; (800722c <sbrk_aligned+0x3c>)
 80071f4:	460c      	mov	r4, r1
 80071f6:	6831      	ldr	r1, [r6, #0]
 80071f8:	4605      	mov	r5, r0
 80071fa:	b911      	cbnz	r1, 8007202 <sbrk_aligned+0x12>
 80071fc:	f000 feb0 	bl	8007f60 <_sbrk_r>
 8007200:	6030      	str	r0, [r6, #0]
 8007202:	4621      	mov	r1, r4
 8007204:	4628      	mov	r0, r5
 8007206:	f000 feab 	bl	8007f60 <_sbrk_r>
 800720a:	1c43      	adds	r3, r0, #1
 800720c:	d00a      	beq.n	8007224 <sbrk_aligned+0x34>
 800720e:	1cc4      	adds	r4, r0, #3
 8007210:	f024 0403 	bic.w	r4, r4, #3
 8007214:	42a0      	cmp	r0, r4
 8007216:	d007      	beq.n	8007228 <sbrk_aligned+0x38>
 8007218:	1a21      	subs	r1, r4, r0
 800721a:	4628      	mov	r0, r5
 800721c:	f000 fea0 	bl	8007f60 <_sbrk_r>
 8007220:	3001      	adds	r0, #1
 8007222:	d101      	bne.n	8007228 <sbrk_aligned+0x38>
 8007224:	f04f 34ff 	mov.w	r4, #4294967295
 8007228:	4620      	mov	r0, r4
 800722a:	bd70      	pop	{r4, r5, r6, pc}
 800722c:	2000033c 	.word	0x2000033c

08007230 <_malloc_r>:
 8007230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007234:	1ccd      	adds	r5, r1, #3
 8007236:	f025 0503 	bic.w	r5, r5, #3
 800723a:	3508      	adds	r5, #8
 800723c:	2d0c      	cmp	r5, #12
 800723e:	bf38      	it	cc
 8007240:	250c      	movcc	r5, #12
 8007242:	2d00      	cmp	r5, #0
 8007244:	4607      	mov	r7, r0
 8007246:	db01      	blt.n	800724c <_malloc_r+0x1c>
 8007248:	42a9      	cmp	r1, r5
 800724a:	d905      	bls.n	8007258 <_malloc_r+0x28>
 800724c:	230c      	movs	r3, #12
 800724e:	603b      	str	r3, [r7, #0]
 8007250:	2600      	movs	r6, #0
 8007252:	4630      	mov	r0, r6
 8007254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007258:	4e2e      	ldr	r6, [pc, #184]	; (8007314 <_malloc_r+0xe4>)
 800725a:	f000 ffaf 	bl	80081bc <__malloc_lock>
 800725e:	6833      	ldr	r3, [r6, #0]
 8007260:	461c      	mov	r4, r3
 8007262:	bb34      	cbnz	r4, 80072b2 <_malloc_r+0x82>
 8007264:	4629      	mov	r1, r5
 8007266:	4638      	mov	r0, r7
 8007268:	f7ff ffc2 	bl	80071f0 <sbrk_aligned>
 800726c:	1c43      	adds	r3, r0, #1
 800726e:	4604      	mov	r4, r0
 8007270:	d14d      	bne.n	800730e <_malloc_r+0xde>
 8007272:	6834      	ldr	r4, [r6, #0]
 8007274:	4626      	mov	r6, r4
 8007276:	2e00      	cmp	r6, #0
 8007278:	d140      	bne.n	80072fc <_malloc_r+0xcc>
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	4631      	mov	r1, r6
 800727e:	4638      	mov	r0, r7
 8007280:	eb04 0803 	add.w	r8, r4, r3
 8007284:	f000 fe6c 	bl	8007f60 <_sbrk_r>
 8007288:	4580      	cmp	r8, r0
 800728a:	d13a      	bne.n	8007302 <_malloc_r+0xd2>
 800728c:	6821      	ldr	r1, [r4, #0]
 800728e:	3503      	adds	r5, #3
 8007290:	1a6d      	subs	r5, r5, r1
 8007292:	f025 0503 	bic.w	r5, r5, #3
 8007296:	3508      	adds	r5, #8
 8007298:	2d0c      	cmp	r5, #12
 800729a:	bf38      	it	cc
 800729c:	250c      	movcc	r5, #12
 800729e:	4629      	mov	r1, r5
 80072a0:	4638      	mov	r0, r7
 80072a2:	f7ff ffa5 	bl	80071f0 <sbrk_aligned>
 80072a6:	3001      	adds	r0, #1
 80072a8:	d02b      	beq.n	8007302 <_malloc_r+0xd2>
 80072aa:	6823      	ldr	r3, [r4, #0]
 80072ac:	442b      	add	r3, r5
 80072ae:	6023      	str	r3, [r4, #0]
 80072b0:	e00e      	b.n	80072d0 <_malloc_r+0xa0>
 80072b2:	6822      	ldr	r2, [r4, #0]
 80072b4:	1b52      	subs	r2, r2, r5
 80072b6:	d41e      	bmi.n	80072f6 <_malloc_r+0xc6>
 80072b8:	2a0b      	cmp	r2, #11
 80072ba:	d916      	bls.n	80072ea <_malloc_r+0xba>
 80072bc:	1961      	adds	r1, r4, r5
 80072be:	42a3      	cmp	r3, r4
 80072c0:	6025      	str	r5, [r4, #0]
 80072c2:	bf18      	it	ne
 80072c4:	6059      	strne	r1, [r3, #4]
 80072c6:	6863      	ldr	r3, [r4, #4]
 80072c8:	bf08      	it	eq
 80072ca:	6031      	streq	r1, [r6, #0]
 80072cc:	5162      	str	r2, [r4, r5]
 80072ce:	604b      	str	r3, [r1, #4]
 80072d0:	4638      	mov	r0, r7
 80072d2:	f104 060b 	add.w	r6, r4, #11
 80072d6:	f000 ff77 	bl	80081c8 <__malloc_unlock>
 80072da:	f026 0607 	bic.w	r6, r6, #7
 80072de:	1d23      	adds	r3, r4, #4
 80072e0:	1af2      	subs	r2, r6, r3
 80072e2:	d0b6      	beq.n	8007252 <_malloc_r+0x22>
 80072e4:	1b9b      	subs	r3, r3, r6
 80072e6:	50a3      	str	r3, [r4, r2]
 80072e8:	e7b3      	b.n	8007252 <_malloc_r+0x22>
 80072ea:	6862      	ldr	r2, [r4, #4]
 80072ec:	42a3      	cmp	r3, r4
 80072ee:	bf0c      	ite	eq
 80072f0:	6032      	streq	r2, [r6, #0]
 80072f2:	605a      	strne	r2, [r3, #4]
 80072f4:	e7ec      	b.n	80072d0 <_malloc_r+0xa0>
 80072f6:	4623      	mov	r3, r4
 80072f8:	6864      	ldr	r4, [r4, #4]
 80072fa:	e7b2      	b.n	8007262 <_malloc_r+0x32>
 80072fc:	4634      	mov	r4, r6
 80072fe:	6876      	ldr	r6, [r6, #4]
 8007300:	e7b9      	b.n	8007276 <_malloc_r+0x46>
 8007302:	230c      	movs	r3, #12
 8007304:	603b      	str	r3, [r7, #0]
 8007306:	4638      	mov	r0, r7
 8007308:	f000 ff5e 	bl	80081c8 <__malloc_unlock>
 800730c:	e7a1      	b.n	8007252 <_malloc_r+0x22>
 800730e:	6025      	str	r5, [r4, #0]
 8007310:	e7de      	b.n	80072d0 <_malloc_r+0xa0>
 8007312:	bf00      	nop
 8007314:	20000338 	.word	0x20000338

08007318 <_sungetc_r>:
 8007318:	b538      	push	{r3, r4, r5, lr}
 800731a:	1c4b      	adds	r3, r1, #1
 800731c:	4614      	mov	r4, r2
 800731e:	d103      	bne.n	8007328 <_sungetc_r+0x10>
 8007320:	f04f 35ff 	mov.w	r5, #4294967295
 8007324:	4628      	mov	r0, r5
 8007326:	bd38      	pop	{r3, r4, r5, pc}
 8007328:	8993      	ldrh	r3, [r2, #12]
 800732a:	f023 0320 	bic.w	r3, r3, #32
 800732e:	8193      	strh	r3, [r2, #12]
 8007330:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007332:	6852      	ldr	r2, [r2, #4]
 8007334:	b2cd      	uxtb	r5, r1
 8007336:	b18b      	cbz	r3, 800735c <_sungetc_r+0x44>
 8007338:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800733a:	4293      	cmp	r3, r2
 800733c:	dd08      	ble.n	8007350 <_sungetc_r+0x38>
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	1e5a      	subs	r2, r3, #1
 8007342:	6022      	str	r2, [r4, #0]
 8007344:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007348:	6863      	ldr	r3, [r4, #4]
 800734a:	3301      	adds	r3, #1
 800734c:	6063      	str	r3, [r4, #4]
 800734e:	e7e9      	b.n	8007324 <_sungetc_r+0xc>
 8007350:	4621      	mov	r1, r4
 8007352:	f000 fec1 	bl	80080d8 <__submore>
 8007356:	2800      	cmp	r0, #0
 8007358:	d0f1      	beq.n	800733e <_sungetc_r+0x26>
 800735a:	e7e1      	b.n	8007320 <_sungetc_r+0x8>
 800735c:	6921      	ldr	r1, [r4, #16]
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	b151      	cbz	r1, 8007378 <_sungetc_r+0x60>
 8007362:	4299      	cmp	r1, r3
 8007364:	d208      	bcs.n	8007378 <_sungetc_r+0x60>
 8007366:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800736a:	42a9      	cmp	r1, r5
 800736c:	d104      	bne.n	8007378 <_sungetc_r+0x60>
 800736e:	3b01      	subs	r3, #1
 8007370:	3201      	adds	r2, #1
 8007372:	6023      	str	r3, [r4, #0]
 8007374:	6062      	str	r2, [r4, #4]
 8007376:	e7d5      	b.n	8007324 <_sungetc_r+0xc>
 8007378:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800737c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007380:	6363      	str	r3, [r4, #52]	; 0x34
 8007382:	2303      	movs	r3, #3
 8007384:	63a3      	str	r3, [r4, #56]	; 0x38
 8007386:	4623      	mov	r3, r4
 8007388:	f803 5f46 	strb.w	r5, [r3, #70]!
 800738c:	6023      	str	r3, [r4, #0]
 800738e:	2301      	movs	r3, #1
 8007390:	e7dc      	b.n	800734c <_sungetc_r+0x34>

08007392 <__ssrefill_r>:
 8007392:	b510      	push	{r4, lr}
 8007394:	460c      	mov	r4, r1
 8007396:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007398:	b169      	cbz	r1, 80073b6 <__ssrefill_r+0x24>
 800739a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800739e:	4299      	cmp	r1, r3
 80073a0:	d001      	beq.n	80073a6 <__ssrefill_r+0x14>
 80073a2:	f7ff fed9 	bl	8007158 <_free_r>
 80073a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073a8:	6063      	str	r3, [r4, #4]
 80073aa:	2000      	movs	r0, #0
 80073ac:	6360      	str	r0, [r4, #52]	; 0x34
 80073ae:	b113      	cbz	r3, 80073b6 <__ssrefill_r+0x24>
 80073b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80073b2:	6023      	str	r3, [r4, #0]
 80073b4:	bd10      	pop	{r4, pc}
 80073b6:	6923      	ldr	r3, [r4, #16]
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	2300      	movs	r3, #0
 80073bc:	6063      	str	r3, [r4, #4]
 80073be:	89a3      	ldrh	r3, [r4, #12]
 80073c0:	f043 0320 	orr.w	r3, r3, #32
 80073c4:	81a3      	strh	r3, [r4, #12]
 80073c6:	f04f 30ff 	mov.w	r0, #4294967295
 80073ca:	e7f3      	b.n	80073b4 <__ssrefill_r+0x22>

080073cc <__ssvfiscanf_r>:
 80073cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073d0:	460c      	mov	r4, r1
 80073d2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80073d6:	2100      	movs	r1, #0
 80073d8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80073dc:	49a6      	ldr	r1, [pc, #664]	; (8007678 <__ssvfiscanf_r+0x2ac>)
 80073de:	91a0      	str	r1, [sp, #640]	; 0x280
 80073e0:	f10d 0804 	add.w	r8, sp, #4
 80073e4:	49a5      	ldr	r1, [pc, #660]	; (800767c <__ssvfiscanf_r+0x2b0>)
 80073e6:	4fa6      	ldr	r7, [pc, #664]	; (8007680 <__ssvfiscanf_r+0x2b4>)
 80073e8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8007684 <__ssvfiscanf_r+0x2b8>
 80073ec:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80073f0:	4606      	mov	r6, r0
 80073f2:	91a1      	str	r1, [sp, #644]	; 0x284
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	7813      	ldrb	r3, [r2, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f000 815a 	beq.w	80076b2 <__ssvfiscanf_r+0x2e6>
 80073fe:	5dd9      	ldrb	r1, [r3, r7]
 8007400:	f011 0108 	ands.w	r1, r1, #8
 8007404:	f102 0501 	add.w	r5, r2, #1
 8007408:	d019      	beq.n	800743e <__ssvfiscanf_r+0x72>
 800740a:	6863      	ldr	r3, [r4, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	dd0f      	ble.n	8007430 <__ssvfiscanf_r+0x64>
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	781a      	ldrb	r2, [r3, #0]
 8007414:	5cba      	ldrb	r2, [r7, r2]
 8007416:	0712      	lsls	r2, r2, #28
 8007418:	d401      	bmi.n	800741e <__ssvfiscanf_r+0x52>
 800741a:	462a      	mov	r2, r5
 800741c:	e7eb      	b.n	80073f6 <__ssvfiscanf_r+0x2a>
 800741e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007420:	3201      	adds	r2, #1
 8007422:	9245      	str	r2, [sp, #276]	; 0x114
 8007424:	6862      	ldr	r2, [r4, #4]
 8007426:	3301      	adds	r3, #1
 8007428:	3a01      	subs	r2, #1
 800742a:	6062      	str	r2, [r4, #4]
 800742c:	6023      	str	r3, [r4, #0]
 800742e:	e7ec      	b.n	800740a <__ssvfiscanf_r+0x3e>
 8007430:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007432:	4621      	mov	r1, r4
 8007434:	4630      	mov	r0, r6
 8007436:	4798      	blx	r3
 8007438:	2800      	cmp	r0, #0
 800743a:	d0e9      	beq.n	8007410 <__ssvfiscanf_r+0x44>
 800743c:	e7ed      	b.n	800741a <__ssvfiscanf_r+0x4e>
 800743e:	2b25      	cmp	r3, #37	; 0x25
 8007440:	d012      	beq.n	8007468 <__ssvfiscanf_r+0x9c>
 8007442:	469a      	mov	sl, r3
 8007444:	6863      	ldr	r3, [r4, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	f340 8091 	ble.w	800756e <__ssvfiscanf_r+0x1a2>
 800744c:	6822      	ldr	r2, [r4, #0]
 800744e:	7813      	ldrb	r3, [r2, #0]
 8007450:	4553      	cmp	r3, sl
 8007452:	f040 812e 	bne.w	80076b2 <__ssvfiscanf_r+0x2e6>
 8007456:	6863      	ldr	r3, [r4, #4]
 8007458:	3b01      	subs	r3, #1
 800745a:	6063      	str	r3, [r4, #4]
 800745c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800745e:	3201      	adds	r2, #1
 8007460:	3301      	adds	r3, #1
 8007462:	6022      	str	r2, [r4, #0]
 8007464:	9345      	str	r3, [sp, #276]	; 0x114
 8007466:	e7d8      	b.n	800741a <__ssvfiscanf_r+0x4e>
 8007468:	9141      	str	r1, [sp, #260]	; 0x104
 800746a:	9143      	str	r1, [sp, #268]	; 0x10c
 800746c:	7853      	ldrb	r3, [r2, #1]
 800746e:	2b2a      	cmp	r3, #42	; 0x2a
 8007470:	bf02      	ittt	eq
 8007472:	2310      	moveq	r3, #16
 8007474:	1c95      	addeq	r5, r2, #2
 8007476:	9341      	streq	r3, [sp, #260]	; 0x104
 8007478:	220a      	movs	r2, #10
 800747a:	46aa      	mov	sl, r5
 800747c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007480:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007484:	2b09      	cmp	r3, #9
 8007486:	d91d      	bls.n	80074c4 <__ssvfiscanf_r+0xf8>
 8007488:	487e      	ldr	r0, [pc, #504]	; (8007684 <__ssvfiscanf_r+0x2b8>)
 800748a:	2203      	movs	r2, #3
 800748c:	f7f8 feb8 	bl	8000200 <memchr>
 8007490:	b140      	cbz	r0, 80074a4 <__ssvfiscanf_r+0xd8>
 8007492:	2301      	movs	r3, #1
 8007494:	eba0 0009 	sub.w	r0, r0, r9
 8007498:	fa03 f000 	lsl.w	r0, r3, r0
 800749c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800749e:	4318      	orrs	r0, r3
 80074a0:	9041      	str	r0, [sp, #260]	; 0x104
 80074a2:	4655      	mov	r5, sl
 80074a4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80074a8:	2b78      	cmp	r3, #120	; 0x78
 80074aa:	d806      	bhi.n	80074ba <__ssvfiscanf_r+0xee>
 80074ac:	2b57      	cmp	r3, #87	; 0x57
 80074ae:	d810      	bhi.n	80074d2 <__ssvfiscanf_r+0x106>
 80074b0:	2b25      	cmp	r3, #37	; 0x25
 80074b2:	d0c6      	beq.n	8007442 <__ssvfiscanf_r+0x76>
 80074b4:	d856      	bhi.n	8007564 <__ssvfiscanf_r+0x198>
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d064      	beq.n	8007584 <__ssvfiscanf_r+0x1b8>
 80074ba:	2303      	movs	r3, #3
 80074bc:	9347      	str	r3, [sp, #284]	; 0x11c
 80074be:	230a      	movs	r3, #10
 80074c0:	9342      	str	r3, [sp, #264]	; 0x108
 80074c2:	e071      	b.n	80075a8 <__ssvfiscanf_r+0x1dc>
 80074c4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80074c6:	fb02 1103 	mla	r1, r2, r3, r1
 80074ca:	3930      	subs	r1, #48	; 0x30
 80074cc:	9143      	str	r1, [sp, #268]	; 0x10c
 80074ce:	4655      	mov	r5, sl
 80074d0:	e7d3      	b.n	800747a <__ssvfiscanf_r+0xae>
 80074d2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80074d6:	2a20      	cmp	r2, #32
 80074d8:	d8ef      	bhi.n	80074ba <__ssvfiscanf_r+0xee>
 80074da:	a101      	add	r1, pc, #4	; (adr r1, 80074e0 <__ssvfiscanf_r+0x114>)
 80074dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80074e0:	08007593 	.word	0x08007593
 80074e4:	080074bb 	.word	0x080074bb
 80074e8:	080074bb 	.word	0x080074bb
 80074ec:	080075f1 	.word	0x080075f1
 80074f0:	080074bb 	.word	0x080074bb
 80074f4:	080074bb 	.word	0x080074bb
 80074f8:	080074bb 	.word	0x080074bb
 80074fc:	080074bb 	.word	0x080074bb
 8007500:	080074bb 	.word	0x080074bb
 8007504:	080074bb 	.word	0x080074bb
 8007508:	080074bb 	.word	0x080074bb
 800750c:	08007607 	.word	0x08007607
 8007510:	080075dd 	.word	0x080075dd
 8007514:	0800756b 	.word	0x0800756b
 8007518:	0800756b 	.word	0x0800756b
 800751c:	0800756b 	.word	0x0800756b
 8007520:	080074bb 	.word	0x080074bb
 8007524:	080075e1 	.word	0x080075e1
 8007528:	080074bb 	.word	0x080074bb
 800752c:	080074bb 	.word	0x080074bb
 8007530:	080074bb 	.word	0x080074bb
 8007534:	080074bb 	.word	0x080074bb
 8007538:	08007617 	.word	0x08007617
 800753c:	080075e9 	.word	0x080075e9
 8007540:	0800758b 	.word	0x0800758b
 8007544:	080074bb 	.word	0x080074bb
 8007548:	080074bb 	.word	0x080074bb
 800754c:	08007613 	.word	0x08007613
 8007550:	080074bb 	.word	0x080074bb
 8007554:	080075dd 	.word	0x080075dd
 8007558:	080074bb 	.word	0x080074bb
 800755c:	080074bb 	.word	0x080074bb
 8007560:	08007593 	.word	0x08007593
 8007564:	3b45      	subs	r3, #69	; 0x45
 8007566:	2b02      	cmp	r3, #2
 8007568:	d8a7      	bhi.n	80074ba <__ssvfiscanf_r+0xee>
 800756a:	2305      	movs	r3, #5
 800756c:	e01b      	b.n	80075a6 <__ssvfiscanf_r+0x1da>
 800756e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007570:	4621      	mov	r1, r4
 8007572:	4630      	mov	r0, r6
 8007574:	4798      	blx	r3
 8007576:	2800      	cmp	r0, #0
 8007578:	f43f af68 	beq.w	800744c <__ssvfiscanf_r+0x80>
 800757c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800757e:	2800      	cmp	r0, #0
 8007580:	f040 808d 	bne.w	800769e <__ssvfiscanf_r+0x2d2>
 8007584:	f04f 30ff 	mov.w	r0, #4294967295
 8007588:	e08f      	b.n	80076aa <__ssvfiscanf_r+0x2de>
 800758a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800758c:	f042 0220 	orr.w	r2, r2, #32
 8007590:	9241      	str	r2, [sp, #260]	; 0x104
 8007592:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007598:	9241      	str	r2, [sp, #260]	; 0x104
 800759a:	2210      	movs	r2, #16
 800759c:	2b6f      	cmp	r3, #111	; 0x6f
 800759e:	9242      	str	r2, [sp, #264]	; 0x108
 80075a0:	bf34      	ite	cc
 80075a2:	2303      	movcc	r3, #3
 80075a4:	2304      	movcs	r3, #4
 80075a6:	9347      	str	r3, [sp, #284]	; 0x11c
 80075a8:	6863      	ldr	r3, [r4, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	dd42      	ble.n	8007634 <__ssvfiscanf_r+0x268>
 80075ae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80075b0:	0659      	lsls	r1, r3, #25
 80075b2:	d404      	bmi.n	80075be <__ssvfiscanf_r+0x1f2>
 80075b4:	6823      	ldr	r3, [r4, #0]
 80075b6:	781a      	ldrb	r2, [r3, #0]
 80075b8:	5cba      	ldrb	r2, [r7, r2]
 80075ba:	0712      	lsls	r2, r2, #28
 80075bc:	d441      	bmi.n	8007642 <__ssvfiscanf_r+0x276>
 80075be:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	dc50      	bgt.n	8007666 <__ssvfiscanf_r+0x29a>
 80075c4:	466b      	mov	r3, sp
 80075c6:	4622      	mov	r2, r4
 80075c8:	a941      	add	r1, sp, #260	; 0x104
 80075ca:	4630      	mov	r0, r6
 80075cc:	f000 fb64 	bl	8007c98 <_scanf_chars>
 80075d0:	2801      	cmp	r0, #1
 80075d2:	d06e      	beq.n	80076b2 <__ssvfiscanf_r+0x2e6>
 80075d4:	2802      	cmp	r0, #2
 80075d6:	f47f af20 	bne.w	800741a <__ssvfiscanf_r+0x4e>
 80075da:	e7cf      	b.n	800757c <__ssvfiscanf_r+0x1b0>
 80075dc:	220a      	movs	r2, #10
 80075de:	e7dd      	b.n	800759c <__ssvfiscanf_r+0x1d0>
 80075e0:	2300      	movs	r3, #0
 80075e2:	9342      	str	r3, [sp, #264]	; 0x108
 80075e4:	2303      	movs	r3, #3
 80075e6:	e7de      	b.n	80075a6 <__ssvfiscanf_r+0x1da>
 80075e8:	2308      	movs	r3, #8
 80075ea:	9342      	str	r3, [sp, #264]	; 0x108
 80075ec:	2304      	movs	r3, #4
 80075ee:	e7da      	b.n	80075a6 <__ssvfiscanf_r+0x1da>
 80075f0:	4629      	mov	r1, r5
 80075f2:	4640      	mov	r0, r8
 80075f4:	f000 fcc4 	bl	8007f80 <__sccl>
 80075f8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80075fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075fe:	9341      	str	r3, [sp, #260]	; 0x104
 8007600:	4605      	mov	r5, r0
 8007602:	2301      	movs	r3, #1
 8007604:	e7cf      	b.n	80075a6 <__ssvfiscanf_r+0x1da>
 8007606:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800760c:	9341      	str	r3, [sp, #260]	; 0x104
 800760e:	2300      	movs	r3, #0
 8007610:	e7c9      	b.n	80075a6 <__ssvfiscanf_r+0x1da>
 8007612:	2302      	movs	r3, #2
 8007614:	e7c7      	b.n	80075a6 <__ssvfiscanf_r+0x1da>
 8007616:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007618:	06c3      	lsls	r3, r0, #27
 800761a:	f53f aefe 	bmi.w	800741a <__ssvfiscanf_r+0x4e>
 800761e:	9b00      	ldr	r3, [sp, #0]
 8007620:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007622:	1d19      	adds	r1, r3, #4
 8007624:	9100      	str	r1, [sp, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f010 0f01 	tst.w	r0, #1
 800762c:	bf14      	ite	ne
 800762e:	801a      	strhne	r2, [r3, #0]
 8007630:	601a      	streq	r2, [r3, #0]
 8007632:	e6f2      	b.n	800741a <__ssvfiscanf_r+0x4e>
 8007634:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007636:	4621      	mov	r1, r4
 8007638:	4630      	mov	r0, r6
 800763a:	4798      	blx	r3
 800763c:	2800      	cmp	r0, #0
 800763e:	d0b6      	beq.n	80075ae <__ssvfiscanf_r+0x1e2>
 8007640:	e79c      	b.n	800757c <__ssvfiscanf_r+0x1b0>
 8007642:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007644:	3201      	adds	r2, #1
 8007646:	9245      	str	r2, [sp, #276]	; 0x114
 8007648:	6862      	ldr	r2, [r4, #4]
 800764a:	3a01      	subs	r2, #1
 800764c:	2a00      	cmp	r2, #0
 800764e:	6062      	str	r2, [r4, #4]
 8007650:	dd02      	ble.n	8007658 <__ssvfiscanf_r+0x28c>
 8007652:	3301      	adds	r3, #1
 8007654:	6023      	str	r3, [r4, #0]
 8007656:	e7ad      	b.n	80075b4 <__ssvfiscanf_r+0x1e8>
 8007658:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800765a:	4621      	mov	r1, r4
 800765c:	4630      	mov	r0, r6
 800765e:	4798      	blx	r3
 8007660:	2800      	cmp	r0, #0
 8007662:	d0a7      	beq.n	80075b4 <__ssvfiscanf_r+0x1e8>
 8007664:	e78a      	b.n	800757c <__ssvfiscanf_r+0x1b0>
 8007666:	2b04      	cmp	r3, #4
 8007668:	dc0e      	bgt.n	8007688 <__ssvfiscanf_r+0x2bc>
 800766a:	466b      	mov	r3, sp
 800766c:	4622      	mov	r2, r4
 800766e:	a941      	add	r1, sp, #260	; 0x104
 8007670:	4630      	mov	r0, r6
 8007672:	f000 fb6b 	bl	8007d4c <_scanf_i>
 8007676:	e7ab      	b.n	80075d0 <__ssvfiscanf_r+0x204>
 8007678:	08007319 	.word	0x08007319
 800767c:	08007393 	.word	0x08007393
 8007680:	080085c1 	.word	0x080085c1
 8007684:	08008724 	.word	0x08008724
 8007688:	4b0b      	ldr	r3, [pc, #44]	; (80076b8 <__ssvfiscanf_r+0x2ec>)
 800768a:	2b00      	cmp	r3, #0
 800768c:	f43f aec5 	beq.w	800741a <__ssvfiscanf_r+0x4e>
 8007690:	466b      	mov	r3, sp
 8007692:	4622      	mov	r2, r4
 8007694:	a941      	add	r1, sp, #260	; 0x104
 8007696:	4630      	mov	r0, r6
 8007698:	f3af 8000 	nop.w
 800769c:	e798      	b.n	80075d0 <__ssvfiscanf_r+0x204>
 800769e:	89a3      	ldrh	r3, [r4, #12]
 80076a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80076a4:	bf18      	it	ne
 80076a6:	f04f 30ff 	movne.w	r0, #4294967295
 80076aa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80076ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076b2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80076b4:	e7f9      	b.n	80076aa <__ssvfiscanf_r+0x2de>
 80076b6:	bf00      	nop
 80076b8:	00000000 	.word	0x00000000

080076bc <__sfputc_r>:
 80076bc:	6893      	ldr	r3, [r2, #8]
 80076be:	3b01      	subs	r3, #1
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	b410      	push	{r4}
 80076c4:	6093      	str	r3, [r2, #8]
 80076c6:	da08      	bge.n	80076da <__sfputc_r+0x1e>
 80076c8:	6994      	ldr	r4, [r2, #24]
 80076ca:	42a3      	cmp	r3, r4
 80076cc:	db01      	blt.n	80076d2 <__sfputc_r+0x16>
 80076ce:	290a      	cmp	r1, #10
 80076d0:	d103      	bne.n	80076da <__sfputc_r+0x1e>
 80076d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076d6:	f7ff b9f3 	b.w	8006ac0 <__swbuf_r>
 80076da:	6813      	ldr	r3, [r2, #0]
 80076dc:	1c58      	adds	r0, r3, #1
 80076de:	6010      	str	r0, [r2, #0]
 80076e0:	7019      	strb	r1, [r3, #0]
 80076e2:	4608      	mov	r0, r1
 80076e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <__sfputs_r>:
 80076ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ec:	4606      	mov	r6, r0
 80076ee:	460f      	mov	r7, r1
 80076f0:	4614      	mov	r4, r2
 80076f2:	18d5      	adds	r5, r2, r3
 80076f4:	42ac      	cmp	r4, r5
 80076f6:	d101      	bne.n	80076fc <__sfputs_r+0x12>
 80076f8:	2000      	movs	r0, #0
 80076fa:	e007      	b.n	800770c <__sfputs_r+0x22>
 80076fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007700:	463a      	mov	r2, r7
 8007702:	4630      	mov	r0, r6
 8007704:	f7ff ffda 	bl	80076bc <__sfputc_r>
 8007708:	1c43      	adds	r3, r0, #1
 800770a:	d1f3      	bne.n	80076f4 <__sfputs_r+0xa>
 800770c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007710 <_vfiprintf_r>:
 8007710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007714:	460d      	mov	r5, r1
 8007716:	b09d      	sub	sp, #116	; 0x74
 8007718:	4614      	mov	r4, r2
 800771a:	4698      	mov	r8, r3
 800771c:	4606      	mov	r6, r0
 800771e:	b118      	cbz	r0, 8007728 <_vfiprintf_r+0x18>
 8007720:	6983      	ldr	r3, [r0, #24]
 8007722:	b90b      	cbnz	r3, 8007728 <_vfiprintf_r+0x18>
 8007724:	f7ff fbe6 	bl	8006ef4 <__sinit>
 8007728:	4b89      	ldr	r3, [pc, #548]	; (8007950 <_vfiprintf_r+0x240>)
 800772a:	429d      	cmp	r5, r3
 800772c:	d11b      	bne.n	8007766 <_vfiprintf_r+0x56>
 800772e:	6875      	ldr	r5, [r6, #4]
 8007730:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007732:	07d9      	lsls	r1, r3, #31
 8007734:	d405      	bmi.n	8007742 <_vfiprintf_r+0x32>
 8007736:	89ab      	ldrh	r3, [r5, #12]
 8007738:	059a      	lsls	r2, r3, #22
 800773a:	d402      	bmi.n	8007742 <_vfiprintf_r+0x32>
 800773c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800773e:	f7ff fc89 	bl	8007054 <__retarget_lock_acquire_recursive>
 8007742:	89ab      	ldrh	r3, [r5, #12]
 8007744:	071b      	lsls	r3, r3, #28
 8007746:	d501      	bpl.n	800774c <_vfiprintf_r+0x3c>
 8007748:	692b      	ldr	r3, [r5, #16]
 800774a:	b9eb      	cbnz	r3, 8007788 <_vfiprintf_r+0x78>
 800774c:	4629      	mov	r1, r5
 800774e:	4630      	mov	r0, r6
 8007750:	f7ff fa1a 	bl	8006b88 <__swsetup_r>
 8007754:	b1c0      	cbz	r0, 8007788 <_vfiprintf_r+0x78>
 8007756:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007758:	07dc      	lsls	r4, r3, #31
 800775a:	d50e      	bpl.n	800777a <_vfiprintf_r+0x6a>
 800775c:	f04f 30ff 	mov.w	r0, #4294967295
 8007760:	b01d      	add	sp, #116	; 0x74
 8007762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007766:	4b7b      	ldr	r3, [pc, #492]	; (8007954 <_vfiprintf_r+0x244>)
 8007768:	429d      	cmp	r5, r3
 800776a:	d101      	bne.n	8007770 <_vfiprintf_r+0x60>
 800776c:	68b5      	ldr	r5, [r6, #8]
 800776e:	e7df      	b.n	8007730 <_vfiprintf_r+0x20>
 8007770:	4b79      	ldr	r3, [pc, #484]	; (8007958 <_vfiprintf_r+0x248>)
 8007772:	429d      	cmp	r5, r3
 8007774:	bf08      	it	eq
 8007776:	68f5      	ldreq	r5, [r6, #12]
 8007778:	e7da      	b.n	8007730 <_vfiprintf_r+0x20>
 800777a:	89ab      	ldrh	r3, [r5, #12]
 800777c:	0598      	lsls	r0, r3, #22
 800777e:	d4ed      	bmi.n	800775c <_vfiprintf_r+0x4c>
 8007780:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007782:	f7ff fc68 	bl	8007056 <__retarget_lock_release_recursive>
 8007786:	e7e9      	b.n	800775c <_vfiprintf_r+0x4c>
 8007788:	2300      	movs	r3, #0
 800778a:	9309      	str	r3, [sp, #36]	; 0x24
 800778c:	2320      	movs	r3, #32
 800778e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007792:	f8cd 800c 	str.w	r8, [sp, #12]
 8007796:	2330      	movs	r3, #48	; 0x30
 8007798:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800795c <_vfiprintf_r+0x24c>
 800779c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077a0:	f04f 0901 	mov.w	r9, #1
 80077a4:	4623      	mov	r3, r4
 80077a6:	469a      	mov	sl, r3
 80077a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077ac:	b10a      	cbz	r2, 80077b2 <_vfiprintf_r+0xa2>
 80077ae:	2a25      	cmp	r2, #37	; 0x25
 80077b0:	d1f9      	bne.n	80077a6 <_vfiprintf_r+0x96>
 80077b2:	ebba 0b04 	subs.w	fp, sl, r4
 80077b6:	d00b      	beq.n	80077d0 <_vfiprintf_r+0xc0>
 80077b8:	465b      	mov	r3, fp
 80077ba:	4622      	mov	r2, r4
 80077bc:	4629      	mov	r1, r5
 80077be:	4630      	mov	r0, r6
 80077c0:	f7ff ff93 	bl	80076ea <__sfputs_r>
 80077c4:	3001      	adds	r0, #1
 80077c6:	f000 80aa 	beq.w	800791e <_vfiprintf_r+0x20e>
 80077ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077cc:	445a      	add	r2, fp
 80077ce:	9209      	str	r2, [sp, #36]	; 0x24
 80077d0:	f89a 3000 	ldrb.w	r3, [sl]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f000 80a2 	beq.w	800791e <_vfiprintf_r+0x20e>
 80077da:	2300      	movs	r3, #0
 80077dc:	f04f 32ff 	mov.w	r2, #4294967295
 80077e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077e4:	f10a 0a01 	add.w	sl, sl, #1
 80077e8:	9304      	str	r3, [sp, #16]
 80077ea:	9307      	str	r3, [sp, #28]
 80077ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077f0:	931a      	str	r3, [sp, #104]	; 0x68
 80077f2:	4654      	mov	r4, sl
 80077f4:	2205      	movs	r2, #5
 80077f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077fa:	4858      	ldr	r0, [pc, #352]	; (800795c <_vfiprintf_r+0x24c>)
 80077fc:	f7f8 fd00 	bl	8000200 <memchr>
 8007800:	9a04      	ldr	r2, [sp, #16]
 8007802:	b9d8      	cbnz	r0, 800783c <_vfiprintf_r+0x12c>
 8007804:	06d1      	lsls	r1, r2, #27
 8007806:	bf44      	itt	mi
 8007808:	2320      	movmi	r3, #32
 800780a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800780e:	0713      	lsls	r3, r2, #28
 8007810:	bf44      	itt	mi
 8007812:	232b      	movmi	r3, #43	; 0x2b
 8007814:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007818:	f89a 3000 	ldrb.w	r3, [sl]
 800781c:	2b2a      	cmp	r3, #42	; 0x2a
 800781e:	d015      	beq.n	800784c <_vfiprintf_r+0x13c>
 8007820:	9a07      	ldr	r2, [sp, #28]
 8007822:	4654      	mov	r4, sl
 8007824:	2000      	movs	r0, #0
 8007826:	f04f 0c0a 	mov.w	ip, #10
 800782a:	4621      	mov	r1, r4
 800782c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007830:	3b30      	subs	r3, #48	; 0x30
 8007832:	2b09      	cmp	r3, #9
 8007834:	d94e      	bls.n	80078d4 <_vfiprintf_r+0x1c4>
 8007836:	b1b0      	cbz	r0, 8007866 <_vfiprintf_r+0x156>
 8007838:	9207      	str	r2, [sp, #28]
 800783a:	e014      	b.n	8007866 <_vfiprintf_r+0x156>
 800783c:	eba0 0308 	sub.w	r3, r0, r8
 8007840:	fa09 f303 	lsl.w	r3, r9, r3
 8007844:	4313      	orrs	r3, r2
 8007846:	9304      	str	r3, [sp, #16]
 8007848:	46a2      	mov	sl, r4
 800784a:	e7d2      	b.n	80077f2 <_vfiprintf_r+0xe2>
 800784c:	9b03      	ldr	r3, [sp, #12]
 800784e:	1d19      	adds	r1, r3, #4
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	9103      	str	r1, [sp, #12]
 8007854:	2b00      	cmp	r3, #0
 8007856:	bfbb      	ittet	lt
 8007858:	425b      	neglt	r3, r3
 800785a:	f042 0202 	orrlt.w	r2, r2, #2
 800785e:	9307      	strge	r3, [sp, #28]
 8007860:	9307      	strlt	r3, [sp, #28]
 8007862:	bfb8      	it	lt
 8007864:	9204      	strlt	r2, [sp, #16]
 8007866:	7823      	ldrb	r3, [r4, #0]
 8007868:	2b2e      	cmp	r3, #46	; 0x2e
 800786a:	d10c      	bne.n	8007886 <_vfiprintf_r+0x176>
 800786c:	7863      	ldrb	r3, [r4, #1]
 800786e:	2b2a      	cmp	r3, #42	; 0x2a
 8007870:	d135      	bne.n	80078de <_vfiprintf_r+0x1ce>
 8007872:	9b03      	ldr	r3, [sp, #12]
 8007874:	1d1a      	adds	r2, r3, #4
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	9203      	str	r2, [sp, #12]
 800787a:	2b00      	cmp	r3, #0
 800787c:	bfb8      	it	lt
 800787e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007882:	3402      	adds	r4, #2
 8007884:	9305      	str	r3, [sp, #20]
 8007886:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800796c <_vfiprintf_r+0x25c>
 800788a:	7821      	ldrb	r1, [r4, #0]
 800788c:	2203      	movs	r2, #3
 800788e:	4650      	mov	r0, sl
 8007890:	f7f8 fcb6 	bl	8000200 <memchr>
 8007894:	b140      	cbz	r0, 80078a8 <_vfiprintf_r+0x198>
 8007896:	2340      	movs	r3, #64	; 0x40
 8007898:	eba0 000a 	sub.w	r0, r0, sl
 800789c:	fa03 f000 	lsl.w	r0, r3, r0
 80078a0:	9b04      	ldr	r3, [sp, #16]
 80078a2:	4303      	orrs	r3, r0
 80078a4:	3401      	adds	r4, #1
 80078a6:	9304      	str	r3, [sp, #16]
 80078a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078ac:	482c      	ldr	r0, [pc, #176]	; (8007960 <_vfiprintf_r+0x250>)
 80078ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078b2:	2206      	movs	r2, #6
 80078b4:	f7f8 fca4 	bl	8000200 <memchr>
 80078b8:	2800      	cmp	r0, #0
 80078ba:	d03f      	beq.n	800793c <_vfiprintf_r+0x22c>
 80078bc:	4b29      	ldr	r3, [pc, #164]	; (8007964 <_vfiprintf_r+0x254>)
 80078be:	bb1b      	cbnz	r3, 8007908 <_vfiprintf_r+0x1f8>
 80078c0:	9b03      	ldr	r3, [sp, #12]
 80078c2:	3307      	adds	r3, #7
 80078c4:	f023 0307 	bic.w	r3, r3, #7
 80078c8:	3308      	adds	r3, #8
 80078ca:	9303      	str	r3, [sp, #12]
 80078cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ce:	443b      	add	r3, r7
 80078d0:	9309      	str	r3, [sp, #36]	; 0x24
 80078d2:	e767      	b.n	80077a4 <_vfiprintf_r+0x94>
 80078d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80078d8:	460c      	mov	r4, r1
 80078da:	2001      	movs	r0, #1
 80078dc:	e7a5      	b.n	800782a <_vfiprintf_r+0x11a>
 80078de:	2300      	movs	r3, #0
 80078e0:	3401      	adds	r4, #1
 80078e2:	9305      	str	r3, [sp, #20]
 80078e4:	4619      	mov	r1, r3
 80078e6:	f04f 0c0a 	mov.w	ip, #10
 80078ea:	4620      	mov	r0, r4
 80078ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078f0:	3a30      	subs	r2, #48	; 0x30
 80078f2:	2a09      	cmp	r2, #9
 80078f4:	d903      	bls.n	80078fe <_vfiprintf_r+0x1ee>
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d0c5      	beq.n	8007886 <_vfiprintf_r+0x176>
 80078fa:	9105      	str	r1, [sp, #20]
 80078fc:	e7c3      	b.n	8007886 <_vfiprintf_r+0x176>
 80078fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007902:	4604      	mov	r4, r0
 8007904:	2301      	movs	r3, #1
 8007906:	e7f0      	b.n	80078ea <_vfiprintf_r+0x1da>
 8007908:	ab03      	add	r3, sp, #12
 800790a:	9300      	str	r3, [sp, #0]
 800790c:	462a      	mov	r2, r5
 800790e:	4b16      	ldr	r3, [pc, #88]	; (8007968 <_vfiprintf_r+0x258>)
 8007910:	a904      	add	r1, sp, #16
 8007912:	4630      	mov	r0, r6
 8007914:	f3af 8000 	nop.w
 8007918:	4607      	mov	r7, r0
 800791a:	1c78      	adds	r0, r7, #1
 800791c:	d1d6      	bne.n	80078cc <_vfiprintf_r+0x1bc>
 800791e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007920:	07d9      	lsls	r1, r3, #31
 8007922:	d405      	bmi.n	8007930 <_vfiprintf_r+0x220>
 8007924:	89ab      	ldrh	r3, [r5, #12]
 8007926:	059a      	lsls	r2, r3, #22
 8007928:	d402      	bmi.n	8007930 <_vfiprintf_r+0x220>
 800792a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800792c:	f7ff fb93 	bl	8007056 <__retarget_lock_release_recursive>
 8007930:	89ab      	ldrh	r3, [r5, #12]
 8007932:	065b      	lsls	r3, r3, #25
 8007934:	f53f af12 	bmi.w	800775c <_vfiprintf_r+0x4c>
 8007938:	9809      	ldr	r0, [sp, #36]	; 0x24
 800793a:	e711      	b.n	8007760 <_vfiprintf_r+0x50>
 800793c:	ab03      	add	r3, sp, #12
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	462a      	mov	r2, r5
 8007942:	4b09      	ldr	r3, [pc, #36]	; (8007968 <_vfiprintf_r+0x258>)
 8007944:	a904      	add	r1, sp, #16
 8007946:	4630      	mov	r0, r6
 8007948:	f000 f880 	bl	8007a4c <_printf_i>
 800794c:	e7e4      	b.n	8007918 <_vfiprintf_r+0x208>
 800794e:	bf00      	nop
 8007950:	080086e4 	.word	0x080086e4
 8007954:	08008704 	.word	0x08008704
 8007958:	080086c4 	.word	0x080086c4
 800795c:	08008728 	.word	0x08008728
 8007960:	0800872e 	.word	0x0800872e
 8007964:	00000000 	.word	0x00000000
 8007968:	080076eb 	.word	0x080076eb
 800796c:	08008724 	.word	0x08008724

08007970 <_printf_common>:
 8007970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007974:	4616      	mov	r6, r2
 8007976:	4699      	mov	r9, r3
 8007978:	688a      	ldr	r2, [r1, #8]
 800797a:	690b      	ldr	r3, [r1, #16]
 800797c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007980:	4293      	cmp	r3, r2
 8007982:	bfb8      	it	lt
 8007984:	4613      	movlt	r3, r2
 8007986:	6033      	str	r3, [r6, #0]
 8007988:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800798c:	4607      	mov	r7, r0
 800798e:	460c      	mov	r4, r1
 8007990:	b10a      	cbz	r2, 8007996 <_printf_common+0x26>
 8007992:	3301      	adds	r3, #1
 8007994:	6033      	str	r3, [r6, #0]
 8007996:	6823      	ldr	r3, [r4, #0]
 8007998:	0699      	lsls	r1, r3, #26
 800799a:	bf42      	ittt	mi
 800799c:	6833      	ldrmi	r3, [r6, #0]
 800799e:	3302      	addmi	r3, #2
 80079a0:	6033      	strmi	r3, [r6, #0]
 80079a2:	6825      	ldr	r5, [r4, #0]
 80079a4:	f015 0506 	ands.w	r5, r5, #6
 80079a8:	d106      	bne.n	80079b8 <_printf_common+0x48>
 80079aa:	f104 0a19 	add.w	sl, r4, #25
 80079ae:	68e3      	ldr	r3, [r4, #12]
 80079b0:	6832      	ldr	r2, [r6, #0]
 80079b2:	1a9b      	subs	r3, r3, r2
 80079b4:	42ab      	cmp	r3, r5
 80079b6:	dc26      	bgt.n	8007a06 <_printf_common+0x96>
 80079b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079bc:	1e13      	subs	r3, r2, #0
 80079be:	6822      	ldr	r2, [r4, #0]
 80079c0:	bf18      	it	ne
 80079c2:	2301      	movne	r3, #1
 80079c4:	0692      	lsls	r2, r2, #26
 80079c6:	d42b      	bmi.n	8007a20 <_printf_common+0xb0>
 80079c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079cc:	4649      	mov	r1, r9
 80079ce:	4638      	mov	r0, r7
 80079d0:	47c0      	blx	r8
 80079d2:	3001      	adds	r0, #1
 80079d4:	d01e      	beq.n	8007a14 <_printf_common+0xa4>
 80079d6:	6823      	ldr	r3, [r4, #0]
 80079d8:	68e5      	ldr	r5, [r4, #12]
 80079da:	6832      	ldr	r2, [r6, #0]
 80079dc:	f003 0306 	and.w	r3, r3, #6
 80079e0:	2b04      	cmp	r3, #4
 80079e2:	bf08      	it	eq
 80079e4:	1aad      	subeq	r5, r5, r2
 80079e6:	68a3      	ldr	r3, [r4, #8]
 80079e8:	6922      	ldr	r2, [r4, #16]
 80079ea:	bf0c      	ite	eq
 80079ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079f0:	2500      	movne	r5, #0
 80079f2:	4293      	cmp	r3, r2
 80079f4:	bfc4      	itt	gt
 80079f6:	1a9b      	subgt	r3, r3, r2
 80079f8:	18ed      	addgt	r5, r5, r3
 80079fa:	2600      	movs	r6, #0
 80079fc:	341a      	adds	r4, #26
 80079fe:	42b5      	cmp	r5, r6
 8007a00:	d11a      	bne.n	8007a38 <_printf_common+0xc8>
 8007a02:	2000      	movs	r0, #0
 8007a04:	e008      	b.n	8007a18 <_printf_common+0xa8>
 8007a06:	2301      	movs	r3, #1
 8007a08:	4652      	mov	r2, sl
 8007a0a:	4649      	mov	r1, r9
 8007a0c:	4638      	mov	r0, r7
 8007a0e:	47c0      	blx	r8
 8007a10:	3001      	adds	r0, #1
 8007a12:	d103      	bne.n	8007a1c <_printf_common+0xac>
 8007a14:	f04f 30ff 	mov.w	r0, #4294967295
 8007a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a1c:	3501      	adds	r5, #1
 8007a1e:	e7c6      	b.n	80079ae <_printf_common+0x3e>
 8007a20:	18e1      	adds	r1, r4, r3
 8007a22:	1c5a      	adds	r2, r3, #1
 8007a24:	2030      	movs	r0, #48	; 0x30
 8007a26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a2a:	4422      	add	r2, r4
 8007a2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a34:	3302      	adds	r3, #2
 8007a36:	e7c7      	b.n	80079c8 <_printf_common+0x58>
 8007a38:	2301      	movs	r3, #1
 8007a3a:	4622      	mov	r2, r4
 8007a3c:	4649      	mov	r1, r9
 8007a3e:	4638      	mov	r0, r7
 8007a40:	47c0      	blx	r8
 8007a42:	3001      	adds	r0, #1
 8007a44:	d0e6      	beq.n	8007a14 <_printf_common+0xa4>
 8007a46:	3601      	adds	r6, #1
 8007a48:	e7d9      	b.n	80079fe <_printf_common+0x8e>
	...

08007a4c <_printf_i>:
 8007a4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a50:	7e0f      	ldrb	r7, [r1, #24]
 8007a52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a54:	2f78      	cmp	r7, #120	; 0x78
 8007a56:	4691      	mov	r9, r2
 8007a58:	4680      	mov	r8, r0
 8007a5a:	460c      	mov	r4, r1
 8007a5c:	469a      	mov	sl, r3
 8007a5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a62:	d807      	bhi.n	8007a74 <_printf_i+0x28>
 8007a64:	2f62      	cmp	r7, #98	; 0x62
 8007a66:	d80a      	bhi.n	8007a7e <_printf_i+0x32>
 8007a68:	2f00      	cmp	r7, #0
 8007a6a:	f000 80d8 	beq.w	8007c1e <_printf_i+0x1d2>
 8007a6e:	2f58      	cmp	r7, #88	; 0x58
 8007a70:	f000 80a3 	beq.w	8007bba <_printf_i+0x16e>
 8007a74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a7c:	e03a      	b.n	8007af4 <_printf_i+0xa8>
 8007a7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a82:	2b15      	cmp	r3, #21
 8007a84:	d8f6      	bhi.n	8007a74 <_printf_i+0x28>
 8007a86:	a101      	add	r1, pc, #4	; (adr r1, 8007a8c <_printf_i+0x40>)
 8007a88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a8c:	08007ae5 	.word	0x08007ae5
 8007a90:	08007af9 	.word	0x08007af9
 8007a94:	08007a75 	.word	0x08007a75
 8007a98:	08007a75 	.word	0x08007a75
 8007a9c:	08007a75 	.word	0x08007a75
 8007aa0:	08007a75 	.word	0x08007a75
 8007aa4:	08007af9 	.word	0x08007af9
 8007aa8:	08007a75 	.word	0x08007a75
 8007aac:	08007a75 	.word	0x08007a75
 8007ab0:	08007a75 	.word	0x08007a75
 8007ab4:	08007a75 	.word	0x08007a75
 8007ab8:	08007c05 	.word	0x08007c05
 8007abc:	08007b29 	.word	0x08007b29
 8007ac0:	08007be7 	.word	0x08007be7
 8007ac4:	08007a75 	.word	0x08007a75
 8007ac8:	08007a75 	.word	0x08007a75
 8007acc:	08007c27 	.word	0x08007c27
 8007ad0:	08007a75 	.word	0x08007a75
 8007ad4:	08007b29 	.word	0x08007b29
 8007ad8:	08007a75 	.word	0x08007a75
 8007adc:	08007a75 	.word	0x08007a75
 8007ae0:	08007bef 	.word	0x08007bef
 8007ae4:	682b      	ldr	r3, [r5, #0]
 8007ae6:	1d1a      	adds	r2, r3, #4
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	602a      	str	r2, [r5, #0]
 8007aec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007af0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007af4:	2301      	movs	r3, #1
 8007af6:	e0a3      	b.n	8007c40 <_printf_i+0x1f4>
 8007af8:	6820      	ldr	r0, [r4, #0]
 8007afa:	6829      	ldr	r1, [r5, #0]
 8007afc:	0606      	lsls	r6, r0, #24
 8007afe:	f101 0304 	add.w	r3, r1, #4
 8007b02:	d50a      	bpl.n	8007b1a <_printf_i+0xce>
 8007b04:	680e      	ldr	r6, [r1, #0]
 8007b06:	602b      	str	r3, [r5, #0]
 8007b08:	2e00      	cmp	r6, #0
 8007b0a:	da03      	bge.n	8007b14 <_printf_i+0xc8>
 8007b0c:	232d      	movs	r3, #45	; 0x2d
 8007b0e:	4276      	negs	r6, r6
 8007b10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b14:	485e      	ldr	r0, [pc, #376]	; (8007c90 <_printf_i+0x244>)
 8007b16:	230a      	movs	r3, #10
 8007b18:	e019      	b.n	8007b4e <_printf_i+0x102>
 8007b1a:	680e      	ldr	r6, [r1, #0]
 8007b1c:	602b      	str	r3, [r5, #0]
 8007b1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b22:	bf18      	it	ne
 8007b24:	b236      	sxthne	r6, r6
 8007b26:	e7ef      	b.n	8007b08 <_printf_i+0xbc>
 8007b28:	682b      	ldr	r3, [r5, #0]
 8007b2a:	6820      	ldr	r0, [r4, #0]
 8007b2c:	1d19      	adds	r1, r3, #4
 8007b2e:	6029      	str	r1, [r5, #0]
 8007b30:	0601      	lsls	r1, r0, #24
 8007b32:	d501      	bpl.n	8007b38 <_printf_i+0xec>
 8007b34:	681e      	ldr	r6, [r3, #0]
 8007b36:	e002      	b.n	8007b3e <_printf_i+0xf2>
 8007b38:	0646      	lsls	r6, r0, #25
 8007b3a:	d5fb      	bpl.n	8007b34 <_printf_i+0xe8>
 8007b3c:	881e      	ldrh	r6, [r3, #0]
 8007b3e:	4854      	ldr	r0, [pc, #336]	; (8007c90 <_printf_i+0x244>)
 8007b40:	2f6f      	cmp	r7, #111	; 0x6f
 8007b42:	bf0c      	ite	eq
 8007b44:	2308      	moveq	r3, #8
 8007b46:	230a      	movne	r3, #10
 8007b48:	2100      	movs	r1, #0
 8007b4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b4e:	6865      	ldr	r5, [r4, #4]
 8007b50:	60a5      	str	r5, [r4, #8]
 8007b52:	2d00      	cmp	r5, #0
 8007b54:	bfa2      	ittt	ge
 8007b56:	6821      	ldrge	r1, [r4, #0]
 8007b58:	f021 0104 	bicge.w	r1, r1, #4
 8007b5c:	6021      	strge	r1, [r4, #0]
 8007b5e:	b90e      	cbnz	r6, 8007b64 <_printf_i+0x118>
 8007b60:	2d00      	cmp	r5, #0
 8007b62:	d04d      	beq.n	8007c00 <_printf_i+0x1b4>
 8007b64:	4615      	mov	r5, r2
 8007b66:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b6a:	fb03 6711 	mls	r7, r3, r1, r6
 8007b6e:	5dc7      	ldrb	r7, [r0, r7]
 8007b70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b74:	4637      	mov	r7, r6
 8007b76:	42bb      	cmp	r3, r7
 8007b78:	460e      	mov	r6, r1
 8007b7a:	d9f4      	bls.n	8007b66 <_printf_i+0x11a>
 8007b7c:	2b08      	cmp	r3, #8
 8007b7e:	d10b      	bne.n	8007b98 <_printf_i+0x14c>
 8007b80:	6823      	ldr	r3, [r4, #0]
 8007b82:	07de      	lsls	r6, r3, #31
 8007b84:	d508      	bpl.n	8007b98 <_printf_i+0x14c>
 8007b86:	6923      	ldr	r3, [r4, #16]
 8007b88:	6861      	ldr	r1, [r4, #4]
 8007b8a:	4299      	cmp	r1, r3
 8007b8c:	bfde      	ittt	le
 8007b8e:	2330      	movle	r3, #48	; 0x30
 8007b90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b98:	1b52      	subs	r2, r2, r5
 8007b9a:	6122      	str	r2, [r4, #16]
 8007b9c:	f8cd a000 	str.w	sl, [sp]
 8007ba0:	464b      	mov	r3, r9
 8007ba2:	aa03      	add	r2, sp, #12
 8007ba4:	4621      	mov	r1, r4
 8007ba6:	4640      	mov	r0, r8
 8007ba8:	f7ff fee2 	bl	8007970 <_printf_common>
 8007bac:	3001      	adds	r0, #1
 8007bae:	d14c      	bne.n	8007c4a <_printf_i+0x1fe>
 8007bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb4:	b004      	add	sp, #16
 8007bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bba:	4835      	ldr	r0, [pc, #212]	; (8007c90 <_printf_i+0x244>)
 8007bbc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007bc0:	6829      	ldr	r1, [r5, #0]
 8007bc2:	6823      	ldr	r3, [r4, #0]
 8007bc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007bc8:	6029      	str	r1, [r5, #0]
 8007bca:	061d      	lsls	r5, r3, #24
 8007bcc:	d514      	bpl.n	8007bf8 <_printf_i+0x1ac>
 8007bce:	07df      	lsls	r7, r3, #31
 8007bd0:	bf44      	itt	mi
 8007bd2:	f043 0320 	orrmi.w	r3, r3, #32
 8007bd6:	6023      	strmi	r3, [r4, #0]
 8007bd8:	b91e      	cbnz	r6, 8007be2 <_printf_i+0x196>
 8007bda:	6823      	ldr	r3, [r4, #0]
 8007bdc:	f023 0320 	bic.w	r3, r3, #32
 8007be0:	6023      	str	r3, [r4, #0]
 8007be2:	2310      	movs	r3, #16
 8007be4:	e7b0      	b.n	8007b48 <_printf_i+0xfc>
 8007be6:	6823      	ldr	r3, [r4, #0]
 8007be8:	f043 0320 	orr.w	r3, r3, #32
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	2378      	movs	r3, #120	; 0x78
 8007bf0:	4828      	ldr	r0, [pc, #160]	; (8007c94 <_printf_i+0x248>)
 8007bf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007bf6:	e7e3      	b.n	8007bc0 <_printf_i+0x174>
 8007bf8:	0659      	lsls	r1, r3, #25
 8007bfa:	bf48      	it	mi
 8007bfc:	b2b6      	uxthmi	r6, r6
 8007bfe:	e7e6      	b.n	8007bce <_printf_i+0x182>
 8007c00:	4615      	mov	r5, r2
 8007c02:	e7bb      	b.n	8007b7c <_printf_i+0x130>
 8007c04:	682b      	ldr	r3, [r5, #0]
 8007c06:	6826      	ldr	r6, [r4, #0]
 8007c08:	6961      	ldr	r1, [r4, #20]
 8007c0a:	1d18      	adds	r0, r3, #4
 8007c0c:	6028      	str	r0, [r5, #0]
 8007c0e:	0635      	lsls	r5, r6, #24
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	d501      	bpl.n	8007c18 <_printf_i+0x1cc>
 8007c14:	6019      	str	r1, [r3, #0]
 8007c16:	e002      	b.n	8007c1e <_printf_i+0x1d2>
 8007c18:	0670      	lsls	r0, r6, #25
 8007c1a:	d5fb      	bpl.n	8007c14 <_printf_i+0x1c8>
 8007c1c:	8019      	strh	r1, [r3, #0]
 8007c1e:	2300      	movs	r3, #0
 8007c20:	6123      	str	r3, [r4, #16]
 8007c22:	4615      	mov	r5, r2
 8007c24:	e7ba      	b.n	8007b9c <_printf_i+0x150>
 8007c26:	682b      	ldr	r3, [r5, #0]
 8007c28:	1d1a      	adds	r2, r3, #4
 8007c2a:	602a      	str	r2, [r5, #0]
 8007c2c:	681d      	ldr	r5, [r3, #0]
 8007c2e:	6862      	ldr	r2, [r4, #4]
 8007c30:	2100      	movs	r1, #0
 8007c32:	4628      	mov	r0, r5
 8007c34:	f7f8 fae4 	bl	8000200 <memchr>
 8007c38:	b108      	cbz	r0, 8007c3e <_printf_i+0x1f2>
 8007c3a:	1b40      	subs	r0, r0, r5
 8007c3c:	6060      	str	r0, [r4, #4]
 8007c3e:	6863      	ldr	r3, [r4, #4]
 8007c40:	6123      	str	r3, [r4, #16]
 8007c42:	2300      	movs	r3, #0
 8007c44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c48:	e7a8      	b.n	8007b9c <_printf_i+0x150>
 8007c4a:	6923      	ldr	r3, [r4, #16]
 8007c4c:	462a      	mov	r2, r5
 8007c4e:	4649      	mov	r1, r9
 8007c50:	4640      	mov	r0, r8
 8007c52:	47d0      	blx	sl
 8007c54:	3001      	adds	r0, #1
 8007c56:	d0ab      	beq.n	8007bb0 <_printf_i+0x164>
 8007c58:	6823      	ldr	r3, [r4, #0]
 8007c5a:	079b      	lsls	r3, r3, #30
 8007c5c:	d413      	bmi.n	8007c86 <_printf_i+0x23a>
 8007c5e:	68e0      	ldr	r0, [r4, #12]
 8007c60:	9b03      	ldr	r3, [sp, #12]
 8007c62:	4298      	cmp	r0, r3
 8007c64:	bfb8      	it	lt
 8007c66:	4618      	movlt	r0, r3
 8007c68:	e7a4      	b.n	8007bb4 <_printf_i+0x168>
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	4632      	mov	r2, r6
 8007c6e:	4649      	mov	r1, r9
 8007c70:	4640      	mov	r0, r8
 8007c72:	47d0      	blx	sl
 8007c74:	3001      	adds	r0, #1
 8007c76:	d09b      	beq.n	8007bb0 <_printf_i+0x164>
 8007c78:	3501      	adds	r5, #1
 8007c7a:	68e3      	ldr	r3, [r4, #12]
 8007c7c:	9903      	ldr	r1, [sp, #12]
 8007c7e:	1a5b      	subs	r3, r3, r1
 8007c80:	42ab      	cmp	r3, r5
 8007c82:	dcf2      	bgt.n	8007c6a <_printf_i+0x21e>
 8007c84:	e7eb      	b.n	8007c5e <_printf_i+0x212>
 8007c86:	2500      	movs	r5, #0
 8007c88:	f104 0619 	add.w	r6, r4, #25
 8007c8c:	e7f5      	b.n	8007c7a <_printf_i+0x22e>
 8007c8e:	bf00      	nop
 8007c90:	08008735 	.word	0x08008735
 8007c94:	08008746 	.word	0x08008746

08007c98 <_scanf_chars>:
 8007c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c9c:	4615      	mov	r5, r2
 8007c9e:	688a      	ldr	r2, [r1, #8]
 8007ca0:	4680      	mov	r8, r0
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	b932      	cbnz	r2, 8007cb4 <_scanf_chars+0x1c>
 8007ca6:	698a      	ldr	r2, [r1, #24]
 8007ca8:	2a00      	cmp	r2, #0
 8007caa:	bf0c      	ite	eq
 8007cac:	2201      	moveq	r2, #1
 8007cae:	f04f 32ff 	movne.w	r2, #4294967295
 8007cb2:	608a      	str	r2, [r1, #8]
 8007cb4:	6822      	ldr	r2, [r4, #0]
 8007cb6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8007d48 <_scanf_chars+0xb0>
 8007cba:	06d1      	lsls	r1, r2, #27
 8007cbc:	bf5f      	itttt	pl
 8007cbe:	681a      	ldrpl	r2, [r3, #0]
 8007cc0:	1d11      	addpl	r1, r2, #4
 8007cc2:	6019      	strpl	r1, [r3, #0]
 8007cc4:	6816      	ldrpl	r6, [r2, #0]
 8007cc6:	2700      	movs	r7, #0
 8007cc8:	69a0      	ldr	r0, [r4, #24]
 8007cca:	b188      	cbz	r0, 8007cf0 <_scanf_chars+0x58>
 8007ccc:	2801      	cmp	r0, #1
 8007cce:	d107      	bne.n	8007ce0 <_scanf_chars+0x48>
 8007cd0:	682a      	ldr	r2, [r5, #0]
 8007cd2:	7811      	ldrb	r1, [r2, #0]
 8007cd4:	6962      	ldr	r2, [r4, #20]
 8007cd6:	5c52      	ldrb	r2, [r2, r1]
 8007cd8:	b952      	cbnz	r2, 8007cf0 <_scanf_chars+0x58>
 8007cda:	2f00      	cmp	r7, #0
 8007cdc:	d031      	beq.n	8007d42 <_scanf_chars+0xaa>
 8007cde:	e022      	b.n	8007d26 <_scanf_chars+0x8e>
 8007ce0:	2802      	cmp	r0, #2
 8007ce2:	d120      	bne.n	8007d26 <_scanf_chars+0x8e>
 8007ce4:	682b      	ldr	r3, [r5, #0]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	f813 3009 	ldrb.w	r3, [r3, r9]
 8007cec:	071b      	lsls	r3, r3, #28
 8007cee:	d41a      	bmi.n	8007d26 <_scanf_chars+0x8e>
 8007cf0:	6823      	ldr	r3, [r4, #0]
 8007cf2:	06da      	lsls	r2, r3, #27
 8007cf4:	bf5e      	ittt	pl
 8007cf6:	682b      	ldrpl	r3, [r5, #0]
 8007cf8:	781b      	ldrbpl	r3, [r3, #0]
 8007cfa:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007cfe:	682a      	ldr	r2, [r5, #0]
 8007d00:	686b      	ldr	r3, [r5, #4]
 8007d02:	3201      	adds	r2, #1
 8007d04:	602a      	str	r2, [r5, #0]
 8007d06:	68a2      	ldr	r2, [r4, #8]
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	3a01      	subs	r2, #1
 8007d0c:	606b      	str	r3, [r5, #4]
 8007d0e:	3701      	adds	r7, #1
 8007d10:	60a2      	str	r2, [r4, #8]
 8007d12:	b142      	cbz	r2, 8007d26 <_scanf_chars+0x8e>
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	dcd7      	bgt.n	8007cc8 <_scanf_chars+0x30>
 8007d18:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007d1c:	4629      	mov	r1, r5
 8007d1e:	4640      	mov	r0, r8
 8007d20:	4798      	blx	r3
 8007d22:	2800      	cmp	r0, #0
 8007d24:	d0d0      	beq.n	8007cc8 <_scanf_chars+0x30>
 8007d26:	6823      	ldr	r3, [r4, #0]
 8007d28:	f013 0310 	ands.w	r3, r3, #16
 8007d2c:	d105      	bne.n	8007d3a <_scanf_chars+0xa2>
 8007d2e:	68e2      	ldr	r2, [r4, #12]
 8007d30:	3201      	adds	r2, #1
 8007d32:	60e2      	str	r2, [r4, #12]
 8007d34:	69a2      	ldr	r2, [r4, #24]
 8007d36:	b102      	cbz	r2, 8007d3a <_scanf_chars+0xa2>
 8007d38:	7033      	strb	r3, [r6, #0]
 8007d3a:	6923      	ldr	r3, [r4, #16]
 8007d3c:	443b      	add	r3, r7
 8007d3e:	6123      	str	r3, [r4, #16]
 8007d40:	2000      	movs	r0, #0
 8007d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d46:	bf00      	nop
 8007d48:	080085c1 	.word	0x080085c1

08007d4c <_scanf_i>:
 8007d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d50:	4698      	mov	r8, r3
 8007d52:	4b76      	ldr	r3, [pc, #472]	; (8007f2c <_scanf_i+0x1e0>)
 8007d54:	460c      	mov	r4, r1
 8007d56:	4682      	mov	sl, r0
 8007d58:	4616      	mov	r6, r2
 8007d5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	ab03      	add	r3, sp, #12
 8007d62:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007d66:	4b72      	ldr	r3, [pc, #456]	; (8007f30 <_scanf_i+0x1e4>)
 8007d68:	69a1      	ldr	r1, [r4, #24]
 8007d6a:	4a72      	ldr	r2, [pc, #456]	; (8007f34 <_scanf_i+0x1e8>)
 8007d6c:	2903      	cmp	r1, #3
 8007d6e:	bf18      	it	ne
 8007d70:	461a      	movne	r2, r3
 8007d72:	68a3      	ldr	r3, [r4, #8]
 8007d74:	9201      	str	r2, [sp, #4]
 8007d76:	1e5a      	subs	r2, r3, #1
 8007d78:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007d7c:	bf88      	it	hi
 8007d7e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007d82:	4627      	mov	r7, r4
 8007d84:	bf82      	ittt	hi
 8007d86:	eb03 0905 	addhi.w	r9, r3, r5
 8007d8a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007d8e:	60a3      	strhi	r3, [r4, #8]
 8007d90:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007d94:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007d98:	bf98      	it	ls
 8007d9a:	f04f 0900 	movls.w	r9, #0
 8007d9e:	6023      	str	r3, [r4, #0]
 8007da0:	463d      	mov	r5, r7
 8007da2:	f04f 0b00 	mov.w	fp, #0
 8007da6:	6831      	ldr	r1, [r6, #0]
 8007da8:	ab03      	add	r3, sp, #12
 8007daa:	7809      	ldrb	r1, [r1, #0]
 8007dac:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007db0:	2202      	movs	r2, #2
 8007db2:	f7f8 fa25 	bl	8000200 <memchr>
 8007db6:	b328      	cbz	r0, 8007e04 <_scanf_i+0xb8>
 8007db8:	f1bb 0f01 	cmp.w	fp, #1
 8007dbc:	d159      	bne.n	8007e72 <_scanf_i+0x126>
 8007dbe:	6862      	ldr	r2, [r4, #4]
 8007dc0:	b92a      	cbnz	r2, 8007dce <_scanf_i+0x82>
 8007dc2:	6822      	ldr	r2, [r4, #0]
 8007dc4:	2308      	movs	r3, #8
 8007dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dca:	6063      	str	r3, [r4, #4]
 8007dcc:	6022      	str	r2, [r4, #0]
 8007dce:	6822      	ldr	r2, [r4, #0]
 8007dd0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007dd4:	6022      	str	r2, [r4, #0]
 8007dd6:	68a2      	ldr	r2, [r4, #8]
 8007dd8:	1e51      	subs	r1, r2, #1
 8007dda:	60a1      	str	r1, [r4, #8]
 8007ddc:	b192      	cbz	r2, 8007e04 <_scanf_i+0xb8>
 8007dde:	6832      	ldr	r2, [r6, #0]
 8007de0:	1c51      	adds	r1, r2, #1
 8007de2:	6031      	str	r1, [r6, #0]
 8007de4:	7812      	ldrb	r2, [r2, #0]
 8007de6:	f805 2b01 	strb.w	r2, [r5], #1
 8007dea:	6872      	ldr	r2, [r6, #4]
 8007dec:	3a01      	subs	r2, #1
 8007dee:	2a00      	cmp	r2, #0
 8007df0:	6072      	str	r2, [r6, #4]
 8007df2:	dc07      	bgt.n	8007e04 <_scanf_i+0xb8>
 8007df4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8007df8:	4631      	mov	r1, r6
 8007dfa:	4650      	mov	r0, sl
 8007dfc:	4790      	blx	r2
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	f040 8085 	bne.w	8007f0e <_scanf_i+0x1c2>
 8007e04:	f10b 0b01 	add.w	fp, fp, #1
 8007e08:	f1bb 0f03 	cmp.w	fp, #3
 8007e0c:	d1cb      	bne.n	8007da6 <_scanf_i+0x5a>
 8007e0e:	6863      	ldr	r3, [r4, #4]
 8007e10:	b90b      	cbnz	r3, 8007e16 <_scanf_i+0xca>
 8007e12:	230a      	movs	r3, #10
 8007e14:	6063      	str	r3, [r4, #4]
 8007e16:	6863      	ldr	r3, [r4, #4]
 8007e18:	4947      	ldr	r1, [pc, #284]	; (8007f38 <_scanf_i+0x1ec>)
 8007e1a:	6960      	ldr	r0, [r4, #20]
 8007e1c:	1ac9      	subs	r1, r1, r3
 8007e1e:	f000 f8af 	bl	8007f80 <__sccl>
 8007e22:	f04f 0b00 	mov.w	fp, #0
 8007e26:	68a3      	ldr	r3, [r4, #8]
 8007e28:	6822      	ldr	r2, [r4, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d03d      	beq.n	8007eaa <_scanf_i+0x15e>
 8007e2e:	6831      	ldr	r1, [r6, #0]
 8007e30:	6960      	ldr	r0, [r4, #20]
 8007e32:	f891 c000 	ldrb.w	ip, [r1]
 8007e36:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	d035      	beq.n	8007eaa <_scanf_i+0x15e>
 8007e3e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007e42:	d124      	bne.n	8007e8e <_scanf_i+0x142>
 8007e44:	0510      	lsls	r0, r2, #20
 8007e46:	d522      	bpl.n	8007e8e <_scanf_i+0x142>
 8007e48:	f10b 0b01 	add.w	fp, fp, #1
 8007e4c:	f1b9 0f00 	cmp.w	r9, #0
 8007e50:	d003      	beq.n	8007e5a <_scanf_i+0x10e>
 8007e52:	3301      	adds	r3, #1
 8007e54:	f109 39ff 	add.w	r9, r9, #4294967295
 8007e58:	60a3      	str	r3, [r4, #8]
 8007e5a:	6873      	ldr	r3, [r6, #4]
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	6073      	str	r3, [r6, #4]
 8007e62:	dd1b      	ble.n	8007e9c <_scanf_i+0x150>
 8007e64:	6833      	ldr	r3, [r6, #0]
 8007e66:	3301      	adds	r3, #1
 8007e68:	6033      	str	r3, [r6, #0]
 8007e6a:	68a3      	ldr	r3, [r4, #8]
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	60a3      	str	r3, [r4, #8]
 8007e70:	e7d9      	b.n	8007e26 <_scanf_i+0xda>
 8007e72:	f1bb 0f02 	cmp.w	fp, #2
 8007e76:	d1ae      	bne.n	8007dd6 <_scanf_i+0x8a>
 8007e78:	6822      	ldr	r2, [r4, #0]
 8007e7a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007e7e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007e82:	d1bf      	bne.n	8007e04 <_scanf_i+0xb8>
 8007e84:	2310      	movs	r3, #16
 8007e86:	6063      	str	r3, [r4, #4]
 8007e88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e8c:	e7a2      	b.n	8007dd4 <_scanf_i+0x88>
 8007e8e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007e92:	6022      	str	r2, [r4, #0]
 8007e94:	780b      	ldrb	r3, [r1, #0]
 8007e96:	f805 3b01 	strb.w	r3, [r5], #1
 8007e9a:	e7de      	b.n	8007e5a <_scanf_i+0x10e>
 8007e9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007ea0:	4631      	mov	r1, r6
 8007ea2:	4650      	mov	r0, sl
 8007ea4:	4798      	blx	r3
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d0df      	beq.n	8007e6a <_scanf_i+0x11e>
 8007eaa:	6823      	ldr	r3, [r4, #0]
 8007eac:	05db      	lsls	r3, r3, #23
 8007eae:	d50d      	bpl.n	8007ecc <_scanf_i+0x180>
 8007eb0:	42bd      	cmp	r5, r7
 8007eb2:	d909      	bls.n	8007ec8 <_scanf_i+0x17c>
 8007eb4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007eb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ebc:	4632      	mov	r2, r6
 8007ebe:	4650      	mov	r0, sl
 8007ec0:	4798      	blx	r3
 8007ec2:	f105 39ff 	add.w	r9, r5, #4294967295
 8007ec6:	464d      	mov	r5, r9
 8007ec8:	42bd      	cmp	r5, r7
 8007eca:	d02d      	beq.n	8007f28 <_scanf_i+0x1dc>
 8007ecc:	6822      	ldr	r2, [r4, #0]
 8007ece:	f012 0210 	ands.w	r2, r2, #16
 8007ed2:	d113      	bne.n	8007efc <_scanf_i+0x1b0>
 8007ed4:	702a      	strb	r2, [r5, #0]
 8007ed6:	6863      	ldr	r3, [r4, #4]
 8007ed8:	9e01      	ldr	r6, [sp, #4]
 8007eda:	4639      	mov	r1, r7
 8007edc:	4650      	mov	r0, sl
 8007ede:	47b0      	blx	r6
 8007ee0:	6821      	ldr	r1, [r4, #0]
 8007ee2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ee6:	f011 0f20 	tst.w	r1, #32
 8007eea:	d013      	beq.n	8007f14 <_scanf_i+0x1c8>
 8007eec:	1d1a      	adds	r2, r3, #4
 8007eee:	f8c8 2000 	str.w	r2, [r8]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	6018      	str	r0, [r3, #0]
 8007ef6:	68e3      	ldr	r3, [r4, #12]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	60e3      	str	r3, [r4, #12]
 8007efc:	1bed      	subs	r5, r5, r7
 8007efe:	44ab      	add	fp, r5
 8007f00:	6925      	ldr	r5, [r4, #16]
 8007f02:	445d      	add	r5, fp
 8007f04:	6125      	str	r5, [r4, #16]
 8007f06:	2000      	movs	r0, #0
 8007f08:	b007      	add	sp, #28
 8007f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f0e:	f04f 0b00 	mov.w	fp, #0
 8007f12:	e7ca      	b.n	8007eaa <_scanf_i+0x15e>
 8007f14:	1d1a      	adds	r2, r3, #4
 8007f16:	f8c8 2000 	str.w	r2, [r8]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f011 0f01 	tst.w	r1, #1
 8007f20:	bf14      	ite	ne
 8007f22:	8018      	strhne	r0, [r3, #0]
 8007f24:	6018      	streq	r0, [r3, #0]
 8007f26:	e7e6      	b.n	8007ef6 <_scanf_i+0x1aa>
 8007f28:	2001      	movs	r0, #1
 8007f2a:	e7ed      	b.n	8007f08 <_scanf_i+0x1bc>
 8007f2c:	080084b8 	.word	0x080084b8
 8007f30:	080080d5 	.word	0x080080d5
 8007f34:	08006aa9 	.word	0x08006aa9
 8007f38:	08008770 	.word	0x08008770

08007f3c <_read_r>:
 8007f3c:	b538      	push	{r3, r4, r5, lr}
 8007f3e:	4d07      	ldr	r5, [pc, #28]	; (8007f5c <_read_r+0x20>)
 8007f40:	4604      	mov	r4, r0
 8007f42:	4608      	mov	r0, r1
 8007f44:	4611      	mov	r1, r2
 8007f46:	2200      	movs	r2, #0
 8007f48:	602a      	str	r2, [r5, #0]
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	f7f9 fe90 	bl	8001c70 <_read>
 8007f50:	1c43      	adds	r3, r0, #1
 8007f52:	d102      	bne.n	8007f5a <_read_r+0x1e>
 8007f54:	682b      	ldr	r3, [r5, #0]
 8007f56:	b103      	cbz	r3, 8007f5a <_read_r+0x1e>
 8007f58:	6023      	str	r3, [r4, #0]
 8007f5a:	bd38      	pop	{r3, r4, r5, pc}
 8007f5c:	20000340 	.word	0x20000340

08007f60 <_sbrk_r>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	4d06      	ldr	r5, [pc, #24]	; (8007f7c <_sbrk_r+0x1c>)
 8007f64:	2300      	movs	r3, #0
 8007f66:	4604      	mov	r4, r0
 8007f68:	4608      	mov	r0, r1
 8007f6a:	602b      	str	r3, [r5, #0]
 8007f6c:	f7f9 fed2 	bl	8001d14 <_sbrk>
 8007f70:	1c43      	adds	r3, r0, #1
 8007f72:	d102      	bne.n	8007f7a <_sbrk_r+0x1a>
 8007f74:	682b      	ldr	r3, [r5, #0]
 8007f76:	b103      	cbz	r3, 8007f7a <_sbrk_r+0x1a>
 8007f78:	6023      	str	r3, [r4, #0]
 8007f7a:	bd38      	pop	{r3, r4, r5, pc}
 8007f7c:	20000340 	.word	0x20000340

08007f80 <__sccl>:
 8007f80:	b570      	push	{r4, r5, r6, lr}
 8007f82:	780b      	ldrb	r3, [r1, #0]
 8007f84:	4604      	mov	r4, r0
 8007f86:	2b5e      	cmp	r3, #94	; 0x5e
 8007f88:	bf0b      	itete	eq
 8007f8a:	784b      	ldrbeq	r3, [r1, #1]
 8007f8c:	1c48      	addne	r0, r1, #1
 8007f8e:	1c88      	addeq	r0, r1, #2
 8007f90:	2200      	movne	r2, #0
 8007f92:	bf08      	it	eq
 8007f94:	2201      	moveq	r2, #1
 8007f96:	1e61      	subs	r1, r4, #1
 8007f98:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8007f9c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8007fa0:	42a9      	cmp	r1, r5
 8007fa2:	d1fb      	bne.n	8007f9c <__sccl+0x1c>
 8007fa4:	b90b      	cbnz	r3, 8007faa <__sccl+0x2a>
 8007fa6:	3801      	subs	r0, #1
 8007fa8:	bd70      	pop	{r4, r5, r6, pc}
 8007faa:	f082 0201 	eor.w	r2, r2, #1
 8007fae:	54e2      	strb	r2, [r4, r3]
 8007fb0:	4605      	mov	r5, r0
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	f810 1b01 	ldrb.w	r1, [r0], #1
 8007fb8:	292d      	cmp	r1, #45	; 0x2d
 8007fba:	d006      	beq.n	8007fca <__sccl+0x4a>
 8007fbc:	295d      	cmp	r1, #93	; 0x5d
 8007fbe:	d0f3      	beq.n	8007fa8 <__sccl+0x28>
 8007fc0:	b909      	cbnz	r1, 8007fc6 <__sccl+0x46>
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	e7f0      	b.n	8007fa8 <__sccl+0x28>
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	e7f1      	b.n	8007fae <__sccl+0x2e>
 8007fca:	786e      	ldrb	r6, [r5, #1]
 8007fcc:	2e5d      	cmp	r6, #93	; 0x5d
 8007fce:	d0fa      	beq.n	8007fc6 <__sccl+0x46>
 8007fd0:	42b3      	cmp	r3, r6
 8007fd2:	dcf8      	bgt.n	8007fc6 <__sccl+0x46>
 8007fd4:	3502      	adds	r5, #2
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	3101      	adds	r1, #1
 8007fda:	428e      	cmp	r6, r1
 8007fdc:	5462      	strb	r2, [r4, r1]
 8007fde:	dcfb      	bgt.n	8007fd8 <__sccl+0x58>
 8007fe0:	1af1      	subs	r1, r6, r3
 8007fe2:	3901      	subs	r1, #1
 8007fe4:	1c58      	adds	r0, r3, #1
 8007fe6:	42b3      	cmp	r3, r6
 8007fe8:	bfa8      	it	ge
 8007fea:	2100      	movge	r1, #0
 8007fec:	1843      	adds	r3, r0, r1
 8007fee:	e7e0      	b.n	8007fb2 <__sccl+0x32>

08007ff0 <_strtoul_l.constprop.0>:
 8007ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ff4:	4f36      	ldr	r7, [pc, #216]	; (80080d0 <_strtoul_l.constprop.0+0xe0>)
 8007ff6:	4686      	mov	lr, r0
 8007ff8:	460d      	mov	r5, r1
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008000:	5de6      	ldrb	r6, [r4, r7]
 8008002:	f016 0608 	ands.w	r6, r6, #8
 8008006:	d1f8      	bne.n	8007ffa <_strtoul_l.constprop.0+0xa>
 8008008:	2c2d      	cmp	r4, #45	; 0x2d
 800800a:	d12f      	bne.n	800806c <_strtoul_l.constprop.0+0x7c>
 800800c:	782c      	ldrb	r4, [r5, #0]
 800800e:	2601      	movs	r6, #1
 8008010:	1c85      	adds	r5, r0, #2
 8008012:	2b00      	cmp	r3, #0
 8008014:	d057      	beq.n	80080c6 <_strtoul_l.constprop.0+0xd6>
 8008016:	2b10      	cmp	r3, #16
 8008018:	d109      	bne.n	800802e <_strtoul_l.constprop.0+0x3e>
 800801a:	2c30      	cmp	r4, #48	; 0x30
 800801c:	d107      	bne.n	800802e <_strtoul_l.constprop.0+0x3e>
 800801e:	7828      	ldrb	r0, [r5, #0]
 8008020:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008024:	2858      	cmp	r0, #88	; 0x58
 8008026:	d149      	bne.n	80080bc <_strtoul_l.constprop.0+0xcc>
 8008028:	786c      	ldrb	r4, [r5, #1]
 800802a:	2310      	movs	r3, #16
 800802c:	3502      	adds	r5, #2
 800802e:	f04f 38ff 	mov.w	r8, #4294967295
 8008032:	2700      	movs	r7, #0
 8008034:	fbb8 f8f3 	udiv	r8, r8, r3
 8008038:	fb03 f908 	mul.w	r9, r3, r8
 800803c:	ea6f 0909 	mvn.w	r9, r9
 8008040:	4638      	mov	r0, r7
 8008042:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008046:	f1bc 0f09 	cmp.w	ip, #9
 800804a:	d814      	bhi.n	8008076 <_strtoul_l.constprop.0+0x86>
 800804c:	4664      	mov	r4, ip
 800804e:	42a3      	cmp	r3, r4
 8008050:	dd22      	ble.n	8008098 <_strtoul_l.constprop.0+0xa8>
 8008052:	2f00      	cmp	r7, #0
 8008054:	db1d      	blt.n	8008092 <_strtoul_l.constprop.0+0xa2>
 8008056:	4580      	cmp	r8, r0
 8008058:	d31b      	bcc.n	8008092 <_strtoul_l.constprop.0+0xa2>
 800805a:	d101      	bne.n	8008060 <_strtoul_l.constprop.0+0x70>
 800805c:	45a1      	cmp	r9, r4
 800805e:	db18      	blt.n	8008092 <_strtoul_l.constprop.0+0xa2>
 8008060:	fb00 4003 	mla	r0, r0, r3, r4
 8008064:	2701      	movs	r7, #1
 8008066:	f815 4b01 	ldrb.w	r4, [r5], #1
 800806a:	e7ea      	b.n	8008042 <_strtoul_l.constprop.0+0x52>
 800806c:	2c2b      	cmp	r4, #43	; 0x2b
 800806e:	bf04      	itt	eq
 8008070:	782c      	ldrbeq	r4, [r5, #0]
 8008072:	1c85      	addeq	r5, r0, #2
 8008074:	e7cd      	b.n	8008012 <_strtoul_l.constprop.0+0x22>
 8008076:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800807a:	f1bc 0f19 	cmp.w	ip, #25
 800807e:	d801      	bhi.n	8008084 <_strtoul_l.constprop.0+0x94>
 8008080:	3c37      	subs	r4, #55	; 0x37
 8008082:	e7e4      	b.n	800804e <_strtoul_l.constprop.0+0x5e>
 8008084:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008088:	f1bc 0f19 	cmp.w	ip, #25
 800808c:	d804      	bhi.n	8008098 <_strtoul_l.constprop.0+0xa8>
 800808e:	3c57      	subs	r4, #87	; 0x57
 8008090:	e7dd      	b.n	800804e <_strtoul_l.constprop.0+0x5e>
 8008092:	f04f 37ff 	mov.w	r7, #4294967295
 8008096:	e7e6      	b.n	8008066 <_strtoul_l.constprop.0+0x76>
 8008098:	2f00      	cmp	r7, #0
 800809a:	da07      	bge.n	80080ac <_strtoul_l.constprop.0+0xbc>
 800809c:	2322      	movs	r3, #34	; 0x22
 800809e:	f8ce 3000 	str.w	r3, [lr]
 80080a2:	f04f 30ff 	mov.w	r0, #4294967295
 80080a6:	b932      	cbnz	r2, 80080b6 <_strtoul_l.constprop.0+0xc6>
 80080a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080ac:	b106      	cbz	r6, 80080b0 <_strtoul_l.constprop.0+0xc0>
 80080ae:	4240      	negs	r0, r0
 80080b0:	2a00      	cmp	r2, #0
 80080b2:	d0f9      	beq.n	80080a8 <_strtoul_l.constprop.0+0xb8>
 80080b4:	b107      	cbz	r7, 80080b8 <_strtoul_l.constprop.0+0xc8>
 80080b6:	1e69      	subs	r1, r5, #1
 80080b8:	6011      	str	r1, [r2, #0]
 80080ba:	e7f5      	b.n	80080a8 <_strtoul_l.constprop.0+0xb8>
 80080bc:	2430      	movs	r4, #48	; 0x30
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1b5      	bne.n	800802e <_strtoul_l.constprop.0+0x3e>
 80080c2:	2308      	movs	r3, #8
 80080c4:	e7b3      	b.n	800802e <_strtoul_l.constprop.0+0x3e>
 80080c6:	2c30      	cmp	r4, #48	; 0x30
 80080c8:	d0a9      	beq.n	800801e <_strtoul_l.constprop.0+0x2e>
 80080ca:	230a      	movs	r3, #10
 80080cc:	e7af      	b.n	800802e <_strtoul_l.constprop.0+0x3e>
 80080ce:	bf00      	nop
 80080d0:	080085c1 	.word	0x080085c1

080080d4 <_strtoul_r>:
 80080d4:	f7ff bf8c 	b.w	8007ff0 <_strtoul_l.constprop.0>

080080d8 <__submore>:
 80080d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080dc:	460c      	mov	r4, r1
 80080de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80080e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080e4:	4299      	cmp	r1, r3
 80080e6:	d11d      	bne.n	8008124 <__submore+0x4c>
 80080e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80080ec:	f7ff f8a0 	bl	8007230 <_malloc_r>
 80080f0:	b918      	cbnz	r0, 80080fa <__submore+0x22>
 80080f2:	f04f 30ff 	mov.w	r0, #4294967295
 80080f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080fe:	63a3      	str	r3, [r4, #56]	; 0x38
 8008100:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008104:	6360      	str	r0, [r4, #52]	; 0x34
 8008106:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800810a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800810e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8008112:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008116:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800811a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800811e:	6020      	str	r0, [r4, #0]
 8008120:	2000      	movs	r0, #0
 8008122:	e7e8      	b.n	80080f6 <__submore+0x1e>
 8008124:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008126:	0077      	lsls	r7, r6, #1
 8008128:	463a      	mov	r2, r7
 800812a:	f000 f853 	bl	80081d4 <_realloc_r>
 800812e:	4605      	mov	r5, r0
 8008130:	2800      	cmp	r0, #0
 8008132:	d0de      	beq.n	80080f2 <__submore+0x1a>
 8008134:	eb00 0806 	add.w	r8, r0, r6
 8008138:	4601      	mov	r1, r0
 800813a:	4632      	mov	r2, r6
 800813c:	4640      	mov	r0, r8
 800813e:	f000 f82f 	bl	80081a0 <memcpy>
 8008142:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008146:	f8c4 8000 	str.w	r8, [r4]
 800814a:	e7e9      	b.n	8008120 <__submore+0x48>

0800814c <abort>:
 800814c:	b508      	push	{r3, lr}
 800814e:	2006      	movs	r0, #6
 8008150:	f000 f898 	bl	8008284 <raise>
 8008154:	2001      	movs	r0, #1
 8008156:	f7f9 fd81 	bl	8001c5c <_exit>
	...

0800815c <_fstat_r>:
 800815c:	b538      	push	{r3, r4, r5, lr}
 800815e:	4d07      	ldr	r5, [pc, #28]	; (800817c <_fstat_r+0x20>)
 8008160:	2300      	movs	r3, #0
 8008162:	4604      	mov	r4, r0
 8008164:	4608      	mov	r0, r1
 8008166:	4611      	mov	r1, r2
 8008168:	602b      	str	r3, [r5, #0]
 800816a:	f7f9 fdaa 	bl	8001cc2 <_fstat>
 800816e:	1c43      	adds	r3, r0, #1
 8008170:	d102      	bne.n	8008178 <_fstat_r+0x1c>
 8008172:	682b      	ldr	r3, [r5, #0]
 8008174:	b103      	cbz	r3, 8008178 <_fstat_r+0x1c>
 8008176:	6023      	str	r3, [r4, #0]
 8008178:	bd38      	pop	{r3, r4, r5, pc}
 800817a:	bf00      	nop
 800817c:	20000340 	.word	0x20000340

08008180 <_isatty_r>:
 8008180:	b538      	push	{r3, r4, r5, lr}
 8008182:	4d06      	ldr	r5, [pc, #24]	; (800819c <_isatty_r+0x1c>)
 8008184:	2300      	movs	r3, #0
 8008186:	4604      	mov	r4, r0
 8008188:	4608      	mov	r0, r1
 800818a:	602b      	str	r3, [r5, #0]
 800818c:	f7f9 fda9 	bl	8001ce2 <_isatty>
 8008190:	1c43      	adds	r3, r0, #1
 8008192:	d102      	bne.n	800819a <_isatty_r+0x1a>
 8008194:	682b      	ldr	r3, [r5, #0]
 8008196:	b103      	cbz	r3, 800819a <_isatty_r+0x1a>
 8008198:	6023      	str	r3, [r4, #0]
 800819a:	bd38      	pop	{r3, r4, r5, pc}
 800819c:	20000340 	.word	0x20000340

080081a0 <memcpy>:
 80081a0:	440a      	add	r2, r1
 80081a2:	4291      	cmp	r1, r2
 80081a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80081a8:	d100      	bne.n	80081ac <memcpy+0xc>
 80081aa:	4770      	bx	lr
 80081ac:	b510      	push	{r4, lr}
 80081ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081b6:	4291      	cmp	r1, r2
 80081b8:	d1f9      	bne.n	80081ae <memcpy+0xe>
 80081ba:	bd10      	pop	{r4, pc}

080081bc <__malloc_lock>:
 80081bc:	4801      	ldr	r0, [pc, #4]	; (80081c4 <__malloc_lock+0x8>)
 80081be:	f7fe bf49 	b.w	8007054 <__retarget_lock_acquire_recursive>
 80081c2:	bf00      	nop
 80081c4:	20000334 	.word	0x20000334

080081c8 <__malloc_unlock>:
 80081c8:	4801      	ldr	r0, [pc, #4]	; (80081d0 <__malloc_unlock+0x8>)
 80081ca:	f7fe bf44 	b.w	8007056 <__retarget_lock_release_recursive>
 80081ce:	bf00      	nop
 80081d0:	20000334 	.word	0x20000334

080081d4 <_realloc_r>:
 80081d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081d8:	4680      	mov	r8, r0
 80081da:	4614      	mov	r4, r2
 80081dc:	460e      	mov	r6, r1
 80081de:	b921      	cbnz	r1, 80081ea <_realloc_r+0x16>
 80081e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081e4:	4611      	mov	r1, r2
 80081e6:	f7ff b823 	b.w	8007230 <_malloc_r>
 80081ea:	b92a      	cbnz	r2, 80081f8 <_realloc_r+0x24>
 80081ec:	f7fe ffb4 	bl	8007158 <_free_r>
 80081f0:	4625      	mov	r5, r4
 80081f2:	4628      	mov	r0, r5
 80081f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081f8:	f000 f860 	bl	80082bc <_malloc_usable_size_r>
 80081fc:	4284      	cmp	r4, r0
 80081fe:	4607      	mov	r7, r0
 8008200:	d802      	bhi.n	8008208 <_realloc_r+0x34>
 8008202:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008206:	d812      	bhi.n	800822e <_realloc_r+0x5a>
 8008208:	4621      	mov	r1, r4
 800820a:	4640      	mov	r0, r8
 800820c:	f7ff f810 	bl	8007230 <_malloc_r>
 8008210:	4605      	mov	r5, r0
 8008212:	2800      	cmp	r0, #0
 8008214:	d0ed      	beq.n	80081f2 <_realloc_r+0x1e>
 8008216:	42bc      	cmp	r4, r7
 8008218:	4622      	mov	r2, r4
 800821a:	4631      	mov	r1, r6
 800821c:	bf28      	it	cs
 800821e:	463a      	movcs	r2, r7
 8008220:	f7ff ffbe 	bl	80081a0 <memcpy>
 8008224:	4631      	mov	r1, r6
 8008226:	4640      	mov	r0, r8
 8008228:	f7fe ff96 	bl	8007158 <_free_r>
 800822c:	e7e1      	b.n	80081f2 <_realloc_r+0x1e>
 800822e:	4635      	mov	r5, r6
 8008230:	e7df      	b.n	80081f2 <_realloc_r+0x1e>

08008232 <_raise_r>:
 8008232:	291f      	cmp	r1, #31
 8008234:	b538      	push	{r3, r4, r5, lr}
 8008236:	4604      	mov	r4, r0
 8008238:	460d      	mov	r5, r1
 800823a:	d904      	bls.n	8008246 <_raise_r+0x14>
 800823c:	2316      	movs	r3, #22
 800823e:	6003      	str	r3, [r0, #0]
 8008240:	f04f 30ff 	mov.w	r0, #4294967295
 8008244:	bd38      	pop	{r3, r4, r5, pc}
 8008246:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008248:	b112      	cbz	r2, 8008250 <_raise_r+0x1e>
 800824a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800824e:	b94b      	cbnz	r3, 8008264 <_raise_r+0x32>
 8008250:	4620      	mov	r0, r4
 8008252:	f000 f831 	bl	80082b8 <_getpid_r>
 8008256:	462a      	mov	r2, r5
 8008258:	4601      	mov	r1, r0
 800825a:	4620      	mov	r0, r4
 800825c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008260:	f000 b818 	b.w	8008294 <_kill_r>
 8008264:	2b01      	cmp	r3, #1
 8008266:	d00a      	beq.n	800827e <_raise_r+0x4c>
 8008268:	1c59      	adds	r1, r3, #1
 800826a:	d103      	bne.n	8008274 <_raise_r+0x42>
 800826c:	2316      	movs	r3, #22
 800826e:	6003      	str	r3, [r0, #0]
 8008270:	2001      	movs	r0, #1
 8008272:	e7e7      	b.n	8008244 <_raise_r+0x12>
 8008274:	2400      	movs	r4, #0
 8008276:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800827a:	4628      	mov	r0, r5
 800827c:	4798      	blx	r3
 800827e:	2000      	movs	r0, #0
 8008280:	e7e0      	b.n	8008244 <_raise_r+0x12>
	...

08008284 <raise>:
 8008284:	4b02      	ldr	r3, [pc, #8]	; (8008290 <raise+0xc>)
 8008286:	4601      	mov	r1, r0
 8008288:	6818      	ldr	r0, [r3, #0]
 800828a:	f7ff bfd2 	b.w	8008232 <_raise_r>
 800828e:	bf00      	nop
 8008290:	20000028 	.word	0x20000028

08008294 <_kill_r>:
 8008294:	b538      	push	{r3, r4, r5, lr}
 8008296:	4d07      	ldr	r5, [pc, #28]	; (80082b4 <_kill_r+0x20>)
 8008298:	2300      	movs	r3, #0
 800829a:	4604      	mov	r4, r0
 800829c:	4608      	mov	r0, r1
 800829e:	4611      	mov	r1, r2
 80082a0:	602b      	str	r3, [r5, #0]
 80082a2:	f7f9 fccb 	bl	8001c3c <_kill>
 80082a6:	1c43      	adds	r3, r0, #1
 80082a8:	d102      	bne.n	80082b0 <_kill_r+0x1c>
 80082aa:	682b      	ldr	r3, [r5, #0]
 80082ac:	b103      	cbz	r3, 80082b0 <_kill_r+0x1c>
 80082ae:	6023      	str	r3, [r4, #0]
 80082b0:	bd38      	pop	{r3, r4, r5, pc}
 80082b2:	bf00      	nop
 80082b4:	20000340 	.word	0x20000340

080082b8 <_getpid_r>:
 80082b8:	f7f9 bcb8 	b.w	8001c2c <_getpid>

080082bc <_malloc_usable_size_r>:
 80082bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082c0:	1f18      	subs	r0, r3, #4
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	bfbc      	itt	lt
 80082c6:	580b      	ldrlt	r3, [r1, r0]
 80082c8:	18c0      	addlt	r0, r0, r3
 80082ca:	4770      	bx	lr

080082cc <_init>:
 80082cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ce:	bf00      	nop
 80082d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082d2:	bc08      	pop	{r3}
 80082d4:	469e      	mov	lr, r3
 80082d6:	4770      	bx	lr

080082d8 <_fini>:
 80082d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082da:	bf00      	nop
 80082dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082de:	bc08      	pop	{r3}
 80082e0:	469e      	mov	lr, r3
 80082e2:	4770      	bx	lr
